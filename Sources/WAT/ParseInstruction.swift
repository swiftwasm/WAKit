// swift-format-ignore-file
//// Automatically generated by Utilities/Sources/WasmGen.swift
//// DO NOT EDIT DIRECTLY

import WasmParser
import WasmTypes

/// Parses a text instruction, consuming immediate tokens as necessary.
/// - Parameters:
///   - keyword: The keyword of the instruction.
///   - expressionParser: The expression parser.
/// - Returns: A closure that invokes the corresponding visitor method. Nil if the keyword is not recognized.
///
/// Note: The returned closure does not consume any tokens.
func parseTextInstruction<V: InstructionVisitor>(keyword: String, expressionParser: inout ExpressionParser<V>, wat: inout Wat) throws -> ((inout V) throws -> V.Output)? {
    switch keyword {
    case "unreachable": return { return try $0.visitUnreachable() }
    case "nop": return { return try $0.visitNop() }
    case "block":
        let (blockType) = try expressionParser.visitBlock(wat: &wat)
        return { return try $0.visitBlock(blockType: blockType) }
    case "loop":
        let (blockType) = try expressionParser.visitLoop(wat: &wat)
        return { return try $0.visitLoop(blockType: blockType) }
    case "if":
        let (blockType) = try expressionParser.visitIf(wat: &wat)
        return { return try $0.visitIf(blockType: blockType) }
    case "else": return { return try $0.visitElse() }
    case "end": return { return try $0.visitEnd() }
    case "br":
        let (relativeDepth) = try expressionParser.visitBr(wat: &wat)
        return { return try $0.visitBr(relativeDepth: relativeDepth) }
    case "br_if":
        let (relativeDepth) = try expressionParser.visitBrIf(wat: &wat)
        return { return try $0.visitBrIf(relativeDepth: relativeDepth) }
    case "br_table":
        let (targets) = try expressionParser.visitBrTable(wat: &wat)
        return { return try $0.visitBrTable(targets: targets) }
    case "return": return { return try $0.visitReturn() }
    case "call":
        let (functionIndex) = try expressionParser.visitCall(wat: &wat)
        return { return try $0.visitCall(functionIndex: functionIndex) }
    case "call_indirect":
        let (typeIndex, tableIndex) = try expressionParser.visitCallIndirect(wat: &wat)
        return { return try $0.visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex) }
    case "drop": return { return try $0.visitDrop() }
    case "select": return { return try $0.visitSelect() }
    case "local.get":
        let (localIndex) = try expressionParser.visitLocalGet(wat: &wat)
        return { return try $0.visitLocalGet(localIndex: localIndex) }
    case "local.set":
        let (localIndex) = try expressionParser.visitLocalSet(wat: &wat)
        return { return try $0.visitLocalSet(localIndex: localIndex) }
    case "local.tee":
        let (localIndex) = try expressionParser.visitLocalTee(wat: &wat)
        return { return try $0.visitLocalTee(localIndex: localIndex) }
    case "global.get":
        let (globalIndex) = try expressionParser.visitGlobalGet(wat: &wat)
        return { return try $0.visitGlobalGet(globalIndex: globalIndex) }
    case "global.set":
        let (globalIndex) = try expressionParser.visitGlobalSet(wat: &wat)
        return { return try $0.visitGlobalSet(globalIndex: globalIndex) }
    case "i32.load":
        let (memarg) = try expressionParser.visitI32Load(wat: &wat)
        return { return try $0.visitI32Load(memarg: memarg) }
    case "i64.load":
        let (memarg) = try expressionParser.visitI64Load(wat: &wat)
        return { return try $0.visitI64Load(memarg: memarg) }
    case "f32.load":
        let (memarg) = try expressionParser.visitF32Load(wat: &wat)
        return { return try $0.visitF32Load(memarg: memarg) }
    case "f64.load":
        let (memarg) = try expressionParser.visitF64Load(wat: &wat)
        return { return try $0.visitF64Load(memarg: memarg) }
    case "i32.load8_s":
        let (memarg) = try expressionParser.visitI32Load8S(wat: &wat)
        return { return try $0.visitI32Load8S(memarg: memarg) }
    case "i32.load8_u":
        let (memarg) = try expressionParser.visitI32Load8U(wat: &wat)
        return { return try $0.visitI32Load8U(memarg: memarg) }
    case "i32.load16_s":
        let (memarg) = try expressionParser.visitI32Load16S(wat: &wat)
        return { return try $0.visitI32Load16S(memarg: memarg) }
    case "i32.load16_u":
        let (memarg) = try expressionParser.visitI32Load16U(wat: &wat)
        return { return try $0.visitI32Load16U(memarg: memarg) }
    case "i64.load8_s":
        let (memarg) = try expressionParser.visitI64Load8S(wat: &wat)
        return { return try $0.visitI64Load8S(memarg: memarg) }
    case "i64.load8_u":
        let (memarg) = try expressionParser.visitI64Load8U(wat: &wat)
        return { return try $0.visitI64Load8U(memarg: memarg) }
    case "i64.load16_s":
        let (memarg) = try expressionParser.visitI64Load16S(wat: &wat)
        return { return try $0.visitI64Load16S(memarg: memarg) }
    case "i64.load16_u":
        let (memarg) = try expressionParser.visitI64Load16U(wat: &wat)
        return { return try $0.visitI64Load16U(memarg: memarg) }
    case "i64.load32_s":
        let (memarg) = try expressionParser.visitI64Load32S(wat: &wat)
        return { return try $0.visitI64Load32S(memarg: memarg) }
    case "i64.load32_u":
        let (memarg) = try expressionParser.visitI64Load32U(wat: &wat)
        return { return try $0.visitI64Load32U(memarg: memarg) }
    case "i32.store":
        let (memarg) = try expressionParser.visitI32Store(wat: &wat)
        return { return try $0.visitI32Store(memarg: memarg) }
    case "i64.store":
        let (memarg) = try expressionParser.visitI64Store(wat: &wat)
        return { return try $0.visitI64Store(memarg: memarg) }
    case "f32.store":
        let (memarg) = try expressionParser.visitF32Store(wat: &wat)
        return { return try $0.visitF32Store(memarg: memarg) }
    case "f64.store":
        let (memarg) = try expressionParser.visitF64Store(wat: &wat)
        return { return try $0.visitF64Store(memarg: memarg) }
    case "i32.store8":
        let (memarg) = try expressionParser.visitI32Store8(wat: &wat)
        return { return try $0.visitI32Store8(memarg: memarg) }
    case "i32.store16":
        let (memarg) = try expressionParser.visitI32Store16(wat: &wat)
        return { return try $0.visitI32Store16(memarg: memarg) }
    case "i64.store8":
        let (memarg) = try expressionParser.visitI64Store8(wat: &wat)
        return { return try $0.visitI64Store8(memarg: memarg) }
    case "i64.store16":
        let (memarg) = try expressionParser.visitI64Store16(wat: &wat)
        return { return try $0.visitI64Store16(memarg: memarg) }
    case "i64.store32":
        let (memarg) = try expressionParser.visitI64Store32(wat: &wat)
        return { return try $0.visitI64Store32(memarg: memarg) }
    case "memory.size":
        let (memory) = try expressionParser.visitMemorySize(wat: &wat)
        return { return try $0.visitMemorySize(memory: memory) }
    case "memory.grow":
        let (memory) = try expressionParser.visitMemoryGrow(wat: &wat)
        return { return try $0.visitMemoryGrow(memory: memory) }
    case "i32.const":
        let (value) = try expressionParser.visitI32Const(wat: &wat)
        return { return try $0.visitI32Const(value: value) }
    case "i64.const":
        let (value) = try expressionParser.visitI64Const(wat: &wat)
        return { return try $0.visitI64Const(value: value) }
    case "f32.const":
        let (value) = try expressionParser.visitF32Const(wat: &wat)
        return { return try $0.visitF32Const(value: value) }
    case "f64.const":
        let (value) = try expressionParser.visitF64Const(wat: &wat)
        return { return try $0.visitF64Const(value: value) }
    case "ref.null":
        let (type) = try expressionParser.visitRefNull(wat: &wat)
        return { return try $0.visitRefNull(type: type) }
    case "ref.is_null": return { return try $0.visitRefIsNull() }
    case "ref.func":
        let (functionIndex) = try expressionParser.visitRefFunc(wat: &wat)
        return { return try $0.visitRefFunc(functionIndex: functionIndex) }
    case "i32.eqz": return { return try $0.visitI32Eqz() }
    case "i32.eq": return { return try $0.visitI32Eq() }
    case "i32.ne": return { return try $0.visitI32Ne() }
    case "i32.lt_s": return { return try $0.visitI32LtS() }
    case "i32.lt_u": return { return try $0.visitI32LtU() }
    case "i32.gt_s": return { return try $0.visitI32GtS() }
    case "i32.gt_u": return { return try $0.visitI32GtU() }
    case "i32.le_s": return { return try $0.visitI32LeS() }
    case "i32.le_u": return { return try $0.visitI32LeU() }
    case "i32.ge_s": return { return try $0.visitI32GeS() }
    case "i32.ge_u": return { return try $0.visitI32GeU() }
    case "i64.eqz": return { return try $0.visitI64Eqz() }
    case "i64.eq": return { return try $0.visitI64Eq() }
    case "i64.ne": return { return try $0.visitI64Ne() }
    case "i64.lt_s": return { return try $0.visitI64LtS() }
    case "i64.lt_u": return { return try $0.visitI64LtU() }
    case "i64.gt_s": return { return try $0.visitI64GtS() }
    case "i64.gt_u": return { return try $0.visitI64GtU() }
    case "i64.le_s": return { return try $0.visitI64LeS() }
    case "i64.le_u": return { return try $0.visitI64LeU() }
    case "i64.ge_s": return { return try $0.visitI64GeS() }
    case "i64.ge_u": return { return try $0.visitI64GeU() }
    case "f32.eq": return { return try $0.visitF32Eq() }
    case "f32.ne": return { return try $0.visitF32Ne() }
    case "f32.lt": return { return try $0.visitF32Lt() }
    case "f32.gt": return { return try $0.visitF32Gt() }
    case "f32.le": return { return try $0.visitF32Le() }
    case "f32.ge": return { return try $0.visitF32Ge() }
    case "f64.eq": return { return try $0.visitF64Eq() }
    case "f64.ne": return { return try $0.visitF64Ne() }
    case "f64.lt": return { return try $0.visitF64Lt() }
    case "f64.gt": return { return try $0.visitF64Gt() }
    case "f64.le": return { return try $0.visitF64Le() }
    case "f64.ge": return { return try $0.visitF64Ge() }
    case "i32.clz": return { return try $0.visitI32Clz() }
    case "i32.ctz": return { return try $0.visitI32Ctz() }
    case "i32.popcnt": return { return try $0.visitI32Popcnt() }
    case "i32.add": return { return try $0.visitI32Add() }
    case "i32.sub": return { return try $0.visitI32Sub() }
    case "i32.mul": return { return try $0.visitI32Mul() }
    case "i32.div_s": return { return try $0.visitI32DivS() }
    case "i32.div_u": return { return try $0.visitI32DivU() }
    case "i32.rem_s": return { return try $0.visitI32RemS() }
    case "i32.rem_u": return { return try $0.visitI32RemU() }
    case "i32.and": return { return try $0.visitI32And() }
    case "i32.or": return { return try $0.visitI32Or() }
    case "i32.xor": return { return try $0.visitI32Xor() }
    case "i32.shl": return { return try $0.visitI32Shl() }
    case "i32.shr_s": return { return try $0.visitI32ShrS() }
    case "i32.shr_u": return { return try $0.visitI32ShrU() }
    case "i32.rotl": return { return try $0.visitI32Rotl() }
    case "i32.rotr": return { return try $0.visitI32Rotr() }
    case "i64.clz": return { return try $0.visitI64Clz() }
    case "i64.ctz": return { return try $0.visitI64Ctz() }
    case "i64.popcnt": return { return try $0.visitI64Popcnt() }
    case "i64.add": return { return try $0.visitI64Add() }
    case "i64.sub": return { return try $0.visitI64Sub() }
    case "i64.mul": return { return try $0.visitI64Mul() }
    case "i64.div_s": return { return try $0.visitI64DivS() }
    case "i64.div_u": return { return try $0.visitI64DivU() }
    case "i64.rem_s": return { return try $0.visitI64RemS() }
    case "i64.rem_u": return { return try $0.visitI64RemU() }
    case "i64.and": return { return try $0.visitI64And() }
    case "i64.or": return { return try $0.visitI64Or() }
    case "i64.xor": return { return try $0.visitI64Xor() }
    case "i64.shl": return { return try $0.visitI64Shl() }
    case "i64.shr_s": return { return try $0.visitI64ShrS() }
    case "i64.shr_u": return { return try $0.visitI64ShrU() }
    case "i64.rotl": return { return try $0.visitI64Rotl() }
    case "i64.rotr": return { return try $0.visitI64Rotr() }
    case "f32.abs": return { return try $0.visitF32Abs() }
    case "f32.neg": return { return try $0.visitF32Neg() }
    case "f32.ceil": return { return try $0.visitF32Ceil() }
    case "f32.floor": return { return try $0.visitF32Floor() }
    case "f32.trunc": return { return try $0.visitF32Trunc() }
    case "f32.nearest": return { return try $0.visitF32Nearest() }
    case "f32.sqrt": return { return try $0.visitF32Sqrt() }
    case "f32.add": return { return try $0.visitF32Add() }
    case "f32.sub": return { return try $0.visitF32Sub() }
    case "f32.mul": return { return try $0.visitF32Mul() }
    case "f32.div": return { return try $0.visitF32Div() }
    case "f32.min": return { return try $0.visitF32Min() }
    case "f32.max": return { return try $0.visitF32Max() }
    case "f32.copysign": return { return try $0.visitF32Copysign() }
    case "f64.abs": return { return try $0.visitF64Abs() }
    case "f64.neg": return { return try $0.visitF64Neg() }
    case "f64.ceil": return { return try $0.visitF64Ceil() }
    case "f64.floor": return { return try $0.visitF64Floor() }
    case "f64.trunc": return { return try $0.visitF64Trunc() }
    case "f64.nearest": return { return try $0.visitF64Nearest() }
    case "f64.sqrt": return { return try $0.visitF64Sqrt() }
    case "f64.add": return { return try $0.visitF64Add() }
    case "f64.sub": return { return try $0.visitF64Sub() }
    case "f64.mul": return { return try $0.visitF64Mul() }
    case "f64.div": return { return try $0.visitF64Div() }
    case "f64.min": return { return try $0.visitF64Min() }
    case "f64.max": return { return try $0.visitF64Max() }
    case "f64.copysign": return { return try $0.visitF64Copysign() }
    case "i32.wrap_i64": return { return try $0.visitI32WrapI64() }
    case "i32.trunc_f32_s": return { return try $0.visitI32TruncF32S() }
    case "i32.trunc_f32_u": return { return try $0.visitI32TruncF32U() }
    case "i32.trunc_f64_s": return { return try $0.visitI32TruncF64S() }
    case "i32.trunc_f64_u": return { return try $0.visitI32TruncF64U() }
    case "i64.extend_i32_s": return { return try $0.visitI64ExtendI32S() }
    case "i64.extend_i32_u": return { return try $0.visitI64ExtendI32U() }
    case "i64.trunc_f32_s": return { return try $0.visitI64TruncF32S() }
    case "i64.trunc_f32_u": return { return try $0.visitI64TruncF32U() }
    case "i64.trunc_f64_s": return { return try $0.visitI64TruncF64S() }
    case "i64.trunc_f64_u": return { return try $0.visitI64TruncF64U() }
    case "f32.convert_i32_s": return { return try $0.visitF32ConvertI32S() }
    case "f32.convert_i32_u": return { return try $0.visitF32ConvertI32U() }
    case "f32.convert_i64_s": return { return try $0.visitF32ConvertI64S() }
    case "f32.convert_i64_u": return { return try $0.visitF32ConvertI64U() }
    case "f32.demote_f64": return { return try $0.visitF32DemoteF64() }
    case "f64.convert_i32_s": return { return try $0.visitF64ConvertI32S() }
    case "f64.convert_i32_u": return { return try $0.visitF64ConvertI32U() }
    case "f64.convert_i64_s": return { return try $0.visitF64ConvertI64S() }
    case "f64.convert_i64_u": return { return try $0.visitF64ConvertI64U() }
    case "f64.promote_f32": return { return try $0.visitF64PromoteF32() }
    case "i32.reinterpret_f32": return { return try $0.visitI32ReinterpretF32() }
    case "i64.reinterpret_f64": return { return try $0.visitI64ReinterpretF64() }
    case "f32.reinterpret_i32": return { return try $0.visitF32ReinterpretI32() }
    case "f64.reinterpret_i64": return { return try $0.visitF64ReinterpretI64() }
    case "i32.extend8_s": return { return try $0.visitI32Extend8S() }
    case "i32.extend16_s": return { return try $0.visitI32Extend16S() }
    case "i64.extend8_s": return { return try $0.visitI64Extend8S() }
    case "i64.extend16_s": return { return try $0.visitI64Extend16S() }
    case "i64.extend32_s": return { return try $0.visitI64Extend32S() }
    case "memory.init":
        let (dataIndex) = try expressionParser.visitMemoryInit(wat: &wat)
        return { return try $0.visitMemoryInit(dataIndex: dataIndex) }
    case "data.drop":
        let (dataIndex) = try expressionParser.visitDataDrop(wat: &wat)
        return { return try $0.visitDataDrop(dataIndex: dataIndex) }
    case "memory.copy":
        let (dstMem, srcMem) = try expressionParser.visitMemoryCopy(wat: &wat)
        return { return try $0.visitMemoryCopy(dstMem: dstMem, srcMem: srcMem) }
    case "memory.fill":
        let (memory) = try expressionParser.visitMemoryFill(wat: &wat)
        return { return try $0.visitMemoryFill(memory: memory) }
    case "table.init":
        let (elemIndex, table) = try expressionParser.visitTableInit(wat: &wat)
        return { return try $0.visitTableInit(elemIndex: elemIndex, table: table) }
    case "elem.drop":
        let (elemIndex) = try expressionParser.visitElemDrop(wat: &wat)
        return { return try $0.visitElemDrop(elemIndex: elemIndex) }
    case "table.copy":
        let (dstTable, srcTable) = try expressionParser.visitTableCopy(wat: &wat)
        return { return try $0.visitTableCopy(dstTable: dstTable, srcTable: srcTable) }
    case "table.fill":
        let (table) = try expressionParser.visitTableFill(wat: &wat)
        return { return try $0.visitTableFill(table: table) }
    case "table.get":
        let (table) = try expressionParser.visitTableGet(wat: &wat)
        return { return try $0.visitTableGet(table: table) }
    case "table.set":
        let (table) = try expressionParser.visitTableSet(wat: &wat)
        return { return try $0.visitTableSet(table: table) }
    case "table.grow":
        let (table) = try expressionParser.visitTableGrow(wat: &wat)
        return { return try $0.visitTableGrow(table: table) }
    case "table.size":
        let (table) = try expressionParser.visitTableSize(wat: &wat)
        return { return try $0.visitTableSize(table: table) }
    case "i32.trunc_sat_f32_s": return { return try $0.visitI32TruncSatF32S() }
    case "i32.trunc_sat_f32_u": return { return try $0.visitI32TruncSatF32U() }
    case "i32.trunc_sat_f64_s": return { return try $0.visitI32TruncSatF64S() }
    case "i32.trunc_sat_f64_u": return { return try $0.visitI32TruncSatF64U() }
    case "i64.trunc_sat_f32_s": return { return try $0.visitI64TruncSatF32S() }
    case "i64.trunc_sat_f32_u": return { return try $0.visitI64TruncSatF32U() }
    case "i64.trunc_sat_f64_s": return { return try $0.visitI64TruncSatF64S() }
    case "i64.trunc_sat_f64_u": return { return try $0.visitI64TruncSatF64U() }
    default: return nil
    }
}


protocol InstructionEncoder: InstructionVisitor {
    mutating func encodeInstruction(_ opcode: UInt8, _ prefix: UInt8?) throws
    mutating func encodeImmediates(blockType: BlockType) throws
    mutating func encodeImmediates(dataIndex: UInt32) throws
    mutating func encodeImmediates(elemIndex: UInt32) throws
    mutating func encodeImmediates(functionIndex: UInt32) throws
    mutating func encodeImmediates(globalIndex: UInt32) throws
    mutating func encodeImmediates(localIndex: UInt32) throws
    mutating func encodeImmediates(memarg: MemArg) throws
    mutating func encodeImmediates(memory: UInt32) throws
    mutating func encodeImmediates(relativeDepth: UInt32) throws
    mutating func encodeImmediates(table: UInt32) throws
    mutating func encodeImmediates(targets: BrTable) throws
    mutating func encodeImmediates(type: ReferenceType) throws
    mutating func encodeImmediates(type: ValueType) throws
    mutating func encodeImmediates(value: IEEE754.Float32) throws
    mutating func encodeImmediates(value: IEEE754.Float64) throws
    mutating func encodeImmediates(value: Int32) throws
    mutating func encodeImmediates(value: Int64) throws
    mutating func encodeImmediates(dstMem: UInt32, srcMem: UInt32) throws
    mutating func encodeImmediates(dstTable: UInt32, srcTable: UInt32) throws
    mutating func encodeImmediates(elemIndex: UInt32, table: UInt32) throws
    mutating func encodeImmediates(typeIndex: UInt32, tableIndex: UInt32) throws
}

extension InstructionEncoder {
    mutating func visitUnreachable() throws { try encodeInstruction(0x00, nil) }
    mutating func visitNop() throws { try encodeInstruction(0x01, nil) }
    mutating func visitBlock(blockType: BlockType) throws {
        try encodeInstruction(0x02, nil)
        try encodeImmediates(blockType: blockType)
    }
    mutating func visitLoop(blockType: BlockType) throws {
        try encodeInstruction(0x03, nil)
        try encodeImmediates(blockType: blockType)
    }
    mutating func visitIf(blockType: BlockType) throws {
        try encodeInstruction(0x04, nil)
        try encodeImmediates(blockType: blockType)
    }
    mutating func visitElse() throws { try encodeInstruction(0x05, nil) }
    mutating func visitEnd() throws { try encodeInstruction(0x0B, nil) }
    mutating func visitBr(relativeDepth: UInt32) throws {
        try encodeInstruction(0x0C, nil)
        try encodeImmediates(relativeDepth: relativeDepth)
    }
    mutating func visitBrIf(relativeDepth: UInt32) throws {
        try encodeInstruction(0x0D, nil)
        try encodeImmediates(relativeDepth: relativeDepth)
    }
    mutating func visitBrTable(targets: BrTable) throws {
        try encodeInstruction(0x0E, nil)
        try encodeImmediates(targets: targets)
    }
    mutating func visitReturn() throws { try encodeInstruction(0x0F, nil) }
    mutating func visitCall(functionIndex: UInt32) throws {
        try encodeInstruction(0x10, nil)
        try encodeImmediates(functionIndex: functionIndex)
    }
    mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws {
        try encodeInstruction(0x11, nil)
        try encodeImmediates(typeIndex: typeIndex, tableIndex: tableIndex)
    }
    mutating func visitDrop() throws { try encodeInstruction(0x1A, nil) }
    mutating func visitSelect() throws { try encodeInstruction(0x1B, nil) }
    mutating func visitTypedSelect(type: ValueType) throws {
        try encodeInstruction(0x1C, nil)
        try encodeImmediates(type: type)
    }
    mutating func visitLocalGet(localIndex: UInt32) throws {
        try encodeInstruction(0x20, nil)
        try encodeImmediates(localIndex: localIndex)
    }
    mutating func visitLocalSet(localIndex: UInt32) throws {
        try encodeInstruction(0x21, nil)
        try encodeImmediates(localIndex: localIndex)
    }
    mutating func visitLocalTee(localIndex: UInt32) throws {
        try encodeInstruction(0x22, nil)
        try encodeImmediates(localIndex: localIndex)
    }
    mutating func visitGlobalGet(globalIndex: UInt32) throws {
        try encodeInstruction(0x23, nil)
        try encodeImmediates(globalIndex: globalIndex)
    }
    mutating func visitGlobalSet(globalIndex: UInt32) throws {
        try encodeInstruction(0x24, nil)
        try encodeImmediates(globalIndex: globalIndex)
    }
    mutating func visitI32Load(memarg: MemArg) throws {
        try encodeInstruction(0x28, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Load(memarg: MemArg) throws {
        try encodeInstruction(0x29, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitF32Load(memarg: MemArg) throws {
        try encodeInstruction(0x2A, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitF64Load(memarg: MemArg) throws {
        try encodeInstruction(0x2B, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI32Load8S(memarg: MemArg) throws {
        try encodeInstruction(0x2C, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI32Load8U(memarg: MemArg) throws {
        try encodeInstruction(0x2D, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI32Load16S(memarg: MemArg) throws {
        try encodeInstruction(0x2E, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI32Load16U(memarg: MemArg) throws {
        try encodeInstruction(0x2F, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Load8S(memarg: MemArg) throws {
        try encodeInstruction(0x30, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Load8U(memarg: MemArg) throws {
        try encodeInstruction(0x31, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Load16S(memarg: MemArg) throws {
        try encodeInstruction(0x32, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Load16U(memarg: MemArg) throws {
        try encodeInstruction(0x33, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Load32S(memarg: MemArg) throws {
        try encodeInstruction(0x34, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Load32U(memarg: MemArg) throws {
        try encodeInstruction(0x35, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI32Store(memarg: MemArg) throws {
        try encodeInstruction(0x36, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Store(memarg: MemArg) throws {
        try encodeInstruction(0x37, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitF32Store(memarg: MemArg) throws {
        try encodeInstruction(0x38, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitF64Store(memarg: MemArg) throws {
        try encodeInstruction(0x39, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI32Store8(memarg: MemArg) throws {
        try encodeInstruction(0x3A, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI32Store16(memarg: MemArg) throws {
        try encodeInstruction(0x3B, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Store8(memarg: MemArg) throws {
        try encodeInstruction(0x3C, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Store16(memarg: MemArg) throws {
        try encodeInstruction(0x3D, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitI64Store32(memarg: MemArg) throws {
        try encodeInstruction(0x3E, nil)
        try encodeImmediates(memarg: memarg)
    }
    mutating func visitMemorySize(memory: UInt32) throws {
        try encodeInstruction(0x3F, nil)
        try encodeImmediates(memory: memory)
    }
    mutating func visitMemoryGrow(memory: UInt32) throws {
        try encodeInstruction(0x40, nil)
        try encodeImmediates(memory: memory)
    }
    mutating func visitI32Const(value: Int32) throws {
        try encodeInstruction(0x41, nil)
        try encodeImmediates(value: value)
    }
    mutating func visitI64Const(value: Int64) throws {
        try encodeInstruction(0x42, nil)
        try encodeImmediates(value: value)
    }
    mutating func visitF32Const(value: IEEE754.Float32) throws {
        try encodeInstruction(0x43, nil)
        try encodeImmediates(value: value)
    }
    mutating func visitF64Const(value: IEEE754.Float64) throws {
        try encodeInstruction(0x44, nil)
        try encodeImmediates(value: value)
    }
    mutating func visitRefNull(type: ReferenceType) throws {
        try encodeInstruction(0xD0, nil)
        try encodeImmediates(type: type)
    }
    mutating func visitRefIsNull() throws { try encodeInstruction(0xD1, nil) }
    mutating func visitRefFunc(functionIndex: UInt32) throws {
        try encodeInstruction(0xD2, nil)
        try encodeImmediates(functionIndex: functionIndex)
    }
    mutating func visitI32Eqz() throws { try encodeInstruction(0x45, nil) }
    mutating func visitI32Eq() throws { try encodeInstruction(0x46, nil) }
    mutating func visitI32Ne() throws { try encodeInstruction(0x47, nil) }
    mutating func visitI32LtS() throws { try encodeInstruction(0x48, nil) }
    mutating func visitI32LtU() throws { try encodeInstruction(0x49, nil) }
    mutating func visitI32GtS() throws { try encodeInstruction(0x4A, nil) }
    mutating func visitI32GtU() throws { try encodeInstruction(0x4B, nil) }
    mutating func visitI32LeS() throws { try encodeInstruction(0x4C, nil) }
    mutating func visitI32LeU() throws { try encodeInstruction(0x4D, nil) }
    mutating func visitI32GeS() throws { try encodeInstruction(0x4E, nil) }
    mutating func visitI32GeU() throws { try encodeInstruction(0x4F, nil) }
    mutating func visitI64Eqz() throws { try encodeInstruction(0x50, nil) }
    mutating func visitI64Eq() throws { try encodeInstruction(0x51, nil) }
    mutating func visitI64Ne() throws { try encodeInstruction(0x52, nil) }
    mutating func visitI64LtS() throws { try encodeInstruction(0x53, nil) }
    mutating func visitI64LtU() throws { try encodeInstruction(0x54, nil) }
    mutating func visitI64GtS() throws { try encodeInstruction(0x55, nil) }
    mutating func visitI64GtU() throws { try encodeInstruction(0x56, nil) }
    mutating func visitI64LeS() throws { try encodeInstruction(0x57, nil) }
    mutating func visitI64LeU() throws { try encodeInstruction(0x58, nil) }
    mutating func visitI64GeS() throws { try encodeInstruction(0x59, nil) }
    mutating func visitI64GeU() throws { try encodeInstruction(0x5A, nil) }
    mutating func visitF32Eq() throws { try encodeInstruction(0x5B, nil) }
    mutating func visitF32Ne() throws { try encodeInstruction(0x5C, nil) }
    mutating func visitF32Lt() throws { try encodeInstruction(0x5D, nil) }
    mutating func visitF32Gt() throws { try encodeInstruction(0x5E, nil) }
    mutating func visitF32Le() throws { try encodeInstruction(0x5F, nil) }
    mutating func visitF32Ge() throws { try encodeInstruction(0x60, nil) }
    mutating func visitF64Eq() throws { try encodeInstruction(0x61, nil) }
    mutating func visitF64Ne() throws { try encodeInstruction(0x62, nil) }
    mutating func visitF64Lt() throws { try encodeInstruction(0x63, nil) }
    mutating func visitF64Gt() throws { try encodeInstruction(0x64, nil) }
    mutating func visitF64Le() throws { try encodeInstruction(0x65, nil) }
    mutating func visitF64Ge() throws { try encodeInstruction(0x66, nil) }
    mutating func visitI32Clz() throws { try encodeInstruction(0x67, nil) }
    mutating func visitI32Ctz() throws { try encodeInstruction(0x68, nil) }
    mutating func visitI32Popcnt() throws { try encodeInstruction(0x69, nil) }
    mutating func visitI32Add() throws { try encodeInstruction(0x6A, nil) }
    mutating func visitI32Sub() throws { try encodeInstruction(0x6B, nil) }
    mutating func visitI32Mul() throws { try encodeInstruction(0x6C, nil) }
    mutating func visitI32DivS() throws { try encodeInstruction(0x6D, nil) }
    mutating func visitI32DivU() throws { try encodeInstruction(0x6E, nil) }
    mutating func visitI32RemS() throws { try encodeInstruction(0x6F, nil) }
    mutating func visitI32RemU() throws { try encodeInstruction(0x70, nil) }
    mutating func visitI32And() throws { try encodeInstruction(0x71, nil) }
    mutating func visitI32Or() throws { try encodeInstruction(0x72, nil) }
    mutating func visitI32Xor() throws { try encodeInstruction(0x73, nil) }
    mutating func visitI32Shl() throws { try encodeInstruction(0x74, nil) }
    mutating func visitI32ShrS() throws { try encodeInstruction(0x75, nil) }
    mutating func visitI32ShrU() throws { try encodeInstruction(0x76, nil) }
    mutating func visitI32Rotl() throws { try encodeInstruction(0x77, nil) }
    mutating func visitI32Rotr() throws { try encodeInstruction(0x78, nil) }
    mutating func visitI64Clz() throws { try encodeInstruction(0x79, nil) }
    mutating func visitI64Ctz() throws { try encodeInstruction(0x7A, nil) }
    mutating func visitI64Popcnt() throws { try encodeInstruction(0x7B, nil) }
    mutating func visitI64Add() throws { try encodeInstruction(0x7C, nil) }
    mutating func visitI64Sub() throws { try encodeInstruction(0x7D, nil) }
    mutating func visitI64Mul() throws { try encodeInstruction(0x7E, nil) }
    mutating func visitI64DivS() throws { try encodeInstruction(0x7F, nil) }
    mutating func visitI64DivU() throws { try encodeInstruction(0x80, nil) }
    mutating func visitI64RemS() throws { try encodeInstruction(0x81, nil) }
    mutating func visitI64RemU() throws { try encodeInstruction(0x82, nil) }
    mutating func visitI64And() throws { try encodeInstruction(0x83, nil) }
    mutating func visitI64Or() throws { try encodeInstruction(0x84, nil) }
    mutating func visitI64Xor() throws { try encodeInstruction(0x85, nil) }
    mutating func visitI64Shl() throws { try encodeInstruction(0x86, nil) }
    mutating func visitI64ShrS() throws { try encodeInstruction(0x87, nil) }
    mutating func visitI64ShrU() throws { try encodeInstruction(0x88, nil) }
    mutating func visitI64Rotl() throws { try encodeInstruction(0x89, nil) }
    mutating func visitI64Rotr() throws { try encodeInstruction(0x8A, nil) }
    mutating func visitF32Abs() throws { try encodeInstruction(0x8B, nil) }
    mutating func visitF32Neg() throws { try encodeInstruction(0x8C, nil) }
    mutating func visitF32Ceil() throws { try encodeInstruction(0x8D, nil) }
    mutating func visitF32Floor() throws { try encodeInstruction(0x8E, nil) }
    mutating func visitF32Trunc() throws { try encodeInstruction(0x8F, nil) }
    mutating func visitF32Nearest() throws { try encodeInstruction(0x90, nil) }
    mutating func visitF32Sqrt() throws { try encodeInstruction(0x91, nil) }
    mutating func visitF32Add() throws { try encodeInstruction(0x92, nil) }
    mutating func visitF32Sub() throws { try encodeInstruction(0x93, nil) }
    mutating func visitF32Mul() throws { try encodeInstruction(0x94, nil) }
    mutating func visitF32Div() throws { try encodeInstruction(0x95, nil) }
    mutating func visitF32Min() throws { try encodeInstruction(0x96, nil) }
    mutating func visitF32Max() throws { try encodeInstruction(0x97, nil) }
    mutating func visitF32Copysign() throws { try encodeInstruction(0x98, nil) }
    mutating func visitF64Abs() throws { try encodeInstruction(0x99, nil) }
    mutating func visitF64Neg() throws { try encodeInstruction(0x9A, nil) }
    mutating func visitF64Ceil() throws { try encodeInstruction(0x9B, nil) }
    mutating func visitF64Floor() throws { try encodeInstruction(0x9C, nil) }
    mutating func visitF64Trunc() throws { try encodeInstruction(0x9D, nil) }
    mutating func visitF64Nearest() throws { try encodeInstruction(0x9E, nil) }
    mutating func visitF64Sqrt() throws { try encodeInstruction(0x9F, nil) }
    mutating func visitF64Add() throws { try encodeInstruction(0xA0, nil) }
    mutating func visitF64Sub() throws { try encodeInstruction(0xA1, nil) }
    mutating func visitF64Mul() throws { try encodeInstruction(0xA2, nil) }
    mutating func visitF64Div() throws { try encodeInstruction(0xA3, nil) }
    mutating func visitF64Min() throws { try encodeInstruction(0xA4, nil) }
    mutating func visitF64Max() throws { try encodeInstruction(0xA5, nil) }
    mutating func visitF64Copysign() throws { try encodeInstruction(0xA6, nil) }
    mutating func visitI32WrapI64() throws { try encodeInstruction(0xA7, nil) }
    mutating func visitI32TruncF32S() throws { try encodeInstruction(0xA8, nil) }
    mutating func visitI32TruncF32U() throws { try encodeInstruction(0xA9, nil) }
    mutating func visitI32TruncF64S() throws { try encodeInstruction(0xAA, nil) }
    mutating func visitI32TruncF64U() throws { try encodeInstruction(0xAB, nil) }
    mutating func visitI64ExtendI32S() throws { try encodeInstruction(0xAC, nil) }
    mutating func visitI64ExtendI32U() throws { try encodeInstruction(0xAD, nil) }
    mutating func visitI64TruncF32S() throws { try encodeInstruction(0xAE, nil) }
    mutating func visitI64TruncF32U() throws { try encodeInstruction(0xAF, nil) }
    mutating func visitI64TruncF64S() throws { try encodeInstruction(0xB0, nil) }
    mutating func visitI64TruncF64U() throws { try encodeInstruction(0xB1, nil) }
    mutating func visitF32ConvertI32S() throws { try encodeInstruction(0xB2, nil) }
    mutating func visitF32ConvertI32U() throws { try encodeInstruction(0xB3, nil) }
    mutating func visitF32ConvertI64S() throws { try encodeInstruction(0xB4, nil) }
    mutating func visitF32ConvertI64U() throws { try encodeInstruction(0xB5, nil) }
    mutating func visitF32DemoteF64() throws { try encodeInstruction(0xB6, nil) }
    mutating func visitF64ConvertI32S() throws { try encodeInstruction(0xB7, nil) }
    mutating func visitF64ConvertI32U() throws { try encodeInstruction(0xB8, nil) }
    mutating func visitF64ConvertI64S() throws { try encodeInstruction(0xB9, nil) }
    mutating func visitF64ConvertI64U() throws { try encodeInstruction(0xBA, nil) }
    mutating func visitF64PromoteF32() throws { try encodeInstruction(0xBB, nil) }
    mutating func visitI32ReinterpretF32() throws { try encodeInstruction(0xBC, nil) }
    mutating func visitI64ReinterpretF64() throws { try encodeInstruction(0xBD, nil) }
    mutating func visitF32ReinterpretI32() throws { try encodeInstruction(0xBE, nil) }
    mutating func visitF64ReinterpretI64() throws { try encodeInstruction(0xBF, nil) }
    mutating func visitI32Extend8S() throws { try encodeInstruction(0xC0, nil) }
    mutating func visitI32Extend16S() throws { try encodeInstruction(0xC1, nil) }
    mutating func visitI64Extend8S() throws { try encodeInstruction(0xC2, nil) }
    mutating func visitI64Extend16S() throws { try encodeInstruction(0xC3, nil) }
    mutating func visitI64Extend32S() throws { try encodeInstruction(0xC4, nil) }
    mutating func visitMemoryInit(dataIndex: UInt32) throws {
        try encodeInstruction(0x08, 0xFC)
        try encodeImmediates(dataIndex: dataIndex)
    }
    mutating func visitDataDrop(dataIndex: UInt32) throws {
        try encodeInstruction(0x09, 0xFC)
        try encodeImmediates(dataIndex: dataIndex)
    }
    mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws {
        try encodeInstruction(0x0A, 0xFC)
        try encodeImmediates(dstMem: dstMem, srcMem: srcMem)
    }
    mutating func visitMemoryFill(memory: UInt32) throws {
        try encodeInstruction(0x0B, 0xFC)
        try encodeImmediates(memory: memory)
    }
    mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws {
        try encodeInstruction(0x0C, 0xFC)
        try encodeImmediates(elemIndex: elemIndex, table: table)
    }
    mutating func visitElemDrop(elemIndex: UInt32) throws {
        try encodeInstruction(0x0D, 0xFC)
        try encodeImmediates(elemIndex: elemIndex)
    }
    mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws {
        try encodeInstruction(0x0E, 0xFC)
        try encodeImmediates(dstTable: dstTable, srcTable: srcTable)
    }
    mutating func visitTableFill(table: UInt32) throws {
        try encodeInstruction(0x11, 0xFC)
        try encodeImmediates(table: table)
    }
    mutating func visitTableGet(table: UInt32) throws {
        try encodeInstruction(0x25, nil)
        try encodeImmediates(table: table)
    }
    mutating func visitTableSet(table: UInt32) throws {
        try encodeInstruction(0x26, nil)
        try encodeImmediates(table: table)
    }
    mutating func visitTableGrow(table: UInt32) throws {
        try encodeInstruction(0x0F, 0xFC)
        try encodeImmediates(table: table)
    }
    mutating func visitTableSize(table: UInt32) throws {
        try encodeInstruction(0x10, 0xFC)
        try encodeImmediates(table: table)
    }
    mutating func visitI32TruncSatF32S() throws { try encodeInstruction(0x00, 0xFC) }
    mutating func visitI32TruncSatF32U() throws { try encodeInstruction(0x01, 0xFC) }
    mutating func visitI32TruncSatF64S() throws { try encodeInstruction(0x02, 0xFC) }
    mutating func visitI32TruncSatF64U() throws { try encodeInstruction(0x03, 0xFC) }
    mutating func visitI64TruncSatF32S() throws { try encodeInstruction(0x04, 0xFC) }
    mutating func visitI64TruncSatF32U() throws { try encodeInstruction(0x05, 0xFC) }
    mutating func visitI64TruncSatF64S() throws { try encodeInstruction(0x06, 0xFC) }
    mutating func visitI64TruncSatF64U() throws { try encodeInstruction(0x07, 0xFC) }
}
