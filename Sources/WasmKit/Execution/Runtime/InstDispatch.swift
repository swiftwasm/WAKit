// This file is generated by Utilities/generate_inst_dispatch.swift
extension ExecutionState {
    @inline(__always)
    mutating func doExecute(_ instruction: UInt64, sp: inout Sp, x0: inout X0, d0: inout D0, pc: inout Pc, md: inout Md, ms: inout Ms) throws {
        switch instruction {
        case 0: self.execute_copyStack(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 1: self.execute_copyX0ToStackI32(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 2: self.execute_copyX0ToStackI64(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 3: self.execute_copyD0ToStackF32(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 4: self.execute_copyD0ToStackF64(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 5: self.execute_globalGet(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 6: self.execute_globalSet(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 7: try self.execute_call(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 8: try self.execute_compilingCall(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 9: try self.execute_internalCall(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 10: try self.execute_callIndirect(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 11: try self.execute_unreachable(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 12: self.execute_nop(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 13: self.execute_br(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 14: self.execute_brIf(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 15: self.execute_brIfNot(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 16: self.execute_brTable(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 17: self.execute__return(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 18: try self.execute_endOfExecution(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 19: try self.execute_i32LoadS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 20: try self.execute_i32LoadR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 21: try self.execute_i64LoadS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 22: try self.execute_i64LoadR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 23: try self.execute_f32LoadS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 24: try self.execute_f32LoadR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 25: try self.execute_f64LoadS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 26: try self.execute_f64LoadR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 27: try self.execute_i32Load8SS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 28: try self.execute_i32Load8SR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 29: try self.execute_i32Load8US(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 30: try self.execute_i32Load8UR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 31: try self.execute_i32Load16SS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 32: try self.execute_i32Load16SR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 33: try self.execute_i32Load16US(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 34: try self.execute_i32Load16UR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 35: try self.execute_i64Load8SS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 36: try self.execute_i64Load8SR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 37: try self.execute_i64Load8US(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 38: try self.execute_i64Load8UR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 39: try self.execute_i64Load16SS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 40: try self.execute_i64Load16SR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 41: try self.execute_i64Load16US(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 42: try self.execute_i64Load16UR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 43: try self.execute_i64Load32SS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 44: try self.execute_i64Load32SR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 45: try self.execute_i64Load32US(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 46: try self.execute_i64Load32UR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 47: try self.execute_i32Store(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 48: try self.execute_i64Store(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 49: try self.execute_f32Store(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 50: try self.execute_f64Store(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 51: try self.execute_i32Store8(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 52: try self.execute_i32Store16(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 53: try self.execute_i64Store8(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 54: try self.execute_i64Store16(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 55: try self.execute_i64Store32(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 56: self.execute_memorySize(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 57: try self.execute_memoryGrow(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 58: try self.execute_memoryInit(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 59: self.execute_memoryDataDrop(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 60: try self.execute_memoryCopy(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 61: try self.execute_memoryFill(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 62: self.execute_const32(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 63: self.execute_const64(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 64: self.execute_i32AddSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 65: self.execute_i32AddSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 66: self.execute_i64AddSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 67: self.execute_i64AddSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 68: self.execute_i32MulSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 69: self.execute_i32MulSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 70: self.execute_i64MulSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 71: self.execute_i64MulSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 72: self.execute_i32AndSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 73: self.execute_i32AndSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 74: self.execute_i64AndSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 75: self.execute_i64AndSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 76: self.execute_i32OrSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 77: self.execute_i32OrSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 78: self.execute_i64OrSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 79: self.execute_i64OrSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 80: self.execute_i32XorSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 81: self.execute_i32XorSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 82: self.execute_i64XorSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 83: self.execute_i64XorSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 84: self.execute_i32SubSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 85: self.execute_i32SubSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 86: self.execute_i32SubRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 87: self.execute_i64SubSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 88: self.execute_i64SubSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 89: self.execute_i64SubRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 90: self.execute_i32ShlSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 91: self.execute_i32ShlSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 92: self.execute_i32ShlRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 93: self.execute_i64ShlSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 94: self.execute_i64ShlSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 95: self.execute_i64ShlRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 96: self.execute_i32ShrSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 97: self.execute_i32ShrSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 98: self.execute_i32ShrSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 99: self.execute_i64ShrSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 100: self.execute_i64ShrSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 101: self.execute_i64ShrSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 102: self.execute_i32ShrUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 103: self.execute_i32ShrUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 104: self.execute_i32ShrURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 105: self.execute_i64ShrUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 106: self.execute_i64ShrUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 107: self.execute_i64ShrURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 108: self.execute_i32RotlSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 109: self.execute_i32RotlSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 110: self.execute_i32RotlRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 111: self.execute_i64RotlSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 112: self.execute_i64RotlSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 113: self.execute_i64RotlRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 114: self.execute_i32RotrSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 115: self.execute_i32RotrSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 116: self.execute_i32RotrRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 117: self.execute_i64RotrSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 118: self.execute_i64RotrSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 119: self.execute_i64RotrRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 120: try self.execute_i32DivSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 121: try self.execute_i32DivSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 122: try self.execute_i32DivSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 123: try self.execute_i64DivSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 124: try self.execute_i64DivSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 125: try self.execute_i64DivSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 126: try self.execute_i32DivUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 127: try self.execute_i32DivUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 128: try self.execute_i32DivURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 129: try self.execute_i64DivUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 130: try self.execute_i64DivUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 131: try self.execute_i64DivURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 132: try self.execute_i32RemSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 133: try self.execute_i32RemSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 134: try self.execute_i32RemSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 135: try self.execute_i64RemSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 136: try self.execute_i64RemSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 137: try self.execute_i64RemSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 138: try self.execute_i32RemUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 139: try self.execute_i32RemUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 140: try self.execute_i32RemURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 141: try self.execute_i64RemUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 142: try self.execute_i64RemUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 143: try self.execute_i64RemURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 144: self.execute_i32EqSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 145: self.execute_i32EqSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 146: self.execute_i64EqSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 147: self.execute_i64EqSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 148: self.execute_i32NeSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 149: self.execute_i32NeSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 150: self.execute_i64NeSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 151: self.execute_i64NeSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 152: self.execute_i32LtSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 153: self.execute_i32LtSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 154: self.execute_i32LtSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 155: self.execute_i64LtSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 156: self.execute_i64LtSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 157: self.execute_i64LtSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 158: self.execute_i32LtUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 159: self.execute_i32LtUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 160: self.execute_i32LtURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 161: self.execute_i64LtUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 162: self.execute_i64LtUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 163: self.execute_i64LtURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 164: self.execute_i32GtSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 165: self.execute_i32GtSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 166: self.execute_i32GtSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 167: self.execute_i64GtSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 168: self.execute_i64GtSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 169: self.execute_i64GtSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 170: self.execute_i32GtUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 171: self.execute_i32GtUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 172: self.execute_i32GtURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 173: self.execute_i64GtUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 174: self.execute_i64GtUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 175: self.execute_i64GtURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 176: self.execute_i32LeSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 177: self.execute_i32LeSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 178: self.execute_i32LeSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 179: self.execute_i64LeSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 180: self.execute_i64LeSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 181: self.execute_i64LeSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 182: self.execute_i32LeUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 183: self.execute_i32LeUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 184: self.execute_i32LeURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 185: self.execute_i64LeUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 186: self.execute_i64LeUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 187: self.execute_i64LeURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 188: self.execute_i32GeSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 189: self.execute_i32GeSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 190: self.execute_i32GeSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 191: self.execute_i64GeSSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 192: self.execute_i64GeSSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 193: self.execute_i64GeSRS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 194: self.execute_i32GeUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 195: self.execute_i32GeUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 196: self.execute_i32GeURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 197: self.execute_i64GeUSS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 198: self.execute_i64GeUSR(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 199: self.execute_i64GeURS(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 200: self.execute_i32Clz(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 201: self.execute_i64Clz(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 202: self.execute_i32Ctz(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 203: self.execute_i64Ctz(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 204: self.execute_i32Popcnt(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 205: self.execute_i64Popcnt(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 206: self.execute_i32Eqz(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 207: self.execute_i64Eqz(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 208: self.execute_i32WrapI64(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 209: self.execute_i64ExtendI32S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 210: self.execute_i64ExtendI32U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 211: self.execute_i32Extend8S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 212: self.execute_i64Extend8S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 213: self.execute_i32Extend16S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 214: self.execute_i64Extend16S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 215: self.execute_i64Extend32S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 216: try self.execute_i32TruncF32S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 217: try self.execute_i32TruncF32U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 218: try self.execute_i32TruncSatF32S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 219: try self.execute_i32TruncSatF32U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 220: try self.execute_i32TruncF64S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 221: try self.execute_i32TruncF64U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 222: try self.execute_i32TruncSatF64S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 223: try self.execute_i32TruncSatF64U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 224: try self.execute_i64TruncF32S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 225: try self.execute_i64TruncF32U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 226: try self.execute_i64TruncSatF32S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 227: try self.execute_i64TruncSatF32U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 228: try self.execute_i64TruncF64S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 229: try self.execute_i64TruncF64U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 230: try self.execute_i64TruncSatF64S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 231: try self.execute_i64TruncSatF64U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 232: self.execute_f32ConvertI32S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 233: self.execute_f32ConvertI32U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 234: self.execute_f32ConvertI64S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 235: self.execute_f32ConvertI64U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 236: self.execute_f64ConvertI32S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 237: self.execute_f64ConvertI32U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 238: self.execute_f64ConvertI64S(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 239: self.execute_f64ConvertI64U(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 240: self.execute_f32ReinterpretI32(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 241: self.execute_f64ReinterpretI64(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 242: self.execute_i32ReinterpretF32(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 243: self.execute_i64ReinterpretF64(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 244: self.execute_f32Add(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 245: self.execute_f64Add(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 246: self.execute_f32Sub(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 247: self.execute_f64Sub(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 248: self.execute_f32Mul(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 249: self.execute_f64Mul(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 250: self.execute_f32Div(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 251: self.execute_f64Div(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 252: self.execute_f32Min(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 253: self.execute_f64Min(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 254: self.execute_f32Max(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 255: self.execute_f64Max(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 256: self.execute_f32CopySign(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 257: self.execute_f64CopySign(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 258: self.execute_f32Eq(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 259: self.execute_f64Eq(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 260: self.execute_f32Ne(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 261: self.execute_f64Ne(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 262: self.execute_f32Lt(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 263: self.execute_f64Lt(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 264: self.execute_f32Gt(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 265: self.execute_f64Gt(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 266: self.execute_f32Le(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 267: self.execute_f64Le(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 268: self.execute_f32Ge(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 269: self.execute_f64Ge(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 270: self.execute_f32Abs(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 271: self.execute_f64Abs(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 272: self.execute_f32Neg(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 273: self.execute_f64Neg(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 274: self.execute_f32Ceil(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 275: self.execute_f64Ceil(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 276: self.execute_f32Floor(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 277: self.execute_f64Floor(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 278: self.execute_f32Trunc(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 279: self.execute_f64Trunc(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 280: self.execute_f32Nearest(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 281: self.execute_f64Nearest(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 282: self.execute_f32Sqrt(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 283: self.execute_f64Sqrt(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 284: self.execute_f64PromoteF32(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 285: self.execute_f32DemoteF64(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 286: self.execute_select(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 287: self.execute_refNull(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 288: self.execute_refIsNull(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 289: self.execute_refFunc(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 290: try self.execute_tableGet(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 291: try self.execute_tableSet(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 292: self.execute_tableSize(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 293: try self.execute_tableGrow(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 294: try self.execute_tableFill(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 295: try self.execute_tableCopy(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 296: try self.execute_tableInit(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 297: self.execute_tableElementDrop(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 298: self.execute_onEnter(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        case 299: self.execute_onExit(sp: &sp, x0: &x0, d0: &d0, pc: &pc, md: &md, ms: &ms)
        default: preconditionFailure("Unknown instruction!?")

        }
    }
}

extension Instruction {
    var name: String {
        switch self {
        case .copyStack: return "copyStack"
        case .copyX0ToStackI32: return "copyX0ToStackI32"
        case .copyX0ToStackI64: return "copyX0ToStackI64"
        case .copyD0ToStackF32: return "copyD0ToStackF32"
        case .copyD0ToStackF64: return "copyD0ToStackF64"
        case .globalGet: return "globalGet"
        case .globalSet: return "globalSet"
        case .call: return "call"
        case .compilingCall: return "compilingCall"
        case .internalCall: return "internalCall"
        case .callIndirect: return "callIndirect"
        case .unreachable: return "unreachable"
        case .nop: return "nop"
        case .br: return "br"
        case .brIf: return "brIf"
        case .brIfNot: return "brIfNot"
        case .brTable: return "brTable"
        case ._return: return "_return"
        case .endOfExecution: return "endOfExecution"
        case .i32LoadS: return "i32LoadS"
        case .i32LoadR: return "i32LoadR"
        case .i64LoadS: return "i64LoadS"
        case .i64LoadR: return "i64LoadR"
        case .f32LoadS: return "f32LoadS"
        case .f32LoadR: return "f32LoadR"
        case .f64LoadS: return "f64LoadS"
        case .f64LoadR: return "f64LoadR"
        case .i32Load8SS: return "i32Load8SS"
        case .i32Load8SR: return "i32Load8SR"
        case .i32Load8US: return "i32Load8US"
        case .i32Load8UR: return "i32Load8UR"
        case .i32Load16SS: return "i32Load16SS"
        case .i32Load16SR: return "i32Load16SR"
        case .i32Load16US: return "i32Load16US"
        case .i32Load16UR: return "i32Load16UR"
        case .i64Load8SS: return "i64Load8SS"
        case .i64Load8SR: return "i64Load8SR"
        case .i64Load8US: return "i64Load8US"
        case .i64Load8UR: return "i64Load8UR"
        case .i64Load16SS: return "i64Load16SS"
        case .i64Load16SR: return "i64Load16SR"
        case .i64Load16US: return "i64Load16US"
        case .i64Load16UR: return "i64Load16UR"
        case .i64Load32SS: return "i64Load32SS"
        case .i64Load32SR: return "i64Load32SR"
        case .i64Load32US: return "i64Load32US"
        case .i64Load32UR: return "i64Load32UR"
        case .i32Store: return "i32Store"
        case .i64Store: return "i64Store"
        case .f32Store: return "f32Store"
        case .f64Store: return "f64Store"
        case .i32Store8: return "i32Store8"
        case .i32Store16: return "i32Store16"
        case .i64Store8: return "i64Store8"
        case .i64Store16: return "i64Store16"
        case .i64Store32: return "i64Store32"
        case .memorySize: return "memorySize"
        case .memoryGrow: return "memoryGrow"
        case .memoryInit: return "memoryInit"
        case .memoryDataDrop: return "memoryDataDrop"
        case .memoryCopy: return "memoryCopy"
        case .memoryFill: return "memoryFill"
        case .const32: return "const32"
        case .const64: return "const64"
        case .i32AddSS: return "i32AddSS"
        case .i32AddSR: return "i32AddSR"
        case .i64AddSS: return "i64AddSS"
        case .i64AddSR: return "i64AddSR"
        case .i32MulSS: return "i32MulSS"
        case .i32MulSR: return "i32MulSR"
        case .i64MulSS: return "i64MulSS"
        case .i64MulSR: return "i64MulSR"
        case .i32AndSS: return "i32AndSS"
        case .i32AndSR: return "i32AndSR"
        case .i64AndSS: return "i64AndSS"
        case .i64AndSR: return "i64AndSR"
        case .i32OrSS: return "i32OrSS"
        case .i32OrSR: return "i32OrSR"
        case .i64OrSS: return "i64OrSS"
        case .i64OrSR: return "i64OrSR"
        case .i32XorSS: return "i32XorSS"
        case .i32XorSR: return "i32XorSR"
        case .i64XorSS: return "i64XorSS"
        case .i64XorSR: return "i64XorSR"
        case .i32SubSS: return "i32SubSS"
        case .i32SubSR: return "i32SubSR"
        case .i32SubRS: return "i32SubRS"
        case .i64SubSS: return "i64SubSS"
        case .i64SubSR: return "i64SubSR"
        case .i64SubRS: return "i64SubRS"
        case .i32ShlSS: return "i32ShlSS"
        case .i32ShlSR: return "i32ShlSR"
        case .i32ShlRS: return "i32ShlRS"
        case .i64ShlSS: return "i64ShlSS"
        case .i64ShlSR: return "i64ShlSR"
        case .i64ShlRS: return "i64ShlRS"
        case .i32ShrSSS: return "i32ShrSSS"
        case .i32ShrSSR: return "i32ShrSSR"
        case .i32ShrSRS: return "i32ShrSRS"
        case .i64ShrSSS: return "i64ShrSSS"
        case .i64ShrSSR: return "i64ShrSSR"
        case .i64ShrSRS: return "i64ShrSRS"
        case .i32ShrUSS: return "i32ShrUSS"
        case .i32ShrUSR: return "i32ShrUSR"
        case .i32ShrURS: return "i32ShrURS"
        case .i64ShrUSS: return "i64ShrUSS"
        case .i64ShrUSR: return "i64ShrUSR"
        case .i64ShrURS: return "i64ShrURS"
        case .i32RotlSS: return "i32RotlSS"
        case .i32RotlSR: return "i32RotlSR"
        case .i32RotlRS: return "i32RotlRS"
        case .i64RotlSS: return "i64RotlSS"
        case .i64RotlSR: return "i64RotlSR"
        case .i64RotlRS: return "i64RotlRS"
        case .i32RotrSS: return "i32RotrSS"
        case .i32RotrSR: return "i32RotrSR"
        case .i32RotrRS: return "i32RotrRS"
        case .i64RotrSS: return "i64RotrSS"
        case .i64RotrSR: return "i64RotrSR"
        case .i64RotrRS: return "i64RotrRS"
        case .i32DivSSS: return "i32DivSSS"
        case .i32DivSSR: return "i32DivSSR"
        case .i32DivSRS: return "i32DivSRS"
        case .i64DivSSS: return "i64DivSSS"
        case .i64DivSSR: return "i64DivSSR"
        case .i64DivSRS: return "i64DivSRS"
        case .i32DivUSS: return "i32DivUSS"
        case .i32DivUSR: return "i32DivUSR"
        case .i32DivURS: return "i32DivURS"
        case .i64DivUSS: return "i64DivUSS"
        case .i64DivUSR: return "i64DivUSR"
        case .i64DivURS: return "i64DivURS"
        case .i32RemSSS: return "i32RemSSS"
        case .i32RemSSR: return "i32RemSSR"
        case .i32RemSRS: return "i32RemSRS"
        case .i64RemSSS: return "i64RemSSS"
        case .i64RemSSR: return "i64RemSSR"
        case .i64RemSRS: return "i64RemSRS"
        case .i32RemUSS: return "i32RemUSS"
        case .i32RemUSR: return "i32RemUSR"
        case .i32RemURS: return "i32RemURS"
        case .i64RemUSS: return "i64RemUSS"
        case .i64RemUSR: return "i64RemUSR"
        case .i64RemURS: return "i64RemURS"
        case .i32EqSS: return "i32EqSS"
        case .i32EqSR: return "i32EqSR"
        case .i64EqSS: return "i64EqSS"
        case .i64EqSR: return "i64EqSR"
        case .i32NeSS: return "i32NeSS"
        case .i32NeSR: return "i32NeSR"
        case .i64NeSS: return "i64NeSS"
        case .i64NeSR: return "i64NeSR"
        case .i32LtSSS: return "i32LtSSS"
        case .i32LtSSR: return "i32LtSSR"
        case .i32LtSRS: return "i32LtSRS"
        case .i64LtSSS: return "i64LtSSS"
        case .i64LtSSR: return "i64LtSSR"
        case .i64LtSRS: return "i64LtSRS"
        case .i32LtUSS: return "i32LtUSS"
        case .i32LtUSR: return "i32LtUSR"
        case .i32LtURS: return "i32LtURS"
        case .i64LtUSS: return "i64LtUSS"
        case .i64LtUSR: return "i64LtUSR"
        case .i64LtURS: return "i64LtURS"
        case .i32GtSSS: return "i32GtSSS"
        case .i32GtSSR: return "i32GtSSR"
        case .i32GtSRS: return "i32GtSRS"
        case .i64GtSSS: return "i64GtSSS"
        case .i64GtSSR: return "i64GtSSR"
        case .i64GtSRS: return "i64GtSRS"
        case .i32GtUSS: return "i32GtUSS"
        case .i32GtUSR: return "i32GtUSR"
        case .i32GtURS: return "i32GtURS"
        case .i64GtUSS: return "i64GtUSS"
        case .i64GtUSR: return "i64GtUSR"
        case .i64GtURS: return "i64GtURS"
        case .i32LeSSS: return "i32LeSSS"
        case .i32LeSSR: return "i32LeSSR"
        case .i32LeSRS: return "i32LeSRS"
        case .i64LeSSS: return "i64LeSSS"
        case .i64LeSSR: return "i64LeSSR"
        case .i64LeSRS: return "i64LeSRS"
        case .i32LeUSS: return "i32LeUSS"
        case .i32LeUSR: return "i32LeUSR"
        case .i32LeURS: return "i32LeURS"
        case .i64LeUSS: return "i64LeUSS"
        case .i64LeUSR: return "i64LeUSR"
        case .i64LeURS: return "i64LeURS"
        case .i32GeSSS: return "i32GeSSS"
        case .i32GeSSR: return "i32GeSSR"
        case .i32GeSRS: return "i32GeSRS"
        case .i64GeSSS: return "i64GeSSS"
        case .i64GeSSR: return "i64GeSSR"
        case .i64GeSRS: return "i64GeSRS"
        case .i32GeUSS: return "i32GeUSS"
        case .i32GeUSR: return "i32GeUSR"
        case .i32GeURS: return "i32GeURS"
        case .i64GeUSS: return "i64GeUSS"
        case .i64GeUSR: return "i64GeUSR"
        case .i64GeURS: return "i64GeURS"
        case .i32Clz: return "i32Clz"
        case .i64Clz: return "i64Clz"
        case .i32Ctz: return "i32Ctz"
        case .i64Ctz: return "i64Ctz"
        case .i32Popcnt: return "i32Popcnt"
        case .i64Popcnt: return "i64Popcnt"
        case .i32Eqz: return "i32Eqz"
        case .i64Eqz: return "i64Eqz"
        case .i32WrapI64: return "i32WrapI64"
        case .i64ExtendI32S: return "i64ExtendI32S"
        case .i64ExtendI32U: return "i64ExtendI32U"
        case .i32Extend8S: return "i32Extend8S"
        case .i64Extend8S: return "i64Extend8S"
        case .i32Extend16S: return "i32Extend16S"
        case .i64Extend16S: return "i64Extend16S"
        case .i64Extend32S: return "i64Extend32S"
        case .i32TruncF32S: return "i32TruncF32S"
        case .i32TruncF32U: return "i32TruncF32U"
        case .i32TruncSatF32S: return "i32TruncSatF32S"
        case .i32TruncSatF32U: return "i32TruncSatF32U"
        case .i32TruncF64S: return "i32TruncF64S"
        case .i32TruncF64U: return "i32TruncF64U"
        case .i32TruncSatF64S: return "i32TruncSatF64S"
        case .i32TruncSatF64U: return "i32TruncSatF64U"
        case .i64TruncF32S: return "i64TruncF32S"
        case .i64TruncF32U: return "i64TruncF32U"
        case .i64TruncSatF32S: return "i64TruncSatF32S"
        case .i64TruncSatF32U: return "i64TruncSatF32U"
        case .i64TruncF64S: return "i64TruncF64S"
        case .i64TruncF64U: return "i64TruncF64U"
        case .i64TruncSatF64S: return "i64TruncSatF64S"
        case .i64TruncSatF64U: return "i64TruncSatF64U"
        case .f32ConvertI32S: return "f32ConvertI32S"
        case .f32ConvertI32U: return "f32ConvertI32U"
        case .f32ConvertI64S: return "f32ConvertI64S"
        case .f32ConvertI64U: return "f32ConvertI64U"
        case .f64ConvertI32S: return "f64ConvertI32S"
        case .f64ConvertI32U: return "f64ConvertI32U"
        case .f64ConvertI64S: return "f64ConvertI64S"
        case .f64ConvertI64U: return "f64ConvertI64U"
        case .f32ReinterpretI32: return "f32ReinterpretI32"
        case .f64ReinterpretI64: return "f64ReinterpretI64"
        case .i32ReinterpretF32: return "i32ReinterpretF32"
        case .i64ReinterpretF64: return "i64ReinterpretF64"
        case .f32Add: return "f32Add"
        case .f64Add: return "f64Add"
        case .f32Sub: return "f32Sub"
        case .f64Sub: return "f64Sub"
        case .f32Mul: return "f32Mul"
        case .f64Mul: return "f64Mul"
        case .f32Div: return "f32Div"
        case .f64Div: return "f64Div"
        case .f32Min: return "f32Min"
        case .f64Min: return "f64Min"
        case .f32Max: return "f32Max"
        case .f64Max: return "f64Max"
        case .f32CopySign: return "f32CopySign"
        case .f64CopySign: return "f64CopySign"
        case .f32Eq: return "f32Eq"
        case .f64Eq: return "f64Eq"
        case .f32Ne: return "f32Ne"
        case .f64Ne: return "f64Ne"
        case .f32Lt: return "f32Lt"
        case .f64Lt: return "f64Lt"
        case .f32Gt: return "f32Gt"
        case .f64Gt: return "f64Gt"
        case .f32Le: return "f32Le"
        case .f64Le: return "f64Le"
        case .f32Ge: return "f32Ge"
        case .f64Ge: return "f64Ge"
        case .f32Abs: return "f32Abs"
        case .f64Abs: return "f64Abs"
        case .f32Neg: return "f32Neg"
        case .f64Neg: return "f64Neg"
        case .f32Ceil: return "f32Ceil"
        case .f64Ceil: return "f64Ceil"
        case .f32Floor: return "f32Floor"
        case .f64Floor: return "f64Floor"
        case .f32Trunc: return "f32Trunc"
        case .f64Trunc: return "f64Trunc"
        case .f32Nearest: return "f32Nearest"
        case .f64Nearest: return "f64Nearest"
        case .f32Sqrt: return "f32Sqrt"
        case .f64Sqrt: return "f64Sqrt"
        case .f64PromoteF32: return "f64PromoteF32"
        case .f32DemoteF64: return "f32DemoteF64"
        case .select: return "select"
        case .refNull: return "refNull"
        case .refIsNull: return "refIsNull"
        case .refFunc: return "refFunc"
        case .tableGet: return "tableGet"
        case .tableSet: return "tableSet"
        case .tableSize: return "tableSize"
        case .tableGrow: return "tableGrow"
        case .tableFill: return "tableFill"
        case .tableCopy: return "tableCopy"
        case .tableInit: return "tableInit"
        case .tableElementDrop: return "tableElementDrop"
        case .onEnter: return "onEnter"
        case .onExit: return "onExit"
        }
    }
}


extension ExecutionState {
    mutating func i32AddSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.add(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32AddSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.add(readPRegI32(x0))) }
    mutating func i64AddSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.add(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64AddSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.add(readPRegI64(x0))) }
    mutating func i32MulSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.mul(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32MulSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.mul(readPRegI32(x0))) }
    mutating func i64MulSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.mul(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64MulSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.mul(readPRegI64(x0))) }
    mutating func i32AndSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.and(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32AndSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.and(readPRegI32(x0))) }
    mutating func i64AndSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.and(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64AndSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.and(readPRegI64(x0))) }
    mutating func i32OrSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.or(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32OrSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.or(readPRegI32(x0))) }
    mutating func i64OrSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.or(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64OrSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.or(readPRegI64(x0))) }
    mutating func i32XorSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.xor(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32XorSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.xor(readPRegI32(x0))) }
    mutating func i64XorSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.xor(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64XorSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.xor(readPRegI64(x0))) }
    mutating func i32SubSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.sub(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32SubSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.sub(readPRegI32(x0))) }
    mutating func i32SubRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).sub(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64SubSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.sub(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64SubSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.sub(readPRegI64(x0))) }
    mutating func i64SubRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).sub(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32ShlSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.shl(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32ShlSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.shl(readPRegI32(x0))) }
    mutating func i32ShlRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).shl(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64ShlSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.shl(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64ShlSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.shl(readPRegI64(x0))) }
    mutating func i64ShlRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).shl(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32ShrSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.shrS(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32ShrSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.shrS(readPRegI32(x0))) }
    mutating func i32ShrSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).shrS(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64ShrSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.shrS(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64ShrSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.shrS(readPRegI64(x0))) }
    mutating func i64ShrSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).shrS(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32ShrUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.shrU(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32ShrUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.shrU(readPRegI32(x0))) }
    mutating func i32ShrURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).shrU(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64ShrUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.shrU(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64ShrUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.shrU(readPRegI64(x0))) }
    mutating func i64ShrURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).shrU(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32RotlSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.rotl(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32RotlSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.rotl(readPRegI32(x0))) }
    mutating func i32RotlRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).rotl(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64RotlSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.rotl(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64RotlSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.rotl(readPRegI64(x0))) }
    mutating func i64RotlRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).rotl(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32RotrSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.rotr(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32RotrSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.rotr(readPRegI32(x0))) }
    mutating func i32RotrRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).rotr(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64RotrSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.rotr(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64RotrSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.rotr(readPRegI64(x0))) }
    mutating func i64RotrRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).rotr(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32DivSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) throws { try writePReg(&x0, sp[binaryOperandSS.lhs].i32.divS(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32DivSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) throws { try writePReg(&x0, sp[binaryOperandSR.lhs].i32.divS(readPRegI32(x0))) }
    mutating func i32DivSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) throws { try writePReg(&x0, readPRegI32(x0).divS(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64DivSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) throws { try writePReg(&x0, sp[binaryOperandSS.lhs].i64.divS(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64DivSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) throws { try writePReg(&x0, sp[binaryOperandSR.lhs].i64.divS(readPRegI64(x0))) }
    mutating func i64DivSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) throws { try writePReg(&x0, readPRegI64(x0).divS(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32DivUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) throws { try writePReg(&x0, sp[binaryOperandSS.lhs].i32.divU(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32DivUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) throws { try writePReg(&x0, sp[binaryOperandSR.lhs].i32.divU(readPRegI32(x0))) }
    mutating func i32DivURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) throws { try writePReg(&x0, readPRegI32(x0).divU(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64DivUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) throws { try writePReg(&x0, sp[binaryOperandSS.lhs].i64.divU(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64DivUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) throws { try writePReg(&x0, sp[binaryOperandSR.lhs].i64.divU(readPRegI64(x0))) }
    mutating func i64DivURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) throws { try writePReg(&x0, readPRegI64(x0).divU(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32RemSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) throws { try writePReg(&x0, sp[binaryOperandSS.lhs].i32.remS(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32RemSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) throws { try writePReg(&x0, sp[binaryOperandSR.lhs].i32.remS(readPRegI32(x0))) }
    mutating func i32RemSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) throws { try writePReg(&x0, readPRegI32(x0).remS(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64RemSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) throws { try writePReg(&x0, sp[binaryOperandSS.lhs].i64.remS(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64RemSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) throws { try writePReg(&x0, sp[binaryOperandSR.lhs].i64.remS(readPRegI64(x0))) }
    mutating func i64RemSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) throws { try writePReg(&x0, readPRegI64(x0).remS(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32RemUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) throws { try writePReg(&x0, sp[binaryOperandSS.lhs].i32.remU(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32RemUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) throws { try writePReg(&x0, sp[binaryOperandSR.lhs].i32.remU(readPRegI32(x0))) }
    mutating func i32RemURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) throws { try writePReg(&x0, readPRegI32(x0).remU(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64RemUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) throws { try writePReg(&x0, sp[binaryOperandSS.lhs].i64.remU(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64RemUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) throws { try writePReg(&x0, sp[binaryOperandSR.lhs].i64.remU(readPRegI64(x0))) }
    mutating func i64RemURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) throws { try writePReg(&x0, readPRegI64(x0).remU(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32EqSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.eq(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32EqSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.eq(readPRegI32(x0))) }
    mutating func i64EqSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.eq(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64EqSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.eq(readPRegI64(x0))) }
    mutating func i32NeSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.ne(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32NeSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.ne(readPRegI32(x0))) }
    mutating func i64NeSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.ne(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64NeSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.ne(readPRegI64(x0))) }
    mutating func i32LtSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.ltS(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32LtSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.ltS(readPRegI32(x0))) }
    mutating func i32LtSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).ltS(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64LtSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.ltS(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64LtSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.ltS(readPRegI64(x0))) }
    mutating func i64LtSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).ltS(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32LtUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.ltU(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32LtUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.ltU(readPRegI32(x0))) }
    mutating func i32LtURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).ltU(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64LtUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.ltU(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64LtUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.ltU(readPRegI64(x0))) }
    mutating func i64LtURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).ltU(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32GtSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.gtS(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32GtSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.gtS(readPRegI32(x0))) }
    mutating func i32GtSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).gtS(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64GtSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.gtS(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64GtSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.gtS(readPRegI64(x0))) }
    mutating func i64GtSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).gtS(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32GtUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.gtU(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32GtUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.gtU(readPRegI32(x0))) }
    mutating func i32GtURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).gtU(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64GtUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.gtU(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64GtUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.gtU(readPRegI64(x0))) }
    mutating func i64GtURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).gtU(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32LeSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.leS(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32LeSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.leS(readPRegI32(x0))) }
    mutating func i32LeSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).leS(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64LeSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.leS(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64LeSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.leS(readPRegI64(x0))) }
    mutating func i64LeSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).leS(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32LeUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.leU(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32LeUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.leU(readPRegI32(x0))) }
    mutating func i32LeURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).leU(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64LeUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.leU(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64LeUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.leU(readPRegI64(x0))) }
    mutating func i64LeURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).leU(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32GeSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.geS(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32GeSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.geS(readPRegI32(x0))) }
    mutating func i32GeSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).geS(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64GeSSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.geS(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64GeSSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.geS(readPRegI64(x0))) }
    mutating func i64GeSRS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).geS(sp[binaryOperandRS.rhs].i64)) }
    mutating func i32GeUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i32.geU(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32GeUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i32.geU(readPRegI32(x0))) }
    mutating func i32GeURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI32(x0).geU(sp[binaryOperandRS.rhs].i32)) }
    mutating func i64GeUSS(sp: Sp, x0: inout X0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&x0, sp[binaryOperandSS.lhs].i64.geU(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64GeUSR(sp: Sp, x0: inout X0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&x0, sp[binaryOperandSR.lhs].i64.geU(readPRegI64(x0))) }
    mutating func i64GeURS(sp: Sp, x0: inout X0, binaryOperandRS: Instruction.BinaryOperandRS) { writePReg(&x0, readPRegI64(x0).geU(sp[binaryOperandRS.rhs].i64)) }
    @inline(__always) mutating func f32Add(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].add(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Add(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].add(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Sub(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].sub(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Sub(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].sub(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Mul(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].mul(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Mul(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].mul(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Div(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].div(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Div(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].div(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Min(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].min(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Min(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].min(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Max(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].max(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Max(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].max(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32CopySign(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].copySign(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64CopySign(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].copySign(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Eq(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].eq(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Eq(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].eq(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Ne(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].ne(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Ne(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].ne(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Lt(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].lt(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Lt(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].lt(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Gt(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].gt(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Gt(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].gt(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Le(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].le(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Le(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].le(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Ge(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].ge(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Ge(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].ge(sp[f64: binaryOperand.rhs])
    }
    mutating func i32Clz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].clz
    }
    mutating func i64Clz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].clz
    }
    mutating func i32Ctz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].ctz
    }
    mutating func i64Ctz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].ctz
    }
    mutating func i32Popcnt(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].popcnt
    }
    mutating func i64Popcnt(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].popcnt
    }
    mutating func i32Eqz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].eqz
    }
    mutating func i64Eqz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i64: unaryOperand.input].eqz
    }
    mutating func i32WrapI64(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i64: unaryOperand.input].wrap
    }
    mutating func i64ExtendI32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i32: unaryOperand.input].extendI32S
    }
    mutating func i64ExtendI32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i32: unaryOperand.input].extendI32U
    }
    mutating func i32Extend8S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].extend8S
    }
    mutating func i64Extend8S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].extend8S
    }
    mutating func i32Extend16S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].extend16S
    }
    mutating func i64Extend16S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].extend16S
    }
    mutating func i64Extend32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].extend32S
    }
    mutating func i32TruncF32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f32: unaryOperand.input].truncToI32S
    }
    mutating func i32TruncF32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f32: unaryOperand.input].truncToI32U
    }
    mutating func i32TruncSatF32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f32: unaryOperand.input].truncSatToI32S
    }
    mutating func i32TruncSatF32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f32: unaryOperand.input].truncSatToI32U
    }
    mutating func i32TruncF64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f64: unaryOperand.input].truncToI32S
    }
    mutating func i32TruncF64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f64: unaryOperand.input].truncToI32U
    }
    mutating func i32TruncSatF64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f64: unaryOperand.input].truncSatToI32S
    }
    mutating func i32TruncSatF64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f64: unaryOperand.input].truncSatToI32U
    }
    mutating func i64TruncF32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f32: unaryOperand.input].truncToI64S
    }
    mutating func i64TruncF32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f32: unaryOperand.input].truncToI64U
    }
    mutating func i64TruncSatF32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f32: unaryOperand.input].truncSatToI64S
    }
    mutating func i64TruncSatF32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f32: unaryOperand.input].truncSatToI64U
    }
    mutating func i64TruncF64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f64: unaryOperand.input].truncToI64S
    }
    mutating func i64TruncF64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f64: unaryOperand.input].truncToI64U
    }
    mutating func i64TruncSatF64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f64: unaryOperand.input].truncSatToI64S
    }
    mutating func i64TruncSatF64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f64: unaryOperand.input].truncSatToI64U
    }
    mutating func f32ConvertI32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i32: unaryOperand.input].convertToF32S
    }
    mutating func f32ConvertI32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i32: unaryOperand.input].convertToF32U
    }
    mutating func f32ConvertI64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i64: unaryOperand.input].convertToF32S
    }
    mutating func f32ConvertI64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i64: unaryOperand.input].convertToF32U
    }
    mutating func f64ConvertI32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i32: unaryOperand.input].convertToF64S
    }
    mutating func f64ConvertI32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i32: unaryOperand.input].convertToF64U
    }
    mutating func f64ConvertI64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i64: unaryOperand.input].convertToF64S
    }
    mutating func f64ConvertI64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i64: unaryOperand.input].convertToF64U
    }
    mutating func f32ReinterpretI32(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i32: unaryOperand.input].reinterpretToF32
    }
    mutating func f64ReinterpretI64(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i64: unaryOperand.input].reinterpretToF64
    }
    mutating func i32ReinterpretF32(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[f32: unaryOperand.input].reinterpretToI32
    }
    mutating func i64ReinterpretF64(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[f64: unaryOperand.input].reinterpretToI64
    }
    mutating func f32Abs(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].abs
    }
    mutating func f64Abs(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].abs
    }
    mutating func f32Neg(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].neg
    }
    mutating func f64Neg(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].neg
    }
    mutating func f32Ceil(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].ceil
    }
    mutating func f64Ceil(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].ceil
    }
    mutating func f32Floor(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].floor
    }
    mutating func f64Floor(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].floor
    }
    mutating func f32Trunc(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].trunc
    }
    mutating func f64Trunc(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].trunc
    }
    mutating func f32Nearest(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].nearest
    }
    mutating func f64Nearest(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].nearest
    }
    mutating func f32Sqrt(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].sqrt
    }
    mutating func f64Sqrt(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].sqrt
    }
    mutating func f64PromoteF32(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f32: unaryOperand.input].promoteF32
    }
    mutating func f32DemoteF64(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f64: unaryOperand.input].demoteF64
    }
    @inline(__always) mutating func i32LoadS(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try Int32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: Int32.self)))
    }
    @inline(__always) mutating func i32LoadR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try Int32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: Int32.self)))
    }
    @inline(__always) mutating func i64LoadS(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try Int64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: Int64.self)))
    }
    @inline(__always) mutating func i64LoadR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try Int64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: Int64.self)))
    }
    @inline(__always) mutating func f32LoadS(sp: Sp, x0: X0, d0: inout D0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&d0, try Float32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: Float32.self)))
    }
    @inline(__always) mutating func f32LoadR(sp: Sp, x0: X0, d0: inout D0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&d0, try Float32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: Float32.self)))
    }
    @inline(__always) mutating func f64LoadS(sp: Sp, x0: X0, d0: inout D0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&d0, try Float64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: Float64.self)))
    }
    @inline(__always) mutating func f64LoadR(sp: Sp, x0: X0, d0: inout D0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&d0, try Float64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: Float64.self)))
    }
    @inline(__always) mutating func i32Load8SS(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try Int32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: Int8.self)))
    }
    @inline(__always) mutating func i32Load8SR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try Int32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: Int8.self)))
    }
    @inline(__always) mutating func i32Load8US(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try UInt32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: UInt8.self)))
    }
    @inline(__always) mutating func i32Load8UR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try UInt32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: UInt8.self)))
    }
    @inline(__always) mutating func i32Load16SS(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try Int32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: Int16.self)))
    }
    @inline(__always) mutating func i32Load16SR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try Int32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: Int16.self)))
    }
    @inline(__always) mutating func i32Load16US(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try UInt32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: UInt16.self)))
    }
    @inline(__always) mutating func i32Load16UR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try UInt32(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: UInt16.self)))
    }
    @inline(__always) mutating func i64Load8SS(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try Int64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: Int8.self)))
    }
    @inline(__always) mutating func i64Load8SR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try Int64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: Int8.self)))
    }
    @inline(__always) mutating func i64Load8US(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try UInt64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: UInt8.self)))
    }
    @inline(__always) mutating func i64Load8UR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try UInt64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: UInt8.self)))
    }
    @inline(__always) mutating func i64Load16SS(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try Int64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: Int16.self)))
    }
    @inline(__always) mutating func i64Load16SR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try Int64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: Int16.self)))
    }
    @inline(__always) mutating func i64Load16US(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try UInt64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: UInt16.self)))
    }
    @inline(__always) mutating func i64Load16UR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try UInt64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: UInt16.self)))
    }
    @inline(__always) mutating func i64Load32SS(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try Int64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: Int32.self)))
    }
    @inline(__always) mutating func i64Load32SR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try Int64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: Int32.self)))
    }
    @inline(__always) mutating func i64Load32US(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandS: Instruction.LoadOperandS) throws {
        writePReg(&x0, try UInt64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandS.offset, pointer: sp[loadOperandS.pointer].asAddressOffset(), loadAs: UInt32.self)))
    }
    @inline(__always) mutating func i64Load32UR(sp: Sp, x0: inout X0, md: Md, ms: Ms, loadOperandR: Instruction.LoadOperandR) throws {
        writePReg(&x0, try UInt64(memoryLoad(sp: sp, md: md, ms: ms, offset: loadOperandR.offset, pointer: readPRegAddress(x0), loadAs: UInt32.self)))
    }
    @inline(__always) mutating func i32Store(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { $0.i32 })
    }
    @inline(__always) mutating func i64Store(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { $0.i64 })
    }
    @inline(__always) mutating func f32Store(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { $0.rawF32 })
    }
    @inline(__always) mutating func f64Store(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { $0.rawF64 })
    }
    @inline(__always) mutating func i32Store8(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt8(truncatingIfNeeded: $0.i32) })
    }
    @inline(__always) mutating func i32Store16(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt16(truncatingIfNeeded: $0.i32) })
    }
    @inline(__always) mutating func i64Store8(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt8(truncatingIfNeeded: $0.i64) })
    }
    @inline(__always) mutating func i64Store16(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt16(truncatingIfNeeded: $0.i64) })
    }
    @inline(__always) mutating func i64Store32(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt32(truncatingIfNeeded: $0.i64) })
    }
}


extension ExecutionState {
    @_silgen_name("wasmkit_execute_copyStack") @inline(__always)
    mutating func execute_copyStack(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let copyStackOperand = Instruction.CopyStackOperand.load(from: &pc.pointee)
        self.copyStack(sp: sp.pointee, copyStackOperand: copyStackOperand)
    }
    @_silgen_name("wasmkit_execute_copyX0ToStackI32") @inline(__always)
    mutating func execute_copyX0ToStackI32(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dest = LLVReg.load(from: &pc.pointee)
        self.copyX0ToStackI32(sp: sp.pointee, x0: x0.pointee, dest: dest)
    }
    @_silgen_name("wasmkit_execute_copyX0ToStackI64") @inline(__always)
    mutating func execute_copyX0ToStackI64(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dest = LLVReg.load(from: &pc.pointee)
        self.copyX0ToStackI64(sp: sp.pointee, x0: x0.pointee, dest: dest)
    }
    @_silgen_name("wasmkit_execute_copyD0ToStackF32") @inline(__always)
    mutating func execute_copyD0ToStackF32(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dest = LLVReg.load(from: &pc.pointee)
        self.copyD0ToStackF32(sp: sp.pointee, d0: d0.pointee, dest: dest)
    }
    @_silgen_name("wasmkit_execute_copyD0ToStackF64") @inline(__always)
    mutating func execute_copyD0ToStackF64(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dest = LLVReg.load(from: &pc.pointee)
        self.copyD0ToStackF64(sp: sp.pointee, d0: d0.pointee, dest: dest)
    }
    @_silgen_name("wasmkit_execute_globalGet") @inline(__always)
    mutating func execute_globalGet(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let globalGetOperand = Instruction.GlobalGetOperand.load(from: &pc.pointee)
        self.globalGet(sp: sp.pointee, globalGetOperand: globalGetOperand)
    }
    @_silgen_name("wasmkit_execute_globalSet") @inline(__always)
    mutating func execute_globalSet(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let globalSetOperand = Instruction.GlobalSetOperand.load(from: &pc.pointee)
        self.globalSet(sp: sp.pointee, globalSetOperand: globalSetOperand)
    }
    @_silgen_name("wasmkit_execute_call") @inline(__always)
    mutating func execute_call(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let callOperand = Instruction.CallOperand.load(from: &pc.pointee)
        pc.pointee = try self.call(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, callOperand: callOperand)
    }
    @_silgen_name("wasmkit_execute_compilingCall") @inline(__always)
    mutating func execute_compilingCall(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let compilingCallOperand = Instruction.CompilingCallOperand.load(from: &pc.pointee)
        pc.pointee = try self.compilingCall(sp: &sp.pointee, pc: pc.pointee, compilingCallOperand: compilingCallOperand)
    }
    @_silgen_name("wasmkit_execute_internalCall") @inline(__always)
    mutating func execute_internalCall(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let internalCallOperand = Instruction.InternalCallOperand.load(from: &pc.pointee)
        pc.pointee = try self.internalCall(sp: &sp.pointee, pc: pc.pointee, internalCallOperand: internalCallOperand)
    }
    @_silgen_name("wasmkit_execute_callIndirect") @inline(__always)
    mutating func execute_callIndirect(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let callIndirectOperand = Instruction.CallIndirectOperand.load(from: &pc.pointee)
        pc.pointee = try self.callIndirect(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, callIndirectOperand: callIndirectOperand)
    }
    @_silgen_name("wasmkit_execute_unreachable") @inline(__always)
    mutating func execute_unreachable(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        pc.pointee = try self.unreachable(sp: sp.pointee, pc: pc.pointee)
    }
    @_silgen_name("wasmkit_execute_nop") @inline(__always)
    mutating func execute_nop(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        self.nop(sp: sp.pointee)
    }
    @_silgen_name("wasmkit_execute_br") @inline(__always)
    mutating func execute_br(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let offset = Int32.load(from: &pc.pointee)
        pc.pointee = self.br(sp: sp.pointee, pc: pc.pointee, offset: offset)
    }
    @_silgen_name("wasmkit_execute_brIf") @inline(__always)
    mutating func execute_brIf(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let brIfOperand = Instruction.BrIfOperand.load(from: &pc.pointee)
        pc.pointee = self.brIf(sp: sp.pointee, pc: pc.pointee, brIfOperand: brIfOperand)
    }
    @_silgen_name("wasmkit_execute_brIfNot") @inline(__always)
    mutating func execute_brIfNot(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let brIfOperand = Instruction.BrIfOperand.load(from: &pc.pointee)
        pc.pointee = self.brIfNot(sp: sp.pointee, pc: pc.pointee, brIfOperand: brIfOperand)
    }
    @_silgen_name("wasmkit_execute_brTable") @inline(__always)
    mutating func execute_brTable(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let brTable = Instruction.BrTable.load(from: &pc.pointee)
        pc.pointee = self.brTable(sp: sp.pointee, pc: pc.pointee, brTable: brTable)
    }
    @_silgen_name("wasmkit_execute__return") @inline(__always)
    mutating func execute__return(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        pc.pointee = self._return(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee)
    }
    @_silgen_name("wasmkit_execute_endOfExecution") @inline(__always)
    mutating func execute_endOfExecution(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        pc.pointee = try self.endOfExecution(sp: &sp.pointee, pc: pc.pointee)
    }
    @_silgen_name("wasmkit_execute_i32LoadS") @inline(__always)
    mutating func execute_i32LoadS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i32LoadS(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i32LoadR") @inline(__always)
    mutating func execute_i32LoadR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i32LoadR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i64LoadS") @inline(__always)
    mutating func execute_i64LoadS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i64LoadS(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i64LoadR") @inline(__always)
    mutating func execute_i64LoadR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i64LoadR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_f32LoadS") @inline(__always)
    mutating func execute_f32LoadS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.f32LoadS(sp: sp.pointee, x0: x0.pointee, d0: &d0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_f32LoadR") @inline(__always)
    mutating func execute_f32LoadR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.f32LoadR(sp: sp.pointee, x0: x0.pointee, d0: &d0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_f64LoadS") @inline(__always)
    mutating func execute_f64LoadS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.f64LoadS(sp: sp.pointee, x0: x0.pointee, d0: &d0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_f64LoadR") @inline(__always)
    mutating func execute_f64LoadR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.f64LoadR(sp: sp.pointee, x0: x0.pointee, d0: &d0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i32Load8SS") @inline(__always)
    mutating func execute_i32Load8SS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i32Load8SS(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i32Load8SR") @inline(__always)
    mutating func execute_i32Load8SR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i32Load8SR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i32Load8US") @inline(__always)
    mutating func execute_i32Load8US(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i32Load8US(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i32Load8UR") @inline(__always)
    mutating func execute_i32Load8UR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i32Load8UR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i32Load16SS") @inline(__always)
    mutating func execute_i32Load16SS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i32Load16SS(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i32Load16SR") @inline(__always)
    mutating func execute_i32Load16SR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i32Load16SR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i32Load16US") @inline(__always)
    mutating func execute_i32Load16US(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i32Load16US(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i32Load16UR") @inline(__always)
    mutating func execute_i32Load16UR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i32Load16UR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i64Load8SS") @inline(__always)
    mutating func execute_i64Load8SS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i64Load8SS(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i64Load8SR") @inline(__always)
    mutating func execute_i64Load8SR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i64Load8SR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i64Load8US") @inline(__always)
    mutating func execute_i64Load8US(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i64Load8US(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i64Load8UR") @inline(__always)
    mutating func execute_i64Load8UR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i64Load8UR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i64Load16SS") @inline(__always)
    mutating func execute_i64Load16SS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i64Load16SS(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i64Load16SR") @inline(__always)
    mutating func execute_i64Load16SR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i64Load16SR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i64Load16US") @inline(__always)
    mutating func execute_i64Load16US(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i64Load16US(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i64Load16UR") @inline(__always)
    mutating func execute_i64Load16UR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i64Load16UR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i64Load32SS") @inline(__always)
    mutating func execute_i64Load32SS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i64Load32SS(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i64Load32SR") @inline(__always)
    mutating func execute_i64Load32SR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i64Load32SR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i64Load32US") @inline(__always)
    mutating func execute_i64Load32US(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandS = Instruction.LoadOperandS.load(from: &pc.pointee)
        try self.i64Load32US(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandS: loadOperandS)
    }
    @_silgen_name("wasmkit_execute_i64Load32UR") @inline(__always)
    mutating func execute_i64Load32UR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperandR = Instruction.LoadOperandR.load(from: &pc.pointee)
        try self.i64Load32UR(sp: sp.pointee, x0: &x0.pointee, md: md.pointee, ms: ms.pointee, loadOperandR: loadOperandR)
    }
    @_silgen_name("wasmkit_execute_i32Store") @inline(__always)
    mutating func execute_i32Store(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i32Store(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i64Store") @inline(__always)
    mutating func execute_i64Store(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i64Store(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_f32Store") @inline(__always)
    mutating func execute_f32Store(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.f32Store(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_f64Store") @inline(__always)
    mutating func execute_f64Store(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.f64Store(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i32Store8") @inline(__always)
    mutating func execute_i32Store8(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i32Store8(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i32Store16") @inline(__always)
    mutating func execute_i32Store16(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i32Store16(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i64Store8") @inline(__always)
    mutating func execute_i64Store8(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i64Store8(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i64Store16") @inline(__always)
    mutating func execute_i64Store16(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i64Store16(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i64Store32") @inline(__always)
    mutating func execute_i64Store32(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i64Store32(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_memorySize") @inline(__always)
    mutating func execute_memorySize(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let memorySizeOperand = Instruction.MemorySizeOperand.load(from: &pc.pointee)
        self.memorySize(sp: sp.pointee, memorySizeOperand: memorySizeOperand)
    }
    @_silgen_name("wasmkit_execute_memoryGrow") @inline(__always)
    mutating func execute_memoryGrow(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let memoryGrowOperand = Instruction.MemoryGrowOperand.load(from: &pc.pointee)
        try self.memoryGrow(sp: sp.pointee, md: &md.pointee, ms: &ms.pointee, memoryGrowOperand: memoryGrowOperand)
    }
    @_silgen_name("wasmkit_execute_memoryInit") @inline(__always)
    mutating func execute_memoryInit(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let memoryInitOperand = Instruction.MemoryInitOperand.load(from: &pc.pointee)
        try self.memoryInit(sp: sp.pointee, memoryInitOperand: memoryInitOperand)
    }
    @_silgen_name("wasmkit_execute_memoryDataDrop") @inline(__always)
    mutating func execute_memoryDataDrop(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dataIndex = DataIndex.load(from: &pc.pointee)
        self.memoryDataDrop(sp: sp.pointee, dataIndex: dataIndex)
    }
    @_silgen_name("wasmkit_execute_memoryCopy") @inline(__always)
    mutating func execute_memoryCopy(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let memoryCopyOperand = Instruction.MemoryCopyOperand.load(from: &pc.pointee)
        try self.memoryCopy(sp: sp.pointee, memoryCopyOperand: memoryCopyOperand)
    }
    @_silgen_name("wasmkit_execute_memoryFill") @inline(__always)
    mutating func execute_memoryFill(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let memoryFillOperand = Instruction.MemoryFillOperand.load(from: &pc.pointee)
        try self.memoryFill(sp: sp.pointee, memoryFillOperand: memoryFillOperand)
    }
    @_silgen_name("wasmkit_execute_const32") @inline(__always)
    mutating func execute_const32(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let const32Operand = Instruction.Const32Operand.load(from: &pc.pointee)
        self.const32(sp: sp.pointee, const32Operand: const32Operand)
    }
    @_silgen_name("wasmkit_execute_const64") @inline(__always)
    mutating func execute_const64(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let const64Operand = Instruction.Const64Operand.load(from: &pc.pointee)
        self.const64(sp: sp.pointee, const64Operand: const64Operand)
    }
    @_silgen_name("wasmkit_execute_i32AddSS") @inline(__always)
    mutating func execute_i32AddSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32AddSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32AddSR") @inline(__always)
    mutating func execute_i32AddSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32AddSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64AddSS") @inline(__always)
    mutating func execute_i64AddSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64AddSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64AddSR") @inline(__always)
    mutating func execute_i64AddSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64AddSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32MulSS") @inline(__always)
    mutating func execute_i32MulSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32MulSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32MulSR") @inline(__always)
    mutating func execute_i32MulSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32MulSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64MulSS") @inline(__always)
    mutating func execute_i64MulSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64MulSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64MulSR") @inline(__always)
    mutating func execute_i64MulSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64MulSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32AndSS") @inline(__always)
    mutating func execute_i32AndSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32AndSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32AndSR") @inline(__always)
    mutating func execute_i32AndSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32AndSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64AndSS") @inline(__always)
    mutating func execute_i64AndSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64AndSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64AndSR") @inline(__always)
    mutating func execute_i64AndSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64AndSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32OrSS") @inline(__always)
    mutating func execute_i32OrSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32OrSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32OrSR") @inline(__always)
    mutating func execute_i32OrSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32OrSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64OrSS") @inline(__always)
    mutating func execute_i64OrSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64OrSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64OrSR") @inline(__always)
    mutating func execute_i64OrSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64OrSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32XorSS") @inline(__always)
    mutating func execute_i32XorSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32XorSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32XorSR") @inline(__always)
    mutating func execute_i32XorSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32XorSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64XorSS") @inline(__always)
    mutating func execute_i64XorSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64XorSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64XorSR") @inline(__always)
    mutating func execute_i64XorSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64XorSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32SubSS") @inline(__always)
    mutating func execute_i32SubSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32SubSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32SubSR") @inline(__always)
    mutating func execute_i32SubSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32SubSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32SubRS") @inline(__always)
    mutating func execute_i32SubRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32SubRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64SubSS") @inline(__always)
    mutating func execute_i64SubSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64SubSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64SubSR") @inline(__always)
    mutating func execute_i64SubSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64SubSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64SubRS") @inline(__always)
    mutating func execute_i64SubRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64SubRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32ShlSS") @inline(__always)
    mutating func execute_i32ShlSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32ShlSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32ShlSR") @inline(__always)
    mutating func execute_i32ShlSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32ShlSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32ShlRS") @inline(__always)
    mutating func execute_i32ShlRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32ShlRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64ShlSS") @inline(__always)
    mutating func execute_i64ShlSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64ShlSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64ShlSR") @inline(__always)
    mutating func execute_i64ShlSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64ShlSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64ShlRS") @inline(__always)
    mutating func execute_i64ShlRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64ShlRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32ShrSSS") @inline(__always)
    mutating func execute_i32ShrSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32ShrSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32ShrSSR") @inline(__always)
    mutating func execute_i32ShrSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32ShrSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32ShrSRS") @inline(__always)
    mutating func execute_i32ShrSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32ShrSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64ShrSSS") @inline(__always)
    mutating func execute_i64ShrSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64ShrSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64ShrSSR") @inline(__always)
    mutating func execute_i64ShrSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64ShrSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64ShrSRS") @inline(__always)
    mutating func execute_i64ShrSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64ShrSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32ShrUSS") @inline(__always)
    mutating func execute_i32ShrUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32ShrUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32ShrUSR") @inline(__always)
    mutating func execute_i32ShrUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32ShrUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32ShrURS") @inline(__always)
    mutating func execute_i32ShrURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32ShrURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64ShrUSS") @inline(__always)
    mutating func execute_i64ShrUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64ShrUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64ShrUSR") @inline(__always)
    mutating func execute_i64ShrUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64ShrUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64ShrURS") @inline(__always)
    mutating func execute_i64ShrURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64ShrURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32RotlSS") @inline(__always)
    mutating func execute_i32RotlSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32RotlSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32RotlSR") @inline(__always)
    mutating func execute_i32RotlSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32RotlSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32RotlRS") @inline(__always)
    mutating func execute_i32RotlRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32RotlRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64RotlSS") @inline(__always)
    mutating func execute_i64RotlSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64RotlSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64RotlSR") @inline(__always)
    mutating func execute_i64RotlSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64RotlSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64RotlRS") @inline(__always)
    mutating func execute_i64RotlRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64RotlRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32RotrSS") @inline(__always)
    mutating func execute_i32RotrSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32RotrSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32RotrSR") @inline(__always)
    mutating func execute_i32RotrSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32RotrSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32RotrRS") @inline(__always)
    mutating func execute_i32RotrRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32RotrRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64RotrSS") @inline(__always)
    mutating func execute_i64RotrSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64RotrSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64RotrSR") @inline(__always)
    mutating func execute_i64RotrSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64RotrSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64RotrRS") @inline(__always)
    mutating func execute_i64RotrRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64RotrRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32DivSSS") @inline(__always)
    mutating func execute_i32DivSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        try self.i32DivSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32DivSSR") @inline(__always)
    mutating func execute_i32DivSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        try self.i32DivSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32DivSRS") @inline(__always)
    mutating func execute_i32DivSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        try self.i32DivSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64DivSSS") @inline(__always)
    mutating func execute_i64DivSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        try self.i64DivSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64DivSSR") @inline(__always)
    mutating func execute_i64DivSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        try self.i64DivSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64DivSRS") @inline(__always)
    mutating func execute_i64DivSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        try self.i64DivSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32DivUSS") @inline(__always)
    mutating func execute_i32DivUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        try self.i32DivUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32DivUSR") @inline(__always)
    mutating func execute_i32DivUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        try self.i32DivUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32DivURS") @inline(__always)
    mutating func execute_i32DivURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        try self.i32DivURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64DivUSS") @inline(__always)
    mutating func execute_i64DivUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        try self.i64DivUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64DivUSR") @inline(__always)
    mutating func execute_i64DivUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        try self.i64DivUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64DivURS") @inline(__always)
    mutating func execute_i64DivURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        try self.i64DivURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32RemSSS") @inline(__always)
    mutating func execute_i32RemSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        try self.i32RemSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32RemSSR") @inline(__always)
    mutating func execute_i32RemSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        try self.i32RemSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32RemSRS") @inline(__always)
    mutating func execute_i32RemSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        try self.i32RemSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64RemSSS") @inline(__always)
    mutating func execute_i64RemSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        try self.i64RemSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64RemSSR") @inline(__always)
    mutating func execute_i64RemSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        try self.i64RemSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64RemSRS") @inline(__always)
    mutating func execute_i64RemSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        try self.i64RemSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32RemUSS") @inline(__always)
    mutating func execute_i32RemUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        try self.i32RemUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32RemUSR") @inline(__always)
    mutating func execute_i32RemUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        try self.i32RemUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32RemURS") @inline(__always)
    mutating func execute_i32RemURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        try self.i32RemURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64RemUSS") @inline(__always)
    mutating func execute_i64RemUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        try self.i64RemUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64RemUSR") @inline(__always)
    mutating func execute_i64RemUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        try self.i64RemUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64RemURS") @inline(__always)
    mutating func execute_i64RemURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        try self.i64RemURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32EqSS") @inline(__always)
    mutating func execute_i32EqSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32EqSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32EqSR") @inline(__always)
    mutating func execute_i32EqSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32EqSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64EqSS") @inline(__always)
    mutating func execute_i64EqSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64EqSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64EqSR") @inline(__always)
    mutating func execute_i64EqSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64EqSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32NeSS") @inline(__always)
    mutating func execute_i32NeSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32NeSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32NeSR") @inline(__always)
    mutating func execute_i32NeSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32NeSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64NeSS") @inline(__always)
    mutating func execute_i64NeSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64NeSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64NeSR") @inline(__always)
    mutating func execute_i64NeSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64NeSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32LtSSS") @inline(__always)
    mutating func execute_i32LtSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32LtSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32LtSSR") @inline(__always)
    mutating func execute_i32LtSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32LtSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32LtSRS") @inline(__always)
    mutating func execute_i32LtSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32LtSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64LtSSS") @inline(__always)
    mutating func execute_i64LtSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64LtSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64LtSSR") @inline(__always)
    mutating func execute_i64LtSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64LtSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64LtSRS") @inline(__always)
    mutating func execute_i64LtSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64LtSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32LtUSS") @inline(__always)
    mutating func execute_i32LtUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32LtUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32LtUSR") @inline(__always)
    mutating func execute_i32LtUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32LtUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32LtURS") @inline(__always)
    mutating func execute_i32LtURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32LtURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64LtUSS") @inline(__always)
    mutating func execute_i64LtUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64LtUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64LtUSR") @inline(__always)
    mutating func execute_i64LtUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64LtUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64LtURS") @inline(__always)
    mutating func execute_i64LtURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64LtURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32GtSSS") @inline(__always)
    mutating func execute_i32GtSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32GtSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32GtSSR") @inline(__always)
    mutating func execute_i32GtSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32GtSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32GtSRS") @inline(__always)
    mutating func execute_i32GtSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32GtSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64GtSSS") @inline(__always)
    mutating func execute_i64GtSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64GtSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64GtSSR") @inline(__always)
    mutating func execute_i64GtSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64GtSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64GtSRS") @inline(__always)
    mutating func execute_i64GtSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64GtSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32GtUSS") @inline(__always)
    mutating func execute_i32GtUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32GtUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32GtUSR") @inline(__always)
    mutating func execute_i32GtUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32GtUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32GtURS") @inline(__always)
    mutating func execute_i32GtURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32GtURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64GtUSS") @inline(__always)
    mutating func execute_i64GtUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64GtUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64GtUSR") @inline(__always)
    mutating func execute_i64GtUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64GtUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64GtURS") @inline(__always)
    mutating func execute_i64GtURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64GtURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32LeSSS") @inline(__always)
    mutating func execute_i32LeSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32LeSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32LeSSR") @inline(__always)
    mutating func execute_i32LeSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32LeSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32LeSRS") @inline(__always)
    mutating func execute_i32LeSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32LeSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64LeSSS") @inline(__always)
    mutating func execute_i64LeSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64LeSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64LeSSR") @inline(__always)
    mutating func execute_i64LeSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64LeSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64LeSRS") @inline(__always)
    mutating func execute_i64LeSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64LeSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32LeUSS") @inline(__always)
    mutating func execute_i32LeUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32LeUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32LeUSR") @inline(__always)
    mutating func execute_i32LeUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32LeUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32LeURS") @inline(__always)
    mutating func execute_i32LeURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32LeURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64LeUSS") @inline(__always)
    mutating func execute_i64LeUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64LeUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64LeUSR") @inline(__always)
    mutating func execute_i64LeUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64LeUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64LeURS") @inline(__always)
    mutating func execute_i64LeURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64LeURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32GeSSS") @inline(__always)
    mutating func execute_i32GeSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32GeSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32GeSSR") @inline(__always)
    mutating func execute_i32GeSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32GeSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32GeSRS") @inline(__always)
    mutating func execute_i32GeSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32GeSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64GeSSS") @inline(__always)
    mutating func execute_i64GeSSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64GeSSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64GeSSR") @inline(__always)
    mutating func execute_i64GeSSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64GeSSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64GeSRS") @inline(__always)
    mutating func execute_i64GeSRS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64GeSRS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32GeUSS") @inline(__always)
    mutating func execute_i32GeUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32GeUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32GeUSR") @inline(__always)
    mutating func execute_i32GeUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32GeUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32GeURS") @inline(__always)
    mutating func execute_i32GeURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i32GeURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i64GeUSS") @inline(__always)
    mutating func execute_i64GeUSS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64GeUSS(sp: sp.pointee, x0: &x0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64GeUSR") @inline(__always)
    mutating func execute_i64GeUSR(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64GeUSR(sp: sp.pointee, x0: &x0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64GeURS") @inline(__always)
    mutating func execute_i64GeURS(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandRS = Instruction.BinaryOperandRS.load(from: &pc.pointee)
        self.i64GeURS(sp: sp.pointee, x0: &x0.pointee, binaryOperandRS: binaryOperandRS)
    }
    @_silgen_name("wasmkit_execute_i32Clz") @inline(__always)
    mutating func execute_i32Clz(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Clz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Clz") @inline(__always)
    mutating func execute_i64Clz(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Clz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Ctz") @inline(__always)
    mutating func execute_i32Ctz(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Ctz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Ctz") @inline(__always)
    mutating func execute_i64Ctz(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Ctz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Popcnt") @inline(__always)
    mutating func execute_i32Popcnt(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Popcnt(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Popcnt") @inline(__always)
    mutating func execute_i64Popcnt(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Popcnt(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Eqz") @inline(__always)
    mutating func execute_i32Eqz(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Eqz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Eqz") @inline(__always)
    mutating func execute_i64Eqz(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Eqz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32WrapI64") @inline(__always)
    mutating func execute_i32WrapI64(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32WrapI64(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64ExtendI32S") @inline(__always)
    mutating func execute_i64ExtendI32S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64ExtendI32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64ExtendI32U") @inline(__always)
    mutating func execute_i64ExtendI32U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64ExtendI32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Extend8S") @inline(__always)
    mutating func execute_i32Extend8S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Extend8S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Extend8S") @inline(__always)
    mutating func execute_i64Extend8S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Extend8S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Extend16S") @inline(__always)
    mutating func execute_i32Extend16S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Extend16S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Extend16S") @inline(__always)
    mutating func execute_i64Extend16S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Extend16S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Extend32S") @inline(__always)
    mutating func execute_i64Extend32S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Extend32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncF32S") @inline(__always)
    mutating func execute_i32TruncF32S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncF32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncF32U") @inline(__always)
    mutating func execute_i32TruncF32U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncF32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF32S") @inline(__always)
    mutating func execute_i32TruncSatF32S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncSatF32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF32U") @inline(__always)
    mutating func execute_i32TruncSatF32U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncSatF32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncF64S") @inline(__always)
    mutating func execute_i32TruncF64S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncF64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncF64U") @inline(__always)
    mutating func execute_i32TruncF64U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncF64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF64S") @inline(__always)
    mutating func execute_i32TruncSatF64S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncSatF64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF64U") @inline(__always)
    mutating func execute_i32TruncSatF64U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncSatF64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncF32S") @inline(__always)
    mutating func execute_i64TruncF32S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncF32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncF32U") @inline(__always)
    mutating func execute_i64TruncF32U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncF32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF32S") @inline(__always)
    mutating func execute_i64TruncSatF32S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncSatF32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF32U") @inline(__always)
    mutating func execute_i64TruncSatF32U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncSatF32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncF64S") @inline(__always)
    mutating func execute_i64TruncF64S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncF64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncF64U") @inline(__always)
    mutating func execute_i64TruncF64U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncF64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF64S") @inline(__always)
    mutating func execute_i64TruncSatF64S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncSatF64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF64U") @inline(__always)
    mutating func execute_i64TruncSatF64U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncSatF64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ConvertI32S") @inline(__always)
    mutating func execute_f32ConvertI32S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ConvertI32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ConvertI32U") @inline(__always)
    mutating func execute_f32ConvertI32U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ConvertI32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ConvertI64S") @inline(__always)
    mutating func execute_f32ConvertI64S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ConvertI64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ConvertI64U") @inline(__always)
    mutating func execute_f32ConvertI64U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ConvertI64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ConvertI32S") @inline(__always)
    mutating func execute_f64ConvertI32S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ConvertI32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ConvertI32U") @inline(__always)
    mutating func execute_f64ConvertI32U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ConvertI32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ConvertI64S") @inline(__always)
    mutating func execute_f64ConvertI64S(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ConvertI64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ConvertI64U") @inline(__always)
    mutating func execute_f64ConvertI64U(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ConvertI64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ReinterpretI32") @inline(__always)
    mutating func execute_f32ReinterpretI32(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ReinterpretI32(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ReinterpretI64") @inline(__always)
    mutating func execute_f64ReinterpretI64(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ReinterpretI64(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32ReinterpretF32") @inline(__always)
    mutating func execute_i32ReinterpretF32(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32ReinterpretF32(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64ReinterpretF64") @inline(__always)
    mutating func execute_i64ReinterpretF64(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64ReinterpretF64(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Add") @inline(__always)
    mutating func execute_f32Add(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Add(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Add") @inline(__always)
    mutating func execute_f64Add(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Add(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Sub") @inline(__always)
    mutating func execute_f32Sub(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Sub(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Sub") @inline(__always)
    mutating func execute_f64Sub(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Sub(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Mul") @inline(__always)
    mutating func execute_f32Mul(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Mul(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Mul") @inline(__always)
    mutating func execute_f64Mul(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Mul(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Div") @inline(__always)
    mutating func execute_f32Div(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Div(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Div") @inline(__always)
    mutating func execute_f64Div(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Div(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Min") @inline(__always)
    mutating func execute_f32Min(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Min(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Min") @inline(__always)
    mutating func execute_f64Min(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Min(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Max") @inline(__always)
    mutating func execute_f32Max(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Max(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Max") @inline(__always)
    mutating func execute_f64Max(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Max(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32CopySign") @inline(__always)
    mutating func execute_f32CopySign(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32CopySign(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64CopySign") @inline(__always)
    mutating func execute_f64CopySign(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64CopySign(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Eq") @inline(__always)
    mutating func execute_f32Eq(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Eq(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Eq") @inline(__always)
    mutating func execute_f64Eq(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Eq(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Ne") @inline(__always)
    mutating func execute_f32Ne(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Ne(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Ne") @inline(__always)
    mutating func execute_f64Ne(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Ne(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Lt") @inline(__always)
    mutating func execute_f32Lt(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Lt(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Lt") @inline(__always)
    mutating func execute_f64Lt(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Lt(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Gt") @inline(__always)
    mutating func execute_f32Gt(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Gt(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Gt") @inline(__always)
    mutating func execute_f64Gt(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Gt(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Le") @inline(__always)
    mutating func execute_f32Le(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Le(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Le") @inline(__always)
    mutating func execute_f64Le(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Le(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Ge") @inline(__always)
    mutating func execute_f32Ge(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Ge(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Ge") @inline(__always)
    mutating func execute_f64Ge(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Ge(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Abs") @inline(__always)
    mutating func execute_f32Abs(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Abs(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Abs") @inline(__always)
    mutating func execute_f64Abs(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Abs(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Neg") @inline(__always)
    mutating func execute_f32Neg(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Neg(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Neg") @inline(__always)
    mutating func execute_f64Neg(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Neg(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Ceil") @inline(__always)
    mutating func execute_f32Ceil(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Ceil(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Ceil") @inline(__always)
    mutating func execute_f64Ceil(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Ceil(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Floor") @inline(__always)
    mutating func execute_f32Floor(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Floor(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Floor") @inline(__always)
    mutating func execute_f64Floor(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Floor(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Trunc") @inline(__always)
    mutating func execute_f32Trunc(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Trunc(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Trunc") @inline(__always)
    mutating func execute_f64Trunc(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Trunc(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Nearest") @inline(__always)
    mutating func execute_f32Nearest(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Nearest(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Nearest") @inline(__always)
    mutating func execute_f64Nearest(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Nearest(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Sqrt") @inline(__always)
    mutating func execute_f32Sqrt(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Sqrt(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Sqrt") @inline(__always)
    mutating func execute_f64Sqrt(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Sqrt(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64PromoteF32") @inline(__always)
    mutating func execute_f64PromoteF32(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64PromoteF32(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32DemoteF64") @inline(__always)
    mutating func execute_f32DemoteF64(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32DemoteF64(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_select") @inline(__always)
    mutating func execute_select(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let selectOperand = Instruction.SelectOperand.load(from: &pc.pointee)
        self.select(sp: sp.pointee, selectOperand: selectOperand)
    }
    @_silgen_name("wasmkit_execute_refNull") @inline(__always)
    mutating func execute_refNull(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let refNullOperand = Instruction.RefNullOperand.load(from: &pc.pointee)
        self.refNull(sp: sp.pointee, refNullOperand: refNullOperand)
    }
    @_silgen_name("wasmkit_execute_refIsNull") @inline(__always)
    mutating func execute_refIsNull(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let refIsNullOperand = Instruction.RefIsNullOperand.load(from: &pc.pointee)
        self.refIsNull(sp: sp.pointee, refIsNullOperand: refIsNullOperand)
    }
    @_silgen_name("wasmkit_execute_refFunc") @inline(__always)
    mutating func execute_refFunc(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let refFuncOperand = Instruction.RefFuncOperand.load(from: &pc.pointee)
        self.refFunc(sp: sp.pointee, refFuncOperand: refFuncOperand)
    }
    @_silgen_name("wasmkit_execute_tableGet") @inline(__always)
    mutating func execute_tableGet(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableGetOperand = Instruction.TableGetOperand.load(from: &pc.pointee)
        try self.tableGet(sp: sp.pointee, tableGetOperand: tableGetOperand)
    }
    @_silgen_name("wasmkit_execute_tableSet") @inline(__always)
    mutating func execute_tableSet(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableSetOperand = Instruction.TableSetOperand.load(from: &pc.pointee)
        try self.tableSet(sp: sp.pointee, tableSetOperand: tableSetOperand)
    }
    @_silgen_name("wasmkit_execute_tableSize") @inline(__always)
    mutating func execute_tableSize(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let tableSizeOperand = Instruction.TableSizeOperand.load(from: &pc.pointee)
        self.tableSize(sp: sp.pointee, tableSizeOperand: tableSizeOperand)
    }
    @_silgen_name("wasmkit_execute_tableGrow") @inline(__always)
    mutating func execute_tableGrow(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableGrowOperand = Instruction.TableGrowOperand.load(from: &pc.pointee)
        try self.tableGrow(sp: sp.pointee, tableGrowOperand: tableGrowOperand)
    }
    @_silgen_name("wasmkit_execute_tableFill") @inline(__always)
    mutating func execute_tableFill(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableFillOperand = Instruction.TableFillOperand.load(from: &pc.pointee)
        try self.tableFill(sp: sp.pointee, tableFillOperand: tableFillOperand)
    }
    @_silgen_name("wasmkit_execute_tableCopy") @inline(__always)
    mutating func execute_tableCopy(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableCopyOperand = Instruction.TableCopyOperand.load(from: &pc.pointee)
        try self.tableCopy(sp: sp.pointee, tableCopyOperand: tableCopyOperand)
    }
    @_silgen_name("wasmkit_execute_tableInit") @inline(__always)
    mutating func execute_tableInit(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableInitOperand = Instruction.TableInitOperand.load(from: &pc.pointee)
        try self.tableInit(sp: sp.pointee, tableInitOperand: tableInitOperand)
    }
    @_silgen_name("wasmkit_execute_tableElementDrop") @inline(__always)
    mutating func execute_tableElementDrop(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let elementIndex = ElementIndex.load(from: &pc.pointee)
        self.tableElementDrop(sp: sp.pointee, elementIndex: elementIndex)
    }
    @_silgen_name("wasmkit_execute_onEnter") @inline(__always)
    mutating func execute_onEnter(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let onEnterOperand = Instruction.OnEnterOperand.load(from: &pc.pointee)
        self.onEnter(sp: sp.pointee, onEnterOperand: onEnterOperand)
    }
    @_silgen_name("wasmkit_execute_onExit") @inline(__always)
    mutating func execute_onExit(sp: UnsafeMutablePointer<Sp>, x0: UnsafeMutablePointer<X0>, d0: UnsafeMutablePointer<D0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let onExitOperand = Instruction.OnExitOperand.load(from: &pc.pointee)
        self.onExit(sp: sp.pointee, onExitOperand: onExitOperand)
    }
}

extension Instruction {
    var rawIndex: Int {
        switch self {
        case .copyStack: return 0
        case .copyX0ToStackI32: return 1
        case .copyX0ToStackI64: return 2
        case .copyD0ToStackF32: return 3
        case .copyD0ToStackF64: return 4
        case .globalGet: return 5
        case .globalSet: return 6
        case .call: return 7
        case .compilingCall: return 8
        case .internalCall: return 9
        case .callIndirect: return 10
        case .unreachable: return 11
        case .nop: return 12
        case .br: return 13
        case .brIf: return 14
        case .brIfNot: return 15
        case .brTable: return 16
        case ._return: return 17
        case .endOfExecution: return 18
        case .i32LoadS: return 19
        case .i32LoadR: return 20
        case .i64LoadS: return 21
        case .i64LoadR: return 22
        case .f32LoadS: return 23
        case .f32LoadR: return 24
        case .f64LoadS: return 25
        case .f64LoadR: return 26
        case .i32Load8SS: return 27
        case .i32Load8SR: return 28
        case .i32Load8US: return 29
        case .i32Load8UR: return 30
        case .i32Load16SS: return 31
        case .i32Load16SR: return 32
        case .i32Load16US: return 33
        case .i32Load16UR: return 34
        case .i64Load8SS: return 35
        case .i64Load8SR: return 36
        case .i64Load8US: return 37
        case .i64Load8UR: return 38
        case .i64Load16SS: return 39
        case .i64Load16SR: return 40
        case .i64Load16US: return 41
        case .i64Load16UR: return 42
        case .i64Load32SS: return 43
        case .i64Load32SR: return 44
        case .i64Load32US: return 45
        case .i64Load32UR: return 46
        case .i32Store: return 47
        case .i64Store: return 48
        case .f32Store: return 49
        case .f64Store: return 50
        case .i32Store8: return 51
        case .i32Store16: return 52
        case .i64Store8: return 53
        case .i64Store16: return 54
        case .i64Store32: return 55
        case .memorySize: return 56
        case .memoryGrow: return 57
        case .memoryInit: return 58
        case .memoryDataDrop: return 59
        case .memoryCopy: return 60
        case .memoryFill: return 61
        case .const32: return 62
        case .const64: return 63
        case .i32AddSS: return 64
        case .i32AddSR: return 65
        case .i64AddSS: return 66
        case .i64AddSR: return 67
        case .i32MulSS: return 68
        case .i32MulSR: return 69
        case .i64MulSS: return 70
        case .i64MulSR: return 71
        case .i32AndSS: return 72
        case .i32AndSR: return 73
        case .i64AndSS: return 74
        case .i64AndSR: return 75
        case .i32OrSS: return 76
        case .i32OrSR: return 77
        case .i64OrSS: return 78
        case .i64OrSR: return 79
        case .i32XorSS: return 80
        case .i32XorSR: return 81
        case .i64XorSS: return 82
        case .i64XorSR: return 83
        case .i32SubSS: return 84
        case .i32SubSR: return 85
        case .i32SubRS: return 86
        case .i64SubSS: return 87
        case .i64SubSR: return 88
        case .i64SubRS: return 89
        case .i32ShlSS: return 90
        case .i32ShlSR: return 91
        case .i32ShlRS: return 92
        case .i64ShlSS: return 93
        case .i64ShlSR: return 94
        case .i64ShlRS: return 95
        case .i32ShrSSS: return 96
        case .i32ShrSSR: return 97
        case .i32ShrSRS: return 98
        case .i64ShrSSS: return 99
        case .i64ShrSSR: return 100
        case .i64ShrSRS: return 101
        case .i32ShrUSS: return 102
        case .i32ShrUSR: return 103
        case .i32ShrURS: return 104
        case .i64ShrUSS: return 105
        case .i64ShrUSR: return 106
        case .i64ShrURS: return 107
        case .i32RotlSS: return 108
        case .i32RotlSR: return 109
        case .i32RotlRS: return 110
        case .i64RotlSS: return 111
        case .i64RotlSR: return 112
        case .i64RotlRS: return 113
        case .i32RotrSS: return 114
        case .i32RotrSR: return 115
        case .i32RotrRS: return 116
        case .i64RotrSS: return 117
        case .i64RotrSR: return 118
        case .i64RotrRS: return 119
        case .i32DivSSS: return 120
        case .i32DivSSR: return 121
        case .i32DivSRS: return 122
        case .i64DivSSS: return 123
        case .i64DivSSR: return 124
        case .i64DivSRS: return 125
        case .i32DivUSS: return 126
        case .i32DivUSR: return 127
        case .i32DivURS: return 128
        case .i64DivUSS: return 129
        case .i64DivUSR: return 130
        case .i64DivURS: return 131
        case .i32RemSSS: return 132
        case .i32RemSSR: return 133
        case .i32RemSRS: return 134
        case .i64RemSSS: return 135
        case .i64RemSSR: return 136
        case .i64RemSRS: return 137
        case .i32RemUSS: return 138
        case .i32RemUSR: return 139
        case .i32RemURS: return 140
        case .i64RemUSS: return 141
        case .i64RemUSR: return 142
        case .i64RemURS: return 143
        case .i32EqSS: return 144
        case .i32EqSR: return 145
        case .i64EqSS: return 146
        case .i64EqSR: return 147
        case .i32NeSS: return 148
        case .i32NeSR: return 149
        case .i64NeSS: return 150
        case .i64NeSR: return 151
        case .i32LtSSS: return 152
        case .i32LtSSR: return 153
        case .i32LtSRS: return 154
        case .i64LtSSS: return 155
        case .i64LtSSR: return 156
        case .i64LtSRS: return 157
        case .i32LtUSS: return 158
        case .i32LtUSR: return 159
        case .i32LtURS: return 160
        case .i64LtUSS: return 161
        case .i64LtUSR: return 162
        case .i64LtURS: return 163
        case .i32GtSSS: return 164
        case .i32GtSSR: return 165
        case .i32GtSRS: return 166
        case .i64GtSSS: return 167
        case .i64GtSSR: return 168
        case .i64GtSRS: return 169
        case .i32GtUSS: return 170
        case .i32GtUSR: return 171
        case .i32GtURS: return 172
        case .i64GtUSS: return 173
        case .i64GtUSR: return 174
        case .i64GtURS: return 175
        case .i32LeSSS: return 176
        case .i32LeSSR: return 177
        case .i32LeSRS: return 178
        case .i64LeSSS: return 179
        case .i64LeSSR: return 180
        case .i64LeSRS: return 181
        case .i32LeUSS: return 182
        case .i32LeUSR: return 183
        case .i32LeURS: return 184
        case .i64LeUSS: return 185
        case .i64LeUSR: return 186
        case .i64LeURS: return 187
        case .i32GeSSS: return 188
        case .i32GeSSR: return 189
        case .i32GeSRS: return 190
        case .i64GeSSS: return 191
        case .i64GeSSR: return 192
        case .i64GeSRS: return 193
        case .i32GeUSS: return 194
        case .i32GeUSR: return 195
        case .i32GeURS: return 196
        case .i64GeUSS: return 197
        case .i64GeUSR: return 198
        case .i64GeURS: return 199
        case .i32Clz: return 200
        case .i64Clz: return 201
        case .i32Ctz: return 202
        case .i64Ctz: return 203
        case .i32Popcnt: return 204
        case .i64Popcnt: return 205
        case .i32Eqz: return 206
        case .i64Eqz: return 207
        case .i32WrapI64: return 208
        case .i64ExtendI32S: return 209
        case .i64ExtendI32U: return 210
        case .i32Extend8S: return 211
        case .i64Extend8S: return 212
        case .i32Extend16S: return 213
        case .i64Extend16S: return 214
        case .i64Extend32S: return 215
        case .i32TruncF32S: return 216
        case .i32TruncF32U: return 217
        case .i32TruncSatF32S: return 218
        case .i32TruncSatF32U: return 219
        case .i32TruncF64S: return 220
        case .i32TruncF64U: return 221
        case .i32TruncSatF64S: return 222
        case .i32TruncSatF64U: return 223
        case .i64TruncF32S: return 224
        case .i64TruncF32U: return 225
        case .i64TruncSatF32S: return 226
        case .i64TruncSatF32U: return 227
        case .i64TruncF64S: return 228
        case .i64TruncF64U: return 229
        case .i64TruncSatF64S: return 230
        case .i64TruncSatF64U: return 231
        case .f32ConvertI32S: return 232
        case .f32ConvertI32U: return 233
        case .f32ConvertI64S: return 234
        case .f32ConvertI64U: return 235
        case .f64ConvertI32S: return 236
        case .f64ConvertI32U: return 237
        case .f64ConvertI64S: return 238
        case .f64ConvertI64U: return 239
        case .f32ReinterpretI32: return 240
        case .f64ReinterpretI64: return 241
        case .i32ReinterpretF32: return 242
        case .i64ReinterpretF64: return 243
        case .f32Add: return 244
        case .f64Add: return 245
        case .f32Sub: return 246
        case .f64Sub: return 247
        case .f32Mul: return 248
        case .f64Mul: return 249
        case .f32Div: return 250
        case .f64Div: return 251
        case .f32Min: return 252
        case .f64Min: return 253
        case .f32Max: return 254
        case .f64Max: return 255
        case .f32CopySign: return 256
        case .f64CopySign: return 257
        case .f32Eq: return 258
        case .f64Eq: return 259
        case .f32Ne: return 260
        case .f64Ne: return 261
        case .f32Lt: return 262
        case .f64Lt: return 263
        case .f32Gt: return 264
        case .f64Gt: return 265
        case .f32Le: return 266
        case .f64Le: return 267
        case .f32Ge: return 268
        case .f64Ge: return 269
        case .f32Abs: return 270
        case .f64Abs: return 271
        case .f32Neg: return 272
        case .f64Neg: return 273
        case .f32Ceil: return 274
        case .f64Ceil: return 275
        case .f32Floor: return 276
        case .f64Floor: return 277
        case .f32Trunc: return 278
        case .f64Trunc: return 279
        case .f32Nearest: return 280
        case .f64Nearest: return 281
        case .f32Sqrt: return 282
        case .f64Sqrt: return 283
        case .f64PromoteF32: return 284
        case .f32DemoteF64: return 285
        case .select: return 286
        case .refNull: return 287
        case .refIsNull: return 288
        case .refFunc: return 289
        case .tableGet: return 290
        case .tableSet: return 291
        case .tableSize: return 292
        case .tableGrow: return 293
        case .tableFill: return 294
        case .tableCopy: return 295
        case .tableInit: return 296
        case .tableElementDrop: return 297
        case .onEnter: return 298
        case .onExit: return 299
        }
    }
}


extension Instruction {
    static let i32Add = Commutative(ss: i32AddSS, sr: i32AddSR)
    static let i64Add = Commutative(ss: i64AddSS, sr: i64AddSR)
    static let i32Mul = Commutative(ss: i32MulSS, sr: i32MulSR)
    static let i64Mul = Commutative(ss: i64MulSS, sr: i64MulSR)
    static let i32And = Commutative(ss: i32AndSS, sr: i32AndSR)
    static let i64And = Commutative(ss: i64AndSS, sr: i64AndSR)
    static let i32Or = Commutative(ss: i32OrSS, sr: i32OrSR)
    static let i64Or = Commutative(ss: i64OrSS, sr: i64OrSR)
    static let i32Xor = Commutative(ss: i32XorSS, sr: i32XorSR)
    static let i64Xor = Commutative(ss: i64XorSS, sr: i64XorSR)
    static let i32Sub = NonCommutative(ss: i32SubSS, sr: i32SubSR, rs: i32SubRS)
    static let i64Sub = NonCommutative(ss: i64SubSS, sr: i64SubSR, rs: i64SubRS)
    static let i32Shl = NonCommutative(ss: i32ShlSS, sr: i32ShlSR, rs: i32ShlRS)
    static let i64Shl = NonCommutative(ss: i64ShlSS, sr: i64ShlSR, rs: i64ShlRS)
    static let i32ShrS = NonCommutative(ss: i32ShrSSS, sr: i32ShrSSR, rs: i32ShrSRS)
    static let i64ShrS = NonCommutative(ss: i64ShrSSS, sr: i64ShrSSR, rs: i64ShrSRS)
    static let i32ShrU = NonCommutative(ss: i32ShrUSS, sr: i32ShrUSR, rs: i32ShrURS)
    static let i64ShrU = NonCommutative(ss: i64ShrUSS, sr: i64ShrUSR, rs: i64ShrURS)
    static let i32Rotl = NonCommutative(ss: i32RotlSS, sr: i32RotlSR, rs: i32RotlRS)
    static let i64Rotl = NonCommutative(ss: i64RotlSS, sr: i64RotlSR, rs: i64RotlRS)
    static let i32Rotr = NonCommutative(ss: i32RotrSS, sr: i32RotrSR, rs: i32RotrRS)
    static let i64Rotr = NonCommutative(ss: i64RotrSS, sr: i64RotrSR, rs: i64RotrRS)
    static let i32DivS = NonCommutative(ss: i32DivSSS, sr: i32DivSSR, rs: i32DivSRS)
    static let i64DivS = NonCommutative(ss: i64DivSSS, sr: i64DivSSR, rs: i64DivSRS)
    static let i32DivU = NonCommutative(ss: i32DivUSS, sr: i32DivUSR, rs: i32DivURS)
    static let i64DivU = NonCommutative(ss: i64DivUSS, sr: i64DivUSR, rs: i64DivURS)
    static let i32RemS = NonCommutative(ss: i32RemSSS, sr: i32RemSSR, rs: i32RemSRS)
    static let i64RemS = NonCommutative(ss: i64RemSSS, sr: i64RemSSR, rs: i64RemSRS)
    static let i32RemU = NonCommutative(ss: i32RemUSS, sr: i32RemUSR, rs: i32RemURS)
    static let i64RemU = NonCommutative(ss: i64RemUSS, sr: i64RemUSR, rs: i64RemURS)
    static let i32Eq = Commutative(ss: i32EqSS, sr: i32EqSR)
    static let i64Eq = Commutative(ss: i64EqSS, sr: i64EqSR)
    static let i32Ne = Commutative(ss: i32NeSS, sr: i32NeSR)
    static let i64Ne = Commutative(ss: i64NeSS, sr: i64NeSR)
    static let i32LtS = NonCommutative(ss: i32LtSSS, sr: i32LtSSR, rs: i32LtSRS)
    static let i64LtS = NonCommutative(ss: i64LtSSS, sr: i64LtSSR, rs: i64LtSRS)
    static let i32LtU = NonCommutative(ss: i32LtUSS, sr: i32LtUSR, rs: i32LtURS)
    static let i64LtU = NonCommutative(ss: i64LtUSS, sr: i64LtUSR, rs: i64LtURS)
    static let i32GtS = NonCommutative(ss: i32GtSSS, sr: i32GtSSR, rs: i32GtSRS)
    static let i64GtS = NonCommutative(ss: i64GtSSS, sr: i64GtSSR, rs: i64GtSRS)
    static let i32GtU = NonCommutative(ss: i32GtUSS, sr: i32GtUSR, rs: i32GtURS)
    static let i64GtU = NonCommutative(ss: i64GtUSS, sr: i64GtUSR, rs: i64GtURS)
    static let i32LeS = NonCommutative(ss: i32LeSSS, sr: i32LeSSR, rs: i32LeSRS)
    static let i64LeS = NonCommutative(ss: i64LeSSS, sr: i64LeSSR, rs: i64LeSRS)
    static let i32LeU = NonCommutative(ss: i32LeUSS, sr: i32LeUSR, rs: i32LeURS)
    static let i64LeU = NonCommutative(ss: i64LeUSS, sr: i64LeUSR, rs: i64LeURS)
    static let i32GeS = NonCommutative(ss: i32GeSSS, sr: i32GeSSR, rs: i32GeSRS)
    static let i64GeS = NonCommutative(ss: i64GeSSS, sr: i64GeSSR, rs: i64GeSRS)
    static let i32GeU = NonCommutative(ss: i32GeUSS, sr: i32GeUSR, rs: i32GeURS)
    static let i64GeU = NonCommutative(ss: i64GeUSS, sr: i64GeUSR, rs: i64GeURS)
    static let i32Load = LoadInfo(s: i32LoadS, r: i32LoadR)
    static let i64Load = LoadInfo(s: i64LoadS, r: i64LoadR)
    static let f32Load = LoadInfo(s: f32LoadS, r: f32LoadR)
    static let f64Load = LoadInfo(s: f64LoadS, r: f64LoadR)
    static let i32Load8S = LoadInfo(s: i32Load8SS, r: i32Load8SR)
    static let i32Load8U = LoadInfo(s: i32Load8US, r: i32Load8UR)
    static let i32Load16S = LoadInfo(s: i32Load16SS, r: i32Load16SR)
    static let i32Load16U = LoadInfo(s: i32Load16US, r: i32Load16UR)
    static let i64Load8S = LoadInfo(s: i64Load8SS, r: i64Load8SR)
    static let i64Load8U = LoadInfo(s: i64Load8US, r: i64Load8UR)
    static let i64Load16S = LoadInfo(s: i64Load16SS, r: i64Load16SR)
    static let i64Load16U = LoadInfo(s: i64Load16US, r: i64Load16UR)
    static let i64Load32S = LoadInfo(s: i64Load32SS, r: i64Load32SR)
    static let i64Load32U = LoadInfo(s: i64Load32US, r: i64Load32UR)
}


import _CWasmKit.InlineCode

extension Instruction {
    private static let handlers: [UInt64] = withUnsafePointer(to: wasmkit_tc_exec_handlers) {
        let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
        return $0.withMemoryRebound(to: UInt64.self, capacity: count) {
            Array(UnsafeBufferPointer(start: $0, count: count))
        }
    }

    @inline(never)
    var handler: UInt64 {
        return Self.handlers[rawIndex]
    }
}
