// This file is generated by Utilities/generate_inst_dispatch.swift
extension ExecutionState {
    @inline(__always)
    mutating func doExecute(_ instruction: UInt64, sp: inout Sp, r0: inout R0, pc: inout Pc, md: inout Md, ms: inout Ms) throws {
        switch instruction {
        case 0: self.execute_copyStack(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 1: self.execute_copyR0ToStackI32(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 2: self.execute_copyR0ToStackI64(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 3: self.execute_copyR0ToStackF32(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 4: self.execute_copyR0ToStackF64(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 5: self.execute_globalGet(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 6: self.execute_globalSet(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 7: try self.execute_call(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 8: try self.execute_compilingCall(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 9: try self.execute_internalCall(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 10: try self.execute_callIndirect(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 11: try self.execute_unreachable(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 12: self.execute_nop(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 13: self.execute_br(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 14: self.execute_brIf(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 15: self.execute_brIfNot(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 16: self.execute_brTable(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 17: self.execute__return(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 18: try self.execute_endOfExecution(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 19: try self.execute_i32Load(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 20: try self.execute_i64Load(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 21: try self.execute_f32Load(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 22: try self.execute_f64Load(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 23: try self.execute_i32Load8S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 24: try self.execute_i32Load8U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 25: try self.execute_i32Load16S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 26: try self.execute_i32Load16U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 27: try self.execute_i64Load8S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 28: try self.execute_i64Load8U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 29: try self.execute_i64Load16S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 30: try self.execute_i64Load16U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 31: try self.execute_i64Load32S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 32: try self.execute_i64Load32U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 33: try self.execute_i32Store(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 34: try self.execute_i64Store(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 35: try self.execute_f32Store(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 36: try self.execute_f64Store(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 37: try self.execute_i32Store8(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 38: try self.execute_i32Store16(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 39: try self.execute_i64Store8(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 40: try self.execute_i64Store16(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 41: try self.execute_i64Store32(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 42: self.execute_memorySize(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 43: try self.execute_memoryGrow(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 44: try self.execute_memoryInit(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 45: self.execute_memoryDataDrop(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 46: try self.execute_memoryCopy(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 47: try self.execute_memoryFill(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 48: self.execute_const32(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 49: self.execute_const64(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 50: self.execute_i32AddSS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 51: self.execute_i32AddSR(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 52: self.execute_i64AddSS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 53: self.execute_i64AddSR(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 54: self.execute_i32Sub(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 55: self.execute_i64Sub(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 56: self.execute_i32Mul(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 57: self.execute_i64Mul(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 58: self.execute_i32And(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 59: self.execute_i64And(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 60: self.execute_i32Or(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 61: self.execute_i64Or(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 62: self.execute_i32Xor(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 63: self.execute_i64Xor(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 64: self.execute_i32Shl(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 65: self.execute_i64Shl(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 66: self.execute_i32ShrS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 67: self.execute_i64ShrS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 68: self.execute_i32ShrU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 69: self.execute_i64ShrU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 70: self.execute_i32Rotl(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 71: self.execute_i64Rotl(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 72: self.execute_i32Rotr(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 73: self.execute_i64Rotr(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 74: try self.execute_i32DivS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 75: try self.execute_i64DivS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 76: try self.execute_i32DivU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 77: try self.execute_i64DivU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 78: try self.execute_i32RemS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 79: try self.execute_i64RemS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 80: try self.execute_i32RemU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 81: try self.execute_i64RemU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 82: self.execute_i32Eq(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 83: self.execute_i64Eq(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 84: self.execute_i32Ne(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 85: self.execute_i64Ne(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 86: self.execute_i32LtS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 87: self.execute_i64LtS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 88: self.execute_i32LtU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 89: self.execute_i64LtU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 90: self.execute_i32GtS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 91: self.execute_i64GtS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 92: self.execute_i32GtU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 93: self.execute_i64GtU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 94: self.execute_i32LeS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 95: self.execute_i64LeS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 96: self.execute_i32LeU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 97: self.execute_i64LeU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 98: self.execute_i32GeS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 99: self.execute_i64GeS(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 100: self.execute_i32GeU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 101: self.execute_i64GeU(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 102: self.execute_i32Clz(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 103: self.execute_i64Clz(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 104: self.execute_i32Ctz(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 105: self.execute_i64Ctz(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 106: self.execute_i32Popcnt(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 107: self.execute_i64Popcnt(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 108: self.execute_i32Eqz(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 109: self.execute_i64Eqz(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 110: self.execute_i32WrapI64(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 111: self.execute_i64ExtendI32S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 112: self.execute_i64ExtendI32U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 113: self.execute_i32Extend8S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 114: self.execute_i64Extend8S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 115: self.execute_i32Extend16S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 116: self.execute_i64Extend16S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 117: self.execute_i64Extend32S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 118: try self.execute_i32TruncF32S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 119: try self.execute_i32TruncF32U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 120: try self.execute_i32TruncSatF32S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 121: try self.execute_i32TruncSatF32U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 122: try self.execute_i32TruncF64S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 123: try self.execute_i32TruncF64U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 124: try self.execute_i32TruncSatF64S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 125: try self.execute_i32TruncSatF64U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 126: try self.execute_i64TruncF32S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 127: try self.execute_i64TruncF32U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 128: try self.execute_i64TruncSatF32S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 129: try self.execute_i64TruncSatF32U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 130: try self.execute_i64TruncF64S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 131: try self.execute_i64TruncF64U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 132: try self.execute_i64TruncSatF64S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 133: try self.execute_i64TruncSatF64U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 134: self.execute_f32ConvertI32S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 135: self.execute_f32ConvertI32U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 136: self.execute_f32ConvertI64S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 137: self.execute_f32ConvertI64U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 138: self.execute_f64ConvertI32S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 139: self.execute_f64ConvertI32U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 140: self.execute_f64ConvertI64S(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 141: self.execute_f64ConvertI64U(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 142: self.execute_f32ReinterpretI32(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 143: self.execute_f64ReinterpretI64(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 144: self.execute_i32ReinterpretF32(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 145: self.execute_i64ReinterpretF64(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 146: self.execute_f32Add(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 147: self.execute_f64Add(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 148: self.execute_f32Sub(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 149: self.execute_f64Sub(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 150: self.execute_f32Mul(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 151: self.execute_f64Mul(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 152: self.execute_f32Div(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 153: self.execute_f64Div(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 154: self.execute_f32Min(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 155: self.execute_f64Min(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 156: self.execute_f32Max(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 157: self.execute_f64Max(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 158: self.execute_f32CopySign(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 159: self.execute_f64CopySign(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 160: self.execute_f32Eq(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 161: self.execute_f64Eq(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 162: self.execute_f32Ne(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 163: self.execute_f64Ne(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 164: self.execute_f32Lt(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 165: self.execute_f64Lt(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 166: self.execute_f32Gt(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 167: self.execute_f64Gt(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 168: self.execute_f32Le(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 169: self.execute_f64Le(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 170: self.execute_f32Ge(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 171: self.execute_f64Ge(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 172: self.execute_f32Abs(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 173: self.execute_f64Abs(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 174: self.execute_f32Neg(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 175: self.execute_f64Neg(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 176: self.execute_f32Ceil(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 177: self.execute_f64Ceil(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 178: self.execute_f32Floor(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 179: self.execute_f64Floor(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 180: self.execute_f32Trunc(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 181: self.execute_f64Trunc(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 182: self.execute_f32Nearest(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 183: self.execute_f64Nearest(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 184: self.execute_f32Sqrt(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 185: self.execute_f64Sqrt(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 186: self.execute_f64PromoteF32(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 187: self.execute_f32DemoteF64(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 188: self.execute_select(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 189: self.execute_refNull(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 190: self.execute_refIsNull(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 191: self.execute_refFunc(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 192: try self.execute_tableGet(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 193: try self.execute_tableSet(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 194: self.execute_tableSize(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 195: try self.execute_tableGrow(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 196: try self.execute_tableFill(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 197: try self.execute_tableCopy(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 198: try self.execute_tableInit(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 199: self.execute_tableElementDrop(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 200: self.execute_onEnter(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        case 201: self.execute_onExit(sp: &sp, r0: &r0, pc: &pc, md: &md, ms: &ms)
        default: preconditionFailure("Unknown instruction!?")

        }
    }
}

extension Instruction {
    var name: String {
        switch self {
        case .copyStack: return "copyStack"
        case .copyR0ToStackI32: return "copyR0ToStackI32"
        case .copyR0ToStackI64: return "copyR0ToStackI64"
        case .copyR0ToStackF32: return "copyR0ToStackF32"
        case .copyR0ToStackF64: return "copyR0ToStackF64"
        case .globalGet: return "globalGet"
        case .globalSet: return "globalSet"
        case .call: return "call"
        case .compilingCall: return "compilingCall"
        case .internalCall: return "internalCall"
        case .callIndirect: return "callIndirect"
        case .unreachable: return "unreachable"
        case .nop: return "nop"
        case .br: return "br"
        case .brIf: return "brIf"
        case .brIfNot: return "brIfNot"
        case .brTable: return "brTable"
        case ._return: return "_return"
        case .endOfExecution: return "endOfExecution"
        case .i32Load: return "i32Load"
        case .i64Load: return "i64Load"
        case .f32Load: return "f32Load"
        case .f64Load: return "f64Load"
        case .i32Load8S: return "i32Load8S"
        case .i32Load8U: return "i32Load8U"
        case .i32Load16S: return "i32Load16S"
        case .i32Load16U: return "i32Load16U"
        case .i64Load8S: return "i64Load8S"
        case .i64Load8U: return "i64Load8U"
        case .i64Load16S: return "i64Load16S"
        case .i64Load16U: return "i64Load16U"
        case .i64Load32S: return "i64Load32S"
        case .i64Load32U: return "i64Load32U"
        case .i32Store: return "i32Store"
        case .i64Store: return "i64Store"
        case .f32Store: return "f32Store"
        case .f64Store: return "f64Store"
        case .i32Store8: return "i32Store8"
        case .i32Store16: return "i32Store16"
        case .i64Store8: return "i64Store8"
        case .i64Store16: return "i64Store16"
        case .i64Store32: return "i64Store32"
        case .memorySize: return "memorySize"
        case .memoryGrow: return "memoryGrow"
        case .memoryInit: return "memoryInit"
        case .memoryDataDrop: return "memoryDataDrop"
        case .memoryCopy: return "memoryCopy"
        case .memoryFill: return "memoryFill"
        case .const32: return "const32"
        case .const64: return "const64"
        case .i32AddSS: return "i32AddSS"
        case .i32AddSR: return "i32AddSR"
        case .i64AddSS: return "i64AddSS"
        case .i64AddSR: return "i64AddSR"
        case .i32Sub: return "i32Sub"
        case .i64Sub: return "i64Sub"
        case .i32Mul: return "i32Mul"
        case .i64Mul: return "i64Mul"
        case .i32And: return "i32And"
        case .i64And: return "i64And"
        case .i32Or: return "i32Or"
        case .i64Or: return "i64Or"
        case .i32Xor: return "i32Xor"
        case .i64Xor: return "i64Xor"
        case .i32Shl: return "i32Shl"
        case .i64Shl: return "i64Shl"
        case .i32ShrS: return "i32ShrS"
        case .i64ShrS: return "i64ShrS"
        case .i32ShrU: return "i32ShrU"
        case .i64ShrU: return "i64ShrU"
        case .i32Rotl: return "i32Rotl"
        case .i64Rotl: return "i64Rotl"
        case .i32Rotr: return "i32Rotr"
        case .i64Rotr: return "i64Rotr"
        case .i32DivS: return "i32DivS"
        case .i64DivS: return "i64DivS"
        case .i32DivU: return "i32DivU"
        case .i64DivU: return "i64DivU"
        case .i32RemS: return "i32RemS"
        case .i64RemS: return "i64RemS"
        case .i32RemU: return "i32RemU"
        case .i64RemU: return "i64RemU"
        case .i32Eq: return "i32Eq"
        case .i64Eq: return "i64Eq"
        case .i32Ne: return "i32Ne"
        case .i64Ne: return "i64Ne"
        case .i32LtS: return "i32LtS"
        case .i64LtS: return "i64LtS"
        case .i32LtU: return "i32LtU"
        case .i64LtU: return "i64LtU"
        case .i32GtS: return "i32GtS"
        case .i64GtS: return "i64GtS"
        case .i32GtU: return "i32GtU"
        case .i64GtU: return "i64GtU"
        case .i32LeS: return "i32LeS"
        case .i64LeS: return "i64LeS"
        case .i32LeU: return "i32LeU"
        case .i64LeU: return "i64LeU"
        case .i32GeS: return "i32GeS"
        case .i64GeS: return "i64GeS"
        case .i32GeU: return "i32GeU"
        case .i64GeU: return "i64GeU"
        case .i32Clz: return "i32Clz"
        case .i64Clz: return "i64Clz"
        case .i32Ctz: return "i32Ctz"
        case .i64Ctz: return "i64Ctz"
        case .i32Popcnt: return "i32Popcnt"
        case .i64Popcnt: return "i64Popcnt"
        case .i32Eqz: return "i32Eqz"
        case .i64Eqz: return "i64Eqz"
        case .i32WrapI64: return "i32WrapI64"
        case .i64ExtendI32S: return "i64ExtendI32S"
        case .i64ExtendI32U: return "i64ExtendI32U"
        case .i32Extend8S: return "i32Extend8S"
        case .i64Extend8S: return "i64Extend8S"
        case .i32Extend16S: return "i32Extend16S"
        case .i64Extend16S: return "i64Extend16S"
        case .i64Extend32S: return "i64Extend32S"
        case .i32TruncF32S: return "i32TruncF32S"
        case .i32TruncF32U: return "i32TruncF32U"
        case .i32TruncSatF32S: return "i32TruncSatF32S"
        case .i32TruncSatF32U: return "i32TruncSatF32U"
        case .i32TruncF64S: return "i32TruncF64S"
        case .i32TruncF64U: return "i32TruncF64U"
        case .i32TruncSatF64S: return "i32TruncSatF64S"
        case .i32TruncSatF64U: return "i32TruncSatF64U"
        case .i64TruncF32S: return "i64TruncF32S"
        case .i64TruncF32U: return "i64TruncF32U"
        case .i64TruncSatF32S: return "i64TruncSatF32S"
        case .i64TruncSatF32U: return "i64TruncSatF32U"
        case .i64TruncF64S: return "i64TruncF64S"
        case .i64TruncF64U: return "i64TruncF64U"
        case .i64TruncSatF64S: return "i64TruncSatF64S"
        case .i64TruncSatF64U: return "i64TruncSatF64U"
        case .f32ConvertI32S: return "f32ConvertI32S"
        case .f32ConvertI32U: return "f32ConvertI32U"
        case .f32ConvertI64S: return "f32ConvertI64S"
        case .f32ConvertI64U: return "f32ConvertI64U"
        case .f64ConvertI32S: return "f64ConvertI32S"
        case .f64ConvertI32U: return "f64ConvertI32U"
        case .f64ConvertI64S: return "f64ConvertI64S"
        case .f64ConvertI64U: return "f64ConvertI64U"
        case .f32ReinterpretI32: return "f32ReinterpretI32"
        case .f64ReinterpretI64: return "f64ReinterpretI64"
        case .i32ReinterpretF32: return "i32ReinterpretF32"
        case .i64ReinterpretF64: return "i64ReinterpretF64"
        case .f32Add: return "f32Add"
        case .f64Add: return "f64Add"
        case .f32Sub: return "f32Sub"
        case .f64Sub: return "f64Sub"
        case .f32Mul: return "f32Mul"
        case .f64Mul: return "f64Mul"
        case .f32Div: return "f32Div"
        case .f64Div: return "f64Div"
        case .f32Min: return "f32Min"
        case .f64Min: return "f64Min"
        case .f32Max: return "f32Max"
        case .f64Max: return "f64Max"
        case .f32CopySign: return "f32CopySign"
        case .f64CopySign: return "f64CopySign"
        case .f32Eq: return "f32Eq"
        case .f64Eq: return "f64Eq"
        case .f32Ne: return "f32Ne"
        case .f64Ne: return "f64Ne"
        case .f32Lt: return "f32Lt"
        case .f64Lt: return "f64Lt"
        case .f32Gt: return "f32Gt"
        case .f64Gt: return "f64Gt"
        case .f32Le: return "f32Le"
        case .f64Le: return "f64Le"
        case .f32Ge: return "f32Ge"
        case .f64Ge: return "f64Ge"
        case .f32Abs: return "f32Abs"
        case .f64Abs: return "f64Abs"
        case .f32Neg: return "f32Neg"
        case .f64Neg: return "f64Neg"
        case .f32Ceil: return "f32Ceil"
        case .f64Ceil: return "f64Ceil"
        case .f32Floor: return "f32Floor"
        case .f64Floor: return "f64Floor"
        case .f32Trunc: return "f32Trunc"
        case .f64Trunc: return "f64Trunc"
        case .f32Nearest: return "f32Nearest"
        case .f64Nearest: return "f64Nearest"
        case .f32Sqrt: return "f32Sqrt"
        case .f64Sqrt: return "f64Sqrt"
        case .f64PromoteF32: return "f64PromoteF32"
        case .f32DemoteF64: return "f32DemoteF64"
        case .select: return "select"
        case .refNull: return "refNull"
        case .refIsNull: return "refIsNull"
        case .refFunc: return "refFunc"
        case .tableGet: return "tableGet"
        case .tableSet: return "tableSet"
        case .tableSize: return "tableSize"
        case .tableGrow: return "tableGrow"
        case .tableFill: return "tableFill"
        case .tableCopy: return "tableCopy"
        case .tableInit: return "tableInit"
        case .tableElementDrop: return "tableElementDrop"
        case .onEnter: return "onEnter"
        case .onExit: return "onExit"
        }
    }
}


extension ExecutionState {
    mutating func i32AddSS(sp: Sp, r0: inout R0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&r0, sp[binaryOperandSS.lhs].i32.add(sp[binaryOperandSS.rhs].i32)) }
    mutating func i32AddSR(sp: Sp, r0: inout R0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&r0, sp[binaryOperandSR.lhs].i32.add(readPRegI32(r0))) }
    mutating func i64AddSS(sp: Sp, r0: inout R0, binaryOperandSS: Instruction.BinaryOperandSS) { writePReg(&r0, sp[binaryOperandSS.lhs].i64.add(sp[binaryOperandSS.rhs].i64)) }
    mutating func i64AddSR(sp: Sp, r0: inout R0, binaryOperandSR: Instruction.BinaryOperandSR) { writePReg(&r0, sp[binaryOperandSR.lhs].i64.add(readPRegI64(r0))) }
    @inline(__always) mutating func i32Sub(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].sub(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64Sub(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].sub(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32Mul(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].mul(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64Mul(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].mul(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32And(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].and(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64And(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].and(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32Or(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].or(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64Or(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].or(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32Xor(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].xor(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64Xor(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].xor(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32Shl(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].shl(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64Shl(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].shl(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32ShrS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].shrS(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64ShrS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].shrS(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32ShrU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].shrU(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64ShrU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].shrU(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32Rotl(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].rotl(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64Rotl(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].rotl(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32Rotr(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].rotr(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64Rotr(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i64: binaryOperand.result] = sp[i64: binaryOperand.lhs].rotr(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32DivS(sp: Sp, binaryOperand: Instruction.BinaryOperand) throws {
        sp[i32: binaryOperand.result] = try sp[i32: binaryOperand.lhs].divS(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64DivS(sp: Sp, binaryOperand: Instruction.BinaryOperand) throws {
        sp[i64: binaryOperand.result] = try sp[i64: binaryOperand.lhs].divS(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32DivU(sp: Sp, binaryOperand: Instruction.BinaryOperand) throws {
        sp[i32: binaryOperand.result] = try sp[i32: binaryOperand.lhs].divU(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64DivU(sp: Sp, binaryOperand: Instruction.BinaryOperand) throws {
        sp[i64: binaryOperand.result] = try sp[i64: binaryOperand.lhs].divU(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32RemS(sp: Sp, binaryOperand: Instruction.BinaryOperand) throws {
        sp[i32: binaryOperand.result] = try sp[i32: binaryOperand.lhs].remS(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64RemS(sp: Sp, binaryOperand: Instruction.BinaryOperand) throws {
        sp[i64: binaryOperand.result] = try sp[i64: binaryOperand.lhs].remS(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32RemU(sp: Sp, binaryOperand: Instruction.BinaryOperand) throws {
        sp[i32: binaryOperand.result] = try sp[i32: binaryOperand.lhs].remU(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64RemU(sp: Sp, binaryOperand: Instruction.BinaryOperand) throws {
        sp[i64: binaryOperand.result] = try sp[i64: binaryOperand.lhs].remU(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32Eq(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].eq(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64Eq(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].eq(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32Ne(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].ne(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64Ne(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].ne(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32LtS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].ltS(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64LtS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].ltS(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32LtU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].ltU(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64LtU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].ltU(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32GtS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].gtS(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64GtS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].gtS(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32GtU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].gtU(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64GtU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].gtU(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32LeS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].leS(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64LeS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].leS(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32LeU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].leU(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64LeU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].leU(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32GeS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].geS(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64GeS(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].geS(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func i32GeU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i32: binaryOperand.lhs].geU(sp[i32: binaryOperand.rhs])
    }
    @inline(__always) mutating func i64GeU(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[i64: binaryOperand.lhs].geU(sp[i64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Add(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].add(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Add(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].add(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Sub(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].sub(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Sub(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].sub(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Mul(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].mul(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Mul(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].mul(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Div(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].div(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Div(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].div(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Min(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].min(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Min(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].min(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Max(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].max(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Max(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].max(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32CopySign(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f32: binaryOperand.result] = sp[f32: binaryOperand.lhs].copySign(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64CopySign(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[f64: binaryOperand.result] = sp[f64: binaryOperand.lhs].copySign(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Eq(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].eq(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Eq(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].eq(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Ne(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].ne(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Ne(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].ne(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Lt(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].lt(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Lt(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].lt(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Gt(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].gt(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Gt(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].gt(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Le(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].le(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Le(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].le(sp[f64: binaryOperand.rhs])
    }
    @inline(__always) mutating func f32Ge(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f32: binaryOperand.lhs].ge(sp[f32: binaryOperand.rhs])
    }
    @inline(__always) mutating func f64Ge(sp: Sp, binaryOperand: Instruction.BinaryOperand) {
        sp[i32: binaryOperand.result] = sp[f64: binaryOperand.lhs].ge(sp[f64: binaryOperand.rhs])
    }
    mutating func i32Clz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].clz
    }
    mutating func i64Clz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].clz
    }
    mutating func i32Ctz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].ctz
    }
    mutating func i64Ctz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].ctz
    }
    mutating func i32Popcnt(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].popcnt
    }
    mutating func i64Popcnt(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].popcnt
    }
    mutating func i32Eqz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].eqz
    }
    mutating func i64Eqz(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i64: unaryOperand.input].eqz
    }
    mutating func i32WrapI64(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i64: unaryOperand.input].wrap
    }
    mutating func i64ExtendI32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i32: unaryOperand.input].extendI32S
    }
    mutating func i64ExtendI32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i32: unaryOperand.input].extendI32U
    }
    mutating func i32Extend8S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].extend8S
    }
    mutating func i64Extend8S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].extend8S
    }
    mutating func i32Extend16S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[i32: unaryOperand.input].extend16S
    }
    mutating func i64Extend16S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].extend16S
    }
    mutating func i64Extend32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[i64: unaryOperand.input].extend32S
    }
    mutating func i32TruncF32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f32: unaryOperand.input].truncToI32S
    }
    mutating func i32TruncF32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f32: unaryOperand.input].truncToI32U
    }
    mutating func i32TruncSatF32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f32: unaryOperand.input].truncSatToI32S
    }
    mutating func i32TruncSatF32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f32: unaryOperand.input].truncSatToI32U
    }
    mutating func i32TruncF64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f64: unaryOperand.input].truncToI32S
    }
    mutating func i32TruncF64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f64: unaryOperand.input].truncToI32U
    }
    mutating func i32TruncSatF64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f64: unaryOperand.input].truncSatToI32S
    }
    mutating func i32TruncSatF64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i32: unaryOperand.result] = try sp[f64: unaryOperand.input].truncSatToI32U
    }
    mutating func i64TruncF32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f32: unaryOperand.input].truncToI64S
    }
    mutating func i64TruncF32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f32: unaryOperand.input].truncToI64U
    }
    mutating func i64TruncSatF32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f32: unaryOperand.input].truncSatToI64S
    }
    mutating func i64TruncSatF32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f32: unaryOperand.input].truncSatToI64U
    }
    mutating func i64TruncF64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f64: unaryOperand.input].truncToI64S
    }
    mutating func i64TruncF64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f64: unaryOperand.input].truncToI64U
    }
    mutating func i64TruncSatF64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f64: unaryOperand.input].truncSatToI64S
    }
    mutating func i64TruncSatF64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) throws {
        sp[i64: unaryOperand.result] = try sp[f64: unaryOperand.input].truncSatToI64U
    }
    mutating func f32ConvertI32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i32: unaryOperand.input].convertToF32S
    }
    mutating func f32ConvertI32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i32: unaryOperand.input].convertToF32U
    }
    mutating func f32ConvertI64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i64: unaryOperand.input].convertToF32S
    }
    mutating func f32ConvertI64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i64: unaryOperand.input].convertToF32U
    }
    mutating func f64ConvertI32S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i32: unaryOperand.input].convertToF64S
    }
    mutating func f64ConvertI32U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i32: unaryOperand.input].convertToF64U
    }
    mutating func f64ConvertI64S(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i64: unaryOperand.input].convertToF64S
    }
    mutating func f64ConvertI64U(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i64: unaryOperand.input].convertToF64U
    }
    mutating func f32ReinterpretI32(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[i32: unaryOperand.input].reinterpretToF32
    }
    mutating func f64ReinterpretI64(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[i64: unaryOperand.input].reinterpretToF64
    }
    mutating func i32ReinterpretF32(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i32: unaryOperand.result] = sp[f32: unaryOperand.input].reinterpretToI32
    }
    mutating func i64ReinterpretF64(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[i64: unaryOperand.result] = sp[f64: unaryOperand.input].reinterpretToI64
    }
    mutating func f32Abs(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].abs
    }
    mutating func f64Abs(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].abs
    }
    mutating func f32Neg(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].neg
    }
    mutating func f64Neg(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].neg
    }
    mutating func f32Ceil(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].ceil
    }
    mutating func f64Ceil(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].ceil
    }
    mutating func f32Floor(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].floor
    }
    mutating func f64Floor(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].floor
    }
    mutating func f32Trunc(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].trunc
    }
    mutating func f64Trunc(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].trunc
    }
    mutating func f32Nearest(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].nearest
    }
    mutating func f64Nearest(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].nearest
    }
    mutating func f32Sqrt(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f32: unaryOperand.input].sqrt
    }
    mutating func f64Sqrt(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f64: unaryOperand.input].sqrt
    }
    mutating func f64PromoteF32(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f64: unaryOperand.result] = sp[f32: unaryOperand.input].promoteF32
    }
    mutating func f32DemoteF64(sp: Sp, unaryOperand: Instruction.UnaryOperand) {
        sp[f32: unaryOperand.result] = sp[f64: unaryOperand.input].demoteF64
    }
    @inline(__always) mutating func i32Load(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: UInt32.self, castToValue: { .i32($0) })
    }
    @inline(__always) mutating func i64Load(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: UInt64.self, castToValue: { .i64($0) })
    }
    @inline(__always) mutating func f32Load(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: UInt32.self, castToValue: { .rawF32($0) })
    }
    @inline(__always) mutating func f64Load(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: UInt64.self, castToValue: { .rawF64($0) })
    }
    @inline(__always) mutating func i32Load8S(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: Int8.self, castToValue: { .init(signed: Int32($0)) })
    }
    @inline(__always) mutating func i32Load8U(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: UInt8.self, castToValue: { .i32(UInt32($0)) })
    }
    @inline(__always) mutating func i32Load16S(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: Int16.self, castToValue: { .init(signed: Int32($0)) })
    }
    @inline(__always) mutating func i32Load16U(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: UInt16.self, castToValue: { .i32(UInt32($0)) })
    }
    @inline(__always) mutating func i64Load8S(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: Int8.self, castToValue: { .init(signed: Int64($0)) })
    }
    @inline(__always) mutating func i64Load8U(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: UInt8.self, castToValue: { .i64(UInt64($0)) })
    }
    @inline(__always) mutating func i64Load16S(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: Int16.self, castToValue: { .init(signed: Int64($0)) })
    }
    @inline(__always) mutating func i64Load16U(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: UInt16.self, castToValue: { .i64(UInt64($0)) })
    }
    @inline(__always) mutating func i64Load32S(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: Int32.self, castToValue: { .init(signed: Int64($0)) })
    }
    @inline(__always) mutating func i64Load32U(sp: Sp, md: Md, ms: Ms, loadOperand: Instruction.LoadOperand) throws {
        return try memoryLoad(sp: sp, md: md, ms: ms, loadOperand: loadOperand, loadAs: UInt32.self, castToValue: { .i64(UInt64($0)) })
    }
    @inline(__always) mutating func i32Store(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { $0.i32 })
    }
    @inline(__always) mutating func i64Store(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { $0.i64 })
    }
    @inline(__always) mutating func f32Store(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { $0.rawF32 })
    }
    @inline(__always) mutating func f64Store(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { $0.rawF64 })
    }
    @inline(__always) mutating func i32Store8(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt8(truncatingIfNeeded: $0.i32) })
    }
    @inline(__always) mutating func i32Store16(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt16(truncatingIfNeeded: $0.i32) })
    }
    @inline(__always) mutating func i64Store8(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt8(truncatingIfNeeded: $0.i64) })
    }
    @inline(__always) mutating func i64Store16(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt16(truncatingIfNeeded: $0.i64) })
    }
    @inline(__always) mutating func i64Store32(sp: Sp, md: Md, ms: Ms, storeOperand: Instruction.StoreOperand) throws {
        return try memoryStore(sp: sp, md: md, ms: ms, storeOperand: storeOperand, castFromValue: { UInt32(truncatingIfNeeded: $0.i64) })
    }
}


extension ExecutionState {
    @_silgen_name("wasmkit_execute_copyStack") @inline(__always)
    mutating func execute_copyStack(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let copyStackOperand = Instruction.CopyStackOperand.load(from: &pc.pointee)
        self.copyStack(sp: sp.pointee, copyStackOperand: copyStackOperand)
    }
    @_silgen_name("wasmkit_execute_copyR0ToStackI32") @inline(__always)
    mutating func execute_copyR0ToStackI32(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dest = VReg.load(from: &pc.pointee)
        self.copyR0ToStackI32(sp: sp.pointee, r0: r0.pointee, dest: dest)
    }
    @_silgen_name("wasmkit_execute_copyR0ToStackI64") @inline(__always)
    mutating func execute_copyR0ToStackI64(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dest = VReg.load(from: &pc.pointee)
        self.copyR0ToStackI64(sp: sp.pointee, r0: r0.pointee, dest: dest)
    }
    @_silgen_name("wasmkit_execute_copyR0ToStackF32") @inline(__always)
    mutating func execute_copyR0ToStackF32(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dest = VReg.load(from: &pc.pointee)
        self.copyR0ToStackF32(sp: sp.pointee, r0: r0.pointee, dest: dest)
    }
    @_silgen_name("wasmkit_execute_copyR0ToStackF64") @inline(__always)
    mutating func execute_copyR0ToStackF64(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dest = VReg.load(from: &pc.pointee)
        self.copyR0ToStackF64(sp: sp.pointee, r0: r0.pointee, dest: dest)
    }
    @_silgen_name("wasmkit_execute_globalGet") @inline(__always)
    mutating func execute_globalGet(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let globalGetOperand = Instruction.GlobalGetOperand.load(from: &pc.pointee)
        self.globalGet(sp: sp.pointee, globalGetOperand: globalGetOperand)
    }
    @_silgen_name("wasmkit_execute_globalSet") @inline(__always)
    mutating func execute_globalSet(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let globalSetOperand = Instruction.GlobalSetOperand.load(from: &pc.pointee)
        self.globalSet(sp: sp.pointee, globalSetOperand: globalSetOperand)
    }
    @_silgen_name("wasmkit_execute_call") @inline(__always)
    mutating func execute_call(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let callOperand = Instruction.CallOperand.load(from: &pc.pointee)
        pc.pointee = try self.call(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, callOperand: callOperand)
    }
    @_silgen_name("wasmkit_execute_compilingCall") @inline(__always)
    mutating func execute_compilingCall(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let compilingCallOperand = Instruction.CompilingCallOperand.load(from: &pc.pointee)
        pc.pointee = try self.compilingCall(sp: &sp.pointee, pc: pc.pointee, compilingCallOperand: compilingCallOperand)
    }
    @_silgen_name("wasmkit_execute_internalCall") @inline(__always)
    mutating func execute_internalCall(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let internalCallOperand = Instruction.InternalCallOperand.load(from: &pc.pointee)
        pc.pointee = try self.internalCall(sp: &sp.pointee, pc: pc.pointee, internalCallOperand: internalCallOperand)
    }
    @_silgen_name("wasmkit_execute_callIndirect") @inline(__always)
    mutating func execute_callIndirect(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let callIndirectOperand = Instruction.CallIndirectOperand.load(from: &pc.pointee)
        pc.pointee = try self.callIndirect(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee, callIndirectOperand: callIndirectOperand)
    }
    @_silgen_name("wasmkit_execute_unreachable") @inline(__always)
    mutating func execute_unreachable(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        pc.pointee = try self.unreachable(sp: sp.pointee, pc: pc.pointee)
    }
    @_silgen_name("wasmkit_execute_nop") @inline(__always)
    mutating func execute_nop(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        self.nop(sp: sp.pointee)
    }
    @_silgen_name("wasmkit_execute_br") @inline(__always)
    mutating func execute_br(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let offset = Int32.load(from: &pc.pointee)
        pc.pointee = self.br(sp: sp.pointee, pc: pc.pointee, offset: offset)
    }
    @_silgen_name("wasmkit_execute_brIf") @inline(__always)
    mutating func execute_brIf(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let brIfOperand = Instruction.BrIfOperand.load(from: &pc.pointee)
        pc.pointee = self.brIf(sp: sp.pointee, pc: pc.pointee, brIfOperand: brIfOperand)
    }
    @_silgen_name("wasmkit_execute_brIfNot") @inline(__always)
    mutating func execute_brIfNot(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let brIfOperand = Instruction.BrIfOperand.load(from: &pc.pointee)
        pc.pointee = self.brIfNot(sp: sp.pointee, pc: pc.pointee, brIfOperand: brIfOperand)
    }
    @_silgen_name("wasmkit_execute_brTable") @inline(__always)
    mutating func execute_brTable(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let brTable = Instruction.BrTable.load(from: &pc.pointee)
        pc.pointee = self.brTable(sp: sp.pointee, pc: pc.pointee, brTable: brTable)
    }
    @_silgen_name("wasmkit_execute__return") @inline(__always)
    mutating func execute__return(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        pc.pointee = self._return(sp: &sp.pointee, pc: pc.pointee, md: &md.pointee, ms: &ms.pointee)
    }
    @_silgen_name("wasmkit_execute_endOfExecution") @inline(__always)
    mutating func execute_endOfExecution(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        pc.pointee = try self.endOfExecution(sp: &sp.pointee, pc: pc.pointee)
    }
    @_silgen_name("wasmkit_execute_i32Load") @inline(__always)
    mutating func execute_i32Load(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i32Load(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i64Load") @inline(__always)
    mutating func execute_i64Load(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i64Load(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_f32Load") @inline(__always)
    mutating func execute_f32Load(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.f32Load(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_f64Load") @inline(__always)
    mutating func execute_f64Load(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.f64Load(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i32Load8S") @inline(__always)
    mutating func execute_i32Load8S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i32Load8S(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i32Load8U") @inline(__always)
    mutating func execute_i32Load8U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i32Load8U(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i32Load16S") @inline(__always)
    mutating func execute_i32Load16S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i32Load16S(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i32Load16U") @inline(__always)
    mutating func execute_i32Load16U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i32Load16U(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i64Load8S") @inline(__always)
    mutating func execute_i64Load8S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i64Load8S(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i64Load8U") @inline(__always)
    mutating func execute_i64Load8U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i64Load8U(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i64Load16S") @inline(__always)
    mutating func execute_i64Load16S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i64Load16S(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i64Load16U") @inline(__always)
    mutating func execute_i64Load16U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i64Load16U(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i64Load32S") @inline(__always)
    mutating func execute_i64Load32S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i64Load32S(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i64Load32U") @inline(__always)
    mutating func execute_i64Load32U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let loadOperand = Instruction.LoadOperand.load(from: &pc.pointee)
        try self.i64Load32U(sp: sp.pointee, md: md.pointee, ms: ms.pointee, loadOperand: loadOperand)
    }
    @_silgen_name("wasmkit_execute_i32Store") @inline(__always)
    mutating func execute_i32Store(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i32Store(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i64Store") @inline(__always)
    mutating func execute_i64Store(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i64Store(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_f32Store") @inline(__always)
    mutating func execute_f32Store(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.f32Store(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_f64Store") @inline(__always)
    mutating func execute_f64Store(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.f64Store(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i32Store8") @inline(__always)
    mutating func execute_i32Store8(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i32Store8(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i32Store16") @inline(__always)
    mutating func execute_i32Store16(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i32Store16(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i64Store8") @inline(__always)
    mutating func execute_i64Store8(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i64Store8(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i64Store16") @inline(__always)
    mutating func execute_i64Store16(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i64Store16(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_i64Store32") @inline(__always)
    mutating func execute_i64Store32(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let storeOperand = Instruction.StoreOperand.load(from: &pc.pointee)
        try self.i64Store32(sp: sp.pointee, md: md.pointee, ms: ms.pointee, storeOperand: storeOperand)
    }
    @_silgen_name("wasmkit_execute_memorySize") @inline(__always)
    mutating func execute_memorySize(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let memorySizeOperand = Instruction.MemorySizeOperand.load(from: &pc.pointee)
        self.memorySize(sp: sp.pointee, memorySizeOperand: memorySizeOperand)
    }
    @_silgen_name("wasmkit_execute_memoryGrow") @inline(__always)
    mutating func execute_memoryGrow(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let memoryGrowOperand = Instruction.MemoryGrowOperand.load(from: &pc.pointee)
        try self.memoryGrow(sp: sp.pointee, md: &md.pointee, ms: &ms.pointee, memoryGrowOperand: memoryGrowOperand)
    }
    @_silgen_name("wasmkit_execute_memoryInit") @inline(__always)
    mutating func execute_memoryInit(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let memoryInitOperand = Instruction.MemoryInitOperand.load(from: &pc.pointee)
        try self.memoryInit(sp: sp.pointee, memoryInitOperand: memoryInitOperand)
    }
    @_silgen_name("wasmkit_execute_memoryDataDrop") @inline(__always)
    mutating func execute_memoryDataDrop(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let dataIndex = DataIndex.load(from: &pc.pointee)
        self.memoryDataDrop(sp: sp.pointee, dataIndex: dataIndex)
    }
    @_silgen_name("wasmkit_execute_memoryCopy") @inline(__always)
    mutating func execute_memoryCopy(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let memoryCopyOperand = Instruction.MemoryCopyOperand.load(from: &pc.pointee)
        try self.memoryCopy(sp: sp.pointee, memoryCopyOperand: memoryCopyOperand)
    }
    @_silgen_name("wasmkit_execute_memoryFill") @inline(__always)
    mutating func execute_memoryFill(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let memoryFillOperand = Instruction.MemoryFillOperand.load(from: &pc.pointee)
        try self.memoryFill(sp: sp.pointee, memoryFillOperand: memoryFillOperand)
    }
    @_silgen_name("wasmkit_execute_const32") @inline(__always)
    mutating func execute_const32(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let const32Operand = Instruction.Const32Operand.load(from: &pc.pointee)
        self.const32(sp: sp.pointee, const32Operand: const32Operand)
    }
    @_silgen_name("wasmkit_execute_const64") @inline(__always)
    mutating func execute_const64(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let const64Operand = Instruction.Const64Operand.load(from: &pc.pointee)
        self.const64(sp: sp.pointee, const64Operand: const64Operand)
    }
    @_silgen_name("wasmkit_execute_i32AddSS") @inline(__always)
    mutating func execute_i32AddSS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i32AddSS(sp: sp.pointee, r0: &r0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i32AddSR") @inline(__always)
    mutating func execute_i32AddSR(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i32AddSR(sp: sp.pointee, r0: &r0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i64AddSS") @inline(__always)
    mutating func execute_i64AddSS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSS = Instruction.BinaryOperandSS.load(from: &pc.pointee)
        self.i64AddSS(sp: sp.pointee, r0: &r0.pointee, binaryOperandSS: binaryOperandSS)
    }
    @_silgen_name("wasmkit_execute_i64AddSR") @inline(__always)
    mutating func execute_i64AddSR(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperandSR = Instruction.BinaryOperandSR.load(from: &pc.pointee)
        self.i64AddSR(sp: sp.pointee, r0: &r0.pointee, binaryOperandSR: binaryOperandSR)
    }
    @_silgen_name("wasmkit_execute_i32Sub") @inline(__always)
    mutating func execute_i32Sub(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32Sub(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Sub") @inline(__always)
    mutating func execute_i64Sub(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64Sub(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Mul") @inline(__always)
    mutating func execute_i32Mul(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32Mul(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Mul") @inline(__always)
    mutating func execute_i64Mul(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64Mul(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32And") @inline(__always)
    mutating func execute_i32And(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32And(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64And") @inline(__always)
    mutating func execute_i64And(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64And(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Or") @inline(__always)
    mutating func execute_i32Or(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32Or(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Or") @inline(__always)
    mutating func execute_i64Or(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64Or(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Xor") @inline(__always)
    mutating func execute_i32Xor(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32Xor(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Xor") @inline(__always)
    mutating func execute_i64Xor(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64Xor(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Shl") @inline(__always)
    mutating func execute_i32Shl(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32Shl(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Shl") @inline(__always)
    mutating func execute_i64Shl(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64Shl(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32ShrS") @inline(__always)
    mutating func execute_i32ShrS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32ShrS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64ShrS") @inline(__always)
    mutating func execute_i64ShrS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64ShrS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32ShrU") @inline(__always)
    mutating func execute_i32ShrU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32ShrU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64ShrU") @inline(__always)
    mutating func execute_i64ShrU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64ShrU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Rotl") @inline(__always)
    mutating func execute_i32Rotl(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32Rotl(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Rotl") @inline(__always)
    mutating func execute_i64Rotl(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64Rotl(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Rotr") @inline(__always)
    mutating func execute_i32Rotr(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32Rotr(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Rotr") @inline(__always)
    mutating func execute_i64Rotr(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64Rotr(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32DivS") @inline(__always)
    mutating func execute_i32DivS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        try self.i32DivS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64DivS") @inline(__always)
    mutating func execute_i64DivS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        try self.i64DivS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32DivU") @inline(__always)
    mutating func execute_i32DivU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        try self.i32DivU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64DivU") @inline(__always)
    mutating func execute_i64DivU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        try self.i64DivU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32RemS") @inline(__always)
    mutating func execute_i32RemS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        try self.i32RemS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64RemS") @inline(__always)
    mutating func execute_i64RemS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        try self.i64RemS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32RemU") @inline(__always)
    mutating func execute_i32RemU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        try self.i32RemU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64RemU") @inline(__always)
    mutating func execute_i64RemU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        try self.i64RemU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Eq") @inline(__always)
    mutating func execute_i32Eq(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32Eq(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Eq") @inline(__always)
    mutating func execute_i64Eq(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64Eq(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Ne") @inline(__always)
    mutating func execute_i32Ne(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32Ne(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Ne") @inline(__always)
    mutating func execute_i64Ne(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64Ne(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32LtS") @inline(__always)
    mutating func execute_i32LtS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32LtS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64LtS") @inline(__always)
    mutating func execute_i64LtS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64LtS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32LtU") @inline(__always)
    mutating func execute_i32LtU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32LtU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64LtU") @inline(__always)
    mutating func execute_i64LtU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64LtU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32GtS") @inline(__always)
    mutating func execute_i32GtS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32GtS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64GtS") @inline(__always)
    mutating func execute_i64GtS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64GtS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32GtU") @inline(__always)
    mutating func execute_i32GtU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32GtU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64GtU") @inline(__always)
    mutating func execute_i64GtU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64GtU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32LeS") @inline(__always)
    mutating func execute_i32LeS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32LeS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64LeS") @inline(__always)
    mutating func execute_i64LeS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64LeS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32LeU") @inline(__always)
    mutating func execute_i32LeU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32LeU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64LeU") @inline(__always)
    mutating func execute_i64LeU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64LeU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32GeS") @inline(__always)
    mutating func execute_i32GeS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32GeS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64GeS") @inline(__always)
    mutating func execute_i64GeS(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64GeS(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32GeU") @inline(__always)
    mutating func execute_i32GeU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i32GeU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64GeU") @inline(__always)
    mutating func execute_i64GeU(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.i64GeU(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Clz") @inline(__always)
    mutating func execute_i32Clz(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Clz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Clz") @inline(__always)
    mutating func execute_i64Clz(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Clz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Ctz") @inline(__always)
    mutating func execute_i32Ctz(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Ctz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Ctz") @inline(__always)
    mutating func execute_i64Ctz(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Ctz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Popcnt") @inline(__always)
    mutating func execute_i32Popcnt(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Popcnt(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Popcnt") @inline(__always)
    mutating func execute_i64Popcnt(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Popcnt(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Eqz") @inline(__always)
    mutating func execute_i32Eqz(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Eqz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Eqz") @inline(__always)
    mutating func execute_i64Eqz(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Eqz(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32WrapI64") @inline(__always)
    mutating func execute_i32WrapI64(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32WrapI64(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64ExtendI32S") @inline(__always)
    mutating func execute_i64ExtendI32S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64ExtendI32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64ExtendI32U") @inline(__always)
    mutating func execute_i64ExtendI32U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64ExtendI32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Extend8S") @inline(__always)
    mutating func execute_i32Extend8S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Extend8S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Extend8S") @inline(__always)
    mutating func execute_i64Extend8S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Extend8S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32Extend16S") @inline(__always)
    mutating func execute_i32Extend16S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32Extend16S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Extend16S") @inline(__always)
    mutating func execute_i64Extend16S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Extend16S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64Extend32S") @inline(__always)
    mutating func execute_i64Extend32S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64Extend32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncF32S") @inline(__always)
    mutating func execute_i32TruncF32S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncF32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncF32U") @inline(__always)
    mutating func execute_i32TruncF32U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncF32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF32S") @inline(__always)
    mutating func execute_i32TruncSatF32S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncSatF32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF32U") @inline(__always)
    mutating func execute_i32TruncSatF32U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncSatF32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncF64S") @inline(__always)
    mutating func execute_i32TruncF64S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncF64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncF64U") @inline(__always)
    mutating func execute_i32TruncF64U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncF64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF64S") @inline(__always)
    mutating func execute_i32TruncSatF64S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncSatF64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32TruncSatF64U") @inline(__always)
    mutating func execute_i32TruncSatF64U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i32TruncSatF64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncF32S") @inline(__always)
    mutating func execute_i64TruncF32S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncF32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncF32U") @inline(__always)
    mutating func execute_i64TruncF32U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncF32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF32S") @inline(__always)
    mutating func execute_i64TruncSatF32S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncSatF32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF32U") @inline(__always)
    mutating func execute_i64TruncSatF32U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncSatF32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncF64S") @inline(__always)
    mutating func execute_i64TruncF64S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncF64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncF64U") @inline(__always)
    mutating func execute_i64TruncF64U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncF64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF64S") @inline(__always)
    mutating func execute_i64TruncSatF64S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncSatF64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64TruncSatF64U") @inline(__always)
    mutating func execute_i64TruncSatF64U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        try self.i64TruncSatF64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ConvertI32S") @inline(__always)
    mutating func execute_f32ConvertI32S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ConvertI32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ConvertI32U") @inline(__always)
    mutating func execute_f32ConvertI32U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ConvertI32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ConvertI64S") @inline(__always)
    mutating func execute_f32ConvertI64S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ConvertI64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ConvertI64U") @inline(__always)
    mutating func execute_f32ConvertI64U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ConvertI64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ConvertI32S") @inline(__always)
    mutating func execute_f64ConvertI32S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ConvertI32S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ConvertI32U") @inline(__always)
    mutating func execute_f64ConvertI32U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ConvertI32U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ConvertI64S") @inline(__always)
    mutating func execute_f64ConvertI64S(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ConvertI64S(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ConvertI64U") @inline(__always)
    mutating func execute_f64ConvertI64U(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ConvertI64U(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32ReinterpretI32") @inline(__always)
    mutating func execute_f32ReinterpretI32(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32ReinterpretI32(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64ReinterpretI64") @inline(__always)
    mutating func execute_f64ReinterpretI64(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64ReinterpretI64(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i32ReinterpretF32") @inline(__always)
    mutating func execute_i32ReinterpretF32(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i32ReinterpretF32(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_i64ReinterpretF64") @inline(__always)
    mutating func execute_i64ReinterpretF64(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.i64ReinterpretF64(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Add") @inline(__always)
    mutating func execute_f32Add(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Add(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Add") @inline(__always)
    mutating func execute_f64Add(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Add(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Sub") @inline(__always)
    mutating func execute_f32Sub(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Sub(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Sub") @inline(__always)
    mutating func execute_f64Sub(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Sub(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Mul") @inline(__always)
    mutating func execute_f32Mul(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Mul(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Mul") @inline(__always)
    mutating func execute_f64Mul(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Mul(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Div") @inline(__always)
    mutating func execute_f32Div(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Div(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Div") @inline(__always)
    mutating func execute_f64Div(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Div(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Min") @inline(__always)
    mutating func execute_f32Min(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Min(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Min") @inline(__always)
    mutating func execute_f64Min(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Min(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Max") @inline(__always)
    mutating func execute_f32Max(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Max(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Max") @inline(__always)
    mutating func execute_f64Max(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Max(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32CopySign") @inline(__always)
    mutating func execute_f32CopySign(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32CopySign(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64CopySign") @inline(__always)
    mutating func execute_f64CopySign(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64CopySign(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Eq") @inline(__always)
    mutating func execute_f32Eq(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Eq(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Eq") @inline(__always)
    mutating func execute_f64Eq(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Eq(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Ne") @inline(__always)
    mutating func execute_f32Ne(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Ne(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Ne") @inline(__always)
    mutating func execute_f64Ne(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Ne(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Lt") @inline(__always)
    mutating func execute_f32Lt(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Lt(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Lt") @inline(__always)
    mutating func execute_f64Lt(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Lt(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Gt") @inline(__always)
    mutating func execute_f32Gt(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Gt(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Gt") @inline(__always)
    mutating func execute_f64Gt(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Gt(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Le") @inline(__always)
    mutating func execute_f32Le(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Le(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Le") @inline(__always)
    mutating func execute_f64Le(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Le(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Ge") @inline(__always)
    mutating func execute_f32Ge(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f32Ge(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Ge") @inline(__always)
    mutating func execute_f64Ge(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let binaryOperand = Instruction.BinaryOperand.load(from: &pc.pointee)
        self.f64Ge(sp: sp.pointee, binaryOperand: binaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Abs") @inline(__always)
    mutating func execute_f32Abs(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Abs(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Abs") @inline(__always)
    mutating func execute_f64Abs(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Abs(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Neg") @inline(__always)
    mutating func execute_f32Neg(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Neg(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Neg") @inline(__always)
    mutating func execute_f64Neg(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Neg(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Ceil") @inline(__always)
    mutating func execute_f32Ceil(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Ceil(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Ceil") @inline(__always)
    mutating func execute_f64Ceil(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Ceil(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Floor") @inline(__always)
    mutating func execute_f32Floor(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Floor(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Floor") @inline(__always)
    mutating func execute_f64Floor(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Floor(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Trunc") @inline(__always)
    mutating func execute_f32Trunc(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Trunc(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Trunc") @inline(__always)
    mutating func execute_f64Trunc(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Trunc(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Nearest") @inline(__always)
    mutating func execute_f32Nearest(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Nearest(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Nearest") @inline(__always)
    mutating func execute_f64Nearest(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Nearest(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32Sqrt") @inline(__always)
    mutating func execute_f32Sqrt(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32Sqrt(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64Sqrt") @inline(__always)
    mutating func execute_f64Sqrt(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64Sqrt(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f64PromoteF32") @inline(__always)
    mutating func execute_f64PromoteF32(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f64PromoteF32(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_f32DemoteF64") @inline(__always)
    mutating func execute_f32DemoteF64(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let unaryOperand = Instruction.UnaryOperand.load(from: &pc.pointee)
        self.f32DemoteF64(sp: sp.pointee, unaryOperand: unaryOperand)
    }
    @_silgen_name("wasmkit_execute_select") @inline(__always)
    mutating func execute_select(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let selectOperand = Instruction.SelectOperand.load(from: &pc.pointee)
        self.select(sp: sp.pointee, selectOperand: selectOperand)
    }
    @_silgen_name("wasmkit_execute_refNull") @inline(__always)
    mutating func execute_refNull(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let refNullOperand = Instruction.RefNullOperand.load(from: &pc.pointee)
        self.refNull(sp: sp.pointee, refNullOperand: refNullOperand)
    }
    @_silgen_name("wasmkit_execute_refIsNull") @inline(__always)
    mutating func execute_refIsNull(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let refIsNullOperand = Instruction.RefIsNullOperand.load(from: &pc.pointee)
        self.refIsNull(sp: sp.pointee, refIsNullOperand: refIsNullOperand)
    }
    @_silgen_name("wasmkit_execute_refFunc") @inline(__always)
    mutating func execute_refFunc(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let refFuncOperand = Instruction.RefFuncOperand.load(from: &pc.pointee)
        self.refFunc(sp: sp.pointee, refFuncOperand: refFuncOperand)
    }
    @_silgen_name("wasmkit_execute_tableGet") @inline(__always)
    mutating func execute_tableGet(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableGetOperand = Instruction.TableGetOperand.load(from: &pc.pointee)
        try self.tableGet(sp: sp.pointee, tableGetOperand: tableGetOperand)
    }
    @_silgen_name("wasmkit_execute_tableSet") @inline(__always)
    mutating func execute_tableSet(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableSetOperand = Instruction.TableSetOperand.load(from: &pc.pointee)
        try self.tableSet(sp: sp.pointee, tableSetOperand: tableSetOperand)
    }
    @_silgen_name("wasmkit_execute_tableSize") @inline(__always)
    mutating func execute_tableSize(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let tableSizeOperand = Instruction.TableSizeOperand.load(from: &pc.pointee)
        self.tableSize(sp: sp.pointee, tableSizeOperand: tableSizeOperand)
    }
    @_silgen_name("wasmkit_execute_tableGrow") @inline(__always)
    mutating func execute_tableGrow(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableGrowOperand = Instruction.TableGrowOperand.load(from: &pc.pointee)
        try self.tableGrow(sp: sp.pointee, tableGrowOperand: tableGrowOperand)
    }
    @_silgen_name("wasmkit_execute_tableFill") @inline(__always)
    mutating func execute_tableFill(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableFillOperand = Instruction.TableFillOperand.load(from: &pc.pointee)
        try self.tableFill(sp: sp.pointee, tableFillOperand: tableFillOperand)
    }
    @_silgen_name("wasmkit_execute_tableCopy") @inline(__always)
    mutating func execute_tableCopy(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableCopyOperand = Instruction.TableCopyOperand.load(from: &pc.pointee)
        try self.tableCopy(sp: sp.pointee, tableCopyOperand: tableCopyOperand)
    }
    @_silgen_name("wasmkit_execute_tableInit") @inline(__always)
    mutating func execute_tableInit(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) throws {
        let tableInitOperand = Instruction.TableInitOperand.load(from: &pc.pointee)
        try self.tableInit(sp: sp.pointee, tableInitOperand: tableInitOperand)
    }
    @_silgen_name("wasmkit_execute_tableElementDrop") @inline(__always)
    mutating func execute_tableElementDrop(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let elementIndex = ElementIndex.load(from: &pc.pointee)
        self.tableElementDrop(sp: sp.pointee, elementIndex: elementIndex)
    }
    @_silgen_name("wasmkit_execute_onEnter") @inline(__always)
    mutating func execute_onEnter(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let onEnterOperand = Instruction.OnEnterOperand.load(from: &pc.pointee)
        self.onEnter(sp: sp.pointee, onEnterOperand: onEnterOperand)
    }
    @_silgen_name("wasmkit_execute_onExit") @inline(__always)
    mutating func execute_onExit(sp: UnsafeMutablePointer<Sp>, r0: UnsafeMutablePointer<R0>, pc: UnsafeMutablePointer<Pc>, md: UnsafeMutablePointer<Md>, ms: UnsafeMutablePointer<Ms>) {
        let onExitOperand = Instruction.OnExitOperand.load(from: &pc.pointee)
        self.onExit(sp: sp.pointee, onExitOperand: onExitOperand)
    }
}

extension Instruction {
    var rawIndex: Int {
        switch self {
        case .copyStack: return 0
        case .copyR0ToStackI32: return 1
        case .copyR0ToStackI64: return 2
        case .copyR0ToStackF32: return 3
        case .copyR0ToStackF64: return 4
        case .globalGet: return 5
        case .globalSet: return 6
        case .call: return 7
        case .compilingCall: return 8
        case .internalCall: return 9
        case .callIndirect: return 10
        case .unreachable: return 11
        case .nop: return 12
        case .br: return 13
        case .brIf: return 14
        case .brIfNot: return 15
        case .brTable: return 16
        case ._return: return 17
        case .endOfExecution: return 18
        case .i32Load: return 19
        case .i64Load: return 20
        case .f32Load: return 21
        case .f64Load: return 22
        case .i32Load8S: return 23
        case .i32Load8U: return 24
        case .i32Load16S: return 25
        case .i32Load16U: return 26
        case .i64Load8S: return 27
        case .i64Load8U: return 28
        case .i64Load16S: return 29
        case .i64Load16U: return 30
        case .i64Load32S: return 31
        case .i64Load32U: return 32
        case .i32Store: return 33
        case .i64Store: return 34
        case .f32Store: return 35
        case .f64Store: return 36
        case .i32Store8: return 37
        case .i32Store16: return 38
        case .i64Store8: return 39
        case .i64Store16: return 40
        case .i64Store32: return 41
        case .memorySize: return 42
        case .memoryGrow: return 43
        case .memoryInit: return 44
        case .memoryDataDrop: return 45
        case .memoryCopy: return 46
        case .memoryFill: return 47
        case .const32: return 48
        case .const64: return 49
        case .i32AddSS: return 50
        case .i32AddSR: return 51
        case .i64AddSS: return 52
        case .i64AddSR: return 53
        case .i32Sub: return 54
        case .i64Sub: return 55
        case .i32Mul: return 56
        case .i64Mul: return 57
        case .i32And: return 58
        case .i64And: return 59
        case .i32Or: return 60
        case .i64Or: return 61
        case .i32Xor: return 62
        case .i64Xor: return 63
        case .i32Shl: return 64
        case .i64Shl: return 65
        case .i32ShrS: return 66
        case .i64ShrS: return 67
        case .i32ShrU: return 68
        case .i64ShrU: return 69
        case .i32Rotl: return 70
        case .i64Rotl: return 71
        case .i32Rotr: return 72
        case .i64Rotr: return 73
        case .i32DivS: return 74
        case .i64DivS: return 75
        case .i32DivU: return 76
        case .i64DivU: return 77
        case .i32RemS: return 78
        case .i64RemS: return 79
        case .i32RemU: return 80
        case .i64RemU: return 81
        case .i32Eq: return 82
        case .i64Eq: return 83
        case .i32Ne: return 84
        case .i64Ne: return 85
        case .i32LtS: return 86
        case .i64LtS: return 87
        case .i32LtU: return 88
        case .i64LtU: return 89
        case .i32GtS: return 90
        case .i64GtS: return 91
        case .i32GtU: return 92
        case .i64GtU: return 93
        case .i32LeS: return 94
        case .i64LeS: return 95
        case .i32LeU: return 96
        case .i64LeU: return 97
        case .i32GeS: return 98
        case .i64GeS: return 99
        case .i32GeU: return 100
        case .i64GeU: return 101
        case .i32Clz: return 102
        case .i64Clz: return 103
        case .i32Ctz: return 104
        case .i64Ctz: return 105
        case .i32Popcnt: return 106
        case .i64Popcnt: return 107
        case .i32Eqz: return 108
        case .i64Eqz: return 109
        case .i32WrapI64: return 110
        case .i64ExtendI32S: return 111
        case .i64ExtendI32U: return 112
        case .i32Extend8S: return 113
        case .i64Extend8S: return 114
        case .i32Extend16S: return 115
        case .i64Extend16S: return 116
        case .i64Extend32S: return 117
        case .i32TruncF32S: return 118
        case .i32TruncF32U: return 119
        case .i32TruncSatF32S: return 120
        case .i32TruncSatF32U: return 121
        case .i32TruncF64S: return 122
        case .i32TruncF64U: return 123
        case .i32TruncSatF64S: return 124
        case .i32TruncSatF64U: return 125
        case .i64TruncF32S: return 126
        case .i64TruncF32U: return 127
        case .i64TruncSatF32S: return 128
        case .i64TruncSatF32U: return 129
        case .i64TruncF64S: return 130
        case .i64TruncF64U: return 131
        case .i64TruncSatF64S: return 132
        case .i64TruncSatF64U: return 133
        case .f32ConvertI32S: return 134
        case .f32ConvertI32U: return 135
        case .f32ConvertI64S: return 136
        case .f32ConvertI64U: return 137
        case .f64ConvertI32S: return 138
        case .f64ConvertI32U: return 139
        case .f64ConvertI64S: return 140
        case .f64ConvertI64U: return 141
        case .f32ReinterpretI32: return 142
        case .f64ReinterpretI64: return 143
        case .i32ReinterpretF32: return 144
        case .i64ReinterpretF64: return 145
        case .f32Add: return 146
        case .f64Add: return 147
        case .f32Sub: return 148
        case .f64Sub: return 149
        case .f32Mul: return 150
        case .f64Mul: return 151
        case .f32Div: return 152
        case .f64Div: return 153
        case .f32Min: return 154
        case .f64Min: return 155
        case .f32Max: return 156
        case .f64Max: return 157
        case .f32CopySign: return 158
        case .f64CopySign: return 159
        case .f32Eq: return 160
        case .f64Eq: return 161
        case .f32Ne: return 162
        case .f64Ne: return 163
        case .f32Lt: return 164
        case .f64Lt: return 165
        case .f32Gt: return 166
        case .f64Gt: return 167
        case .f32Le: return 168
        case .f64Le: return 169
        case .f32Ge: return 170
        case .f64Ge: return 171
        case .f32Abs: return 172
        case .f64Abs: return 173
        case .f32Neg: return 174
        case .f64Neg: return 175
        case .f32Ceil: return 176
        case .f64Ceil: return 177
        case .f32Floor: return 178
        case .f64Floor: return 179
        case .f32Trunc: return 180
        case .f64Trunc: return 181
        case .f32Nearest: return 182
        case .f64Nearest: return 183
        case .f32Sqrt: return 184
        case .f64Sqrt: return 185
        case .f64PromoteF32: return 186
        case .f32DemoteF64: return 187
        case .select: return 188
        case .refNull: return 189
        case .refIsNull: return 190
        case .refFunc: return 191
        case .tableGet: return 192
        case .tableSet: return 193
        case .tableSize: return 194
        case .tableGrow: return 195
        case .tableFill: return 196
        case .tableCopy: return 197
        case .tableInit: return 198
        case .tableElementDrop: return 199
        case .onEnter: return 200
        case .onExit: return 201
        }
    }
}


import _CWasmKit.InlineCode

extension Instruction {
    private static let handlers: [UInt64] = withUnsafePointer(to: wasmkit_tc_exec_handlers) {
        let count = MemoryLayout.size(ofValue: wasmkit_tc_exec_handlers) / MemoryLayout<wasmkit_tc_exec>.size
        return $0.withMemoryRebound(to: UInt64.self, capacity: count) {
            Array(UnsafeBufferPointer(start: $0, count: count))
        }
    }

    @inline(never)
    var handler: UInt64 {
        return Self.handlers[rawIndex]
    }
}
