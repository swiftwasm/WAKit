// swift-format-ignore-file
//// Automatically generated by Utilities/Sources/WasmGen.swift
//// DO NOT EDIT DIRECTLY

import WasmTypes

public enum Instruction: Equatable {
    public enum Load: Equatable {
        case i32Load
        case i64Load
        case f32Load
        case f64Load
        case i32Load8S
        case i32Load8U
        case i32Load16S
        case i32Load16U
        case i64Load8S
        case i64Load8U
        case i64Load16S
        case i64Load16U
        case i64Load32S
        case i64Load32U
    }
    public enum Store: Equatable {
        case i32Store
        case i64Store
        case f32Store
        case f64Store
        case i32Store8
        case i32Store16
        case i64Store8
        case i64Store16
        case i64Store32
    }
    public enum Cmp: Equatable {
        case i32Eq
        case i32Ne
        case i32LtS
        case i32LtU
        case i32GtS
        case i32GtU
        case i32LeS
        case i32LeU
        case i32GeS
        case i32GeU
        case i64Eq
        case i64Ne
        case i64LtS
        case i64LtU
        case i64GtS
        case i64GtU
        case i64LeS
        case i64LeU
        case i64GeS
        case i64GeU
        case f32Eq
        case f32Ne
        case f32Lt
        case f32Gt
        case f32Le
        case f32Ge
        case f64Eq
        case f64Ne
        case f64Lt
        case f64Gt
        case f64Le
        case f64Ge
    }
    public enum Unary: Equatable {
        case i32Clz
        case i32Ctz
        case i32Popcnt
        case i64Clz
        case i64Ctz
        case i64Popcnt
        case f32Abs
        case f32Neg
        case f32Ceil
        case f32Floor
        case f32Trunc
        case f32Nearest
        case f32Sqrt
        case f64Abs
        case f64Neg
        case f64Ceil
        case f64Floor
        case f64Trunc
        case f64Nearest
        case f64Sqrt
        case i32Extend8S
        case i32Extend16S
        case i64Extend8S
        case i64Extend16S
        case i64Extend32S
    }
    public enum Binary: Equatable {
        case i32Add
        case i32Sub
        case i32Mul
        case i32DivS
        case i32DivU
        case i32RemS
        case i32RemU
        case i32And
        case i32Or
        case i32Xor
        case i32Shl
        case i32ShrS
        case i32ShrU
        case i32Rotl
        case i32Rotr
        case i64Add
        case i64Sub
        case i64Mul
        case i64DivS
        case i64DivU
        case i64RemS
        case i64RemU
        case i64And
        case i64Or
        case i64Xor
        case i64Shl
        case i64ShrS
        case i64ShrU
        case i64Rotl
        case i64Rotr
        case f32Add
        case f32Sub
        case f32Mul
        case f32Div
        case f32Min
        case f32Max
        case f32Copysign
        case f64Add
        case f64Sub
        case f64Mul
        case f64Div
        case f64Min
        case f64Max
        case f64Copysign
    }
    case `unreachable`
    case `nop`
    case `block`(blockType: BlockType)
    case `loop`(blockType: BlockType)
    case `if`(blockType: BlockType)
    case `else`
    case `end`
    case `br`(relativeDepth: UInt32)
    case `brIf`(relativeDepth: UInt32)
    case `brTable`(targets: BrTable)
    case `return`
    case `call`(functionIndex: UInt32)
    case `callIndirect`(typeIndex: UInt32, tableIndex: UInt32)
    case `drop`
    case `select`
    case `typedSelect`(type: ValueType)
    case `localGet`(localIndex: UInt32)
    case `localSet`(localIndex: UInt32)
    case `localTee`(localIndex: UInt32)
    case `globalGet`(globalIndex: UInt32)
    case `globalSet`(globalIndex: UInt32)
    case `load`(Instruction.Load, memarg: MemArg)
    case `store`(Instruction.Store, memarg: MemArg)
    case `memorySize`(memory: UInt32)
    case `memoryGrow`(memory: UInt32)
    case `i32Const`(value: Int32)
    case `i64Const`(value: Int64)
    case `f32Const`(value: IEEE754.Float32)
    case `f64Const`(value: IEEE754.Float64)
    case `refNull`(type: ReferenceType)
    case `refIsNull`
    case `refFunc`(functionIndex: UInt32)
    case `i32Eqz`
    case `cmp`(Instruction.Cmp)
    case `i64Eqz`
    case `unary`(Instruction.Unary)
    case `binary`(Instruction.Binary)
    case `i32WrapI64`
    case `i32TruncF32S`
    case `i32TruncF32U`
    case `i32TruncF64S`
    case `i32TruncF64U`
    case `i64ExtendI32S`
    case `i64ExtendI32U`
    case `i64TruncF32S`
    case `i64TruncF32U`
    case `i64TruncF64S`
    case `i64TruncF64U`
    case `f32ConvertI32S`
    case `f32ConvertI32U`
    case `f32ConvertI64S`
    case `f32ConvertI64U`
    case `f32DemoteF64`
    case `f64ConvertI32S`
    case `f64ConvertI32U`
    case `f64ConvertI64S`
    case `f64ConvertI64U`
    case `f64PromoteF32`
    case `i32ReinterpretF32`
    case `i64ReinterpretF64`
    case `f32ReinterpretI32`
    case `f64ReinterpretI64`
    case `memoryInit`(dataIndex: UInt32)
    case `dataDrop`(dataIndex: UInt32)
    case `memoryCopy`(dstMem: UInt32, srcMem: UInt32)
    case `memoryFill`(memory: UInt32)
    case `tableInit`(elemIndex: UInt32, table: UInt32)
    case `elemDrop`(elemIndex: UInt32)
    case `tableCopy`(dstTable: UInt32, srcTable: UInt32)
    case `tableFill`(table: UInt32)
    case `tableGet`(table: UInt32)
    case `tableSet`(table: UInt32)
    case `tableGrow`(table: UInt32)
    case `tableSize`(table: UInt32)
    case `i32TruncSatF32S`
    case `i32TruncSatF32U`
    case `i32TruncSatF64S`
    case `i32TruncSatF64U`
    case `i64TruncSatF32S`
    case `i64TruncSatF32U`
    case `i64TruncSatF64S`
    case `i64TruncSatF64U`
}

/// A visitor that visits all instructions by a single visit method.
public protocol AnyInstructionVisitor: InstructionVisitor {
    /// Visiting any instruction.
    mutating func visit(_ instruction: Instruction) throws
}

extension AnyInstructionVisitor {
    public mutating func visitUnreachable() throws { return try self.visit(.unreachable) }
    public mutating func visitNop() throws { return try self.visit(.nop) }
    public mutating func visitBlock(blockType: BlockType) throws { return try self.visit(.block(blockType: blockType)) }
    public mutating func visitLoop(blockType: BlockType) throws { return try self.visit(.loop(blockType: blockType)) }
    public mutating func visitIf(blockType: BlockType) throws { return try self.visit(.if(blockType: blockType)) }
    public mutating func visitElse() throws { return try self.visit(.else) }
    public mutating func visitEnd() throws { return try self.visit(.end) }
    public mutating func visitBr(relativeDepth: UInt32) throws { return try self.visit(.br(relativeDepth: relativeDepth)) }
    public mutating func visitBrIf(relativeDepth: UInt32) throws { return try self.visit(.brIf(relativeDepth: relativeDepth)) }
    public mutating func visitBrTable(targets: BrTable) throws { return try self.visit(.brTable(targets: targets)) }
    public mutating func visitReturn() throws { return try self.visit(.return) }
    public mutating func visitCall(functionIndex: UInt32) throws { return try self.visit(.call(functionIndex: functionIndex)) }
    public mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws { return try self.visit(.callIndirect(typeIndex: typeIndex, tableIndex: tableIndex)) }
    public mutating func visitDrop() throws { return try self.visit(.drop) }
    public mutating func visitSelect() throws { return try self.visit(.select) }
    public mutating func visitTypedSelect(type: ValueType) throws { return try self.visit(.typedSelect(type: type)) }
    public mutating func visitLocalGet(localIndex: UInt32) throws { return try self.visit(.localGet(localIndex: localIndex)) }
    public mutating func visitLocalSet(localIndex: UInt32) throws { return try self.visit(.localSet(localIndex: localIndex)) }
    public mutating func visitLocalTee(localIndex: UInt32) throws { return try self.visit(.localTee(localIndex: localIndex)) }
    public mutating func visitGlobalGet(globalIndex: UInt32) throws { return try self.visit(.globalGet(globalIndex: globalIndex)) }
    public mutating func visitGlobalSet(globalIndex: UInt32) throws { return try self.visit(.globalSet(globalIndex: globalIndex)) }
    public mutating func visitLoad(_ load: Instruction.Load, memarg: MemArg) throws { return try self.visit(.load(load, memarg: memarg)) }
    public mutating func visitStore(_ store: Instruction.Store, memarg: MemArg) throws { return try self.visit(.store(store, memarg: memarg)) }
    public mutating func visitMemorySize(memory: UInt32) throws { return try self.visit(.memorySize(memory: memory)) }
    public mutating func visitMemoryGrow(memory: UInt32) throws { return try self.visit(.memoryGrow(memory: memory)) }
    public mutating func visitI32Const(value: Int32) throws { return try self.visit(.i32Const(value: value)) }
    public mutating func visitI64Const(value: Int64) throws { return try self.visit(.i64Const(value: value)) }
    public mutating func visitF32Const(value: IEEE754.Float32) throws { return try self.visit(.f32Const(value: value)) }
    public mutating func visitF64Const(value: IEEE754.Float64) throws { return try self.visit(.f64Const(value: value)) }
    public mutating func visitRefNull(type: ReferenceType) throws { return try self.visit(.refNull(type: type)) }
    public mutating func visitRefIsNull() throws { return try self.visit(.refIsNull) }
    public mutating func visitRefFunc(functionIndex: UInt32) throws { return try self.visit(.refFunc(functionIndex: functionIndex)) }
    public mutating func visitI32Eqz() throws { return try self.visit(.i32Eqz) }
    public mutating func visitCmp(_ cmp: Instruction.Cmp) throws { return try self.visit(.cmp(cmp)) }
    public mutating func visitI64Eqz() throws { return try self.visit(.i64Eqz) }
    public mutating func visitUnary(_ unary: Instruction.Unary) throws { return try self.visit(.unary(unary)) }
    public mutating func visitBinary(_ binary: Instruction.Binary) throws { return try self.visit(.binary(binary)) }
    public mutating func visitI32WrapI64() throws { return try self.visit(.i32WrapI64) }
    public mutating func visitI32TruncF32S() throws { return try self.visit(.i32TruncF32S) }
    public mutating func visitI32TruncF32U() throws { return try self.visit(.i32TruncF32U) }
    public mutating func visitI32TruncF64S() throws { return try self.visit(.i32TruncF64S) }
    public mutating func visitI32TruncF64U() throws { return try self.visit(.i32TruncF64U) }
    public mutating func visitI64ExtendI32S() throws { return try self.visit(.i64ExtendI32S) }
    public mutating func visitI64ExtendI32U() throws { return try self.visit(.i64ExtendI32U) }
    public mutating func visitI64TruncF32S() throws { return try self.visit(.i64TruncF32S) }
    public mutating func visitI64TruncF32U() throws { return try self.visit(.i64TruncF32U) }
    public mutating func visitI64TruncF64S() throws { return try self.visit(.i64TruncF64S) }
    public mutating func visitI64TruncF64U() throws { return try self.visit(.i64TruncF64U) }
    public mutating func visitF32ConvertI32S() throws { return try self.visit(.f32ConvertI32S) }
    public mutating func visitF32ConvertI32U() throws { return try self.visit(.f32ConvertI32U) }
    public mutating func visitF32ConvertI64S() throws { return try self.visit(.f32ConvertI64S) }
    public mutating func visitF32ConvertI64U() throws { return try self.visit(.f32ConvertI64U) }
    public mutating func visitF32DemoteF64() throws { return try self.visit(.f32DemoteF64) }
    public mutating func visitF64ConvertI32S() throws { return try self.visit(.f64ConvertI32S) }
    public mutating func visitF64ConvertI32U() throws { return try self.visit(.f64ConvertI32U) }
    public mutating func visitF64ConvertI64S() throws { return try self.visit(.f64ConvertI64S) }
    public mutating func visitF64ConvertI64U() throws { return try self.visit(.f64ConvertI64U) }
    public mutating func visitF64PromoteF32() throws { return try self.visit(.f64PromoteF32) }
    public mutating func visitI32ReinterpretF32() throws { return try self.visit(.i32ReinterpretF32) }
    public mutating func visitI64ReinterpretF64() throws { return try self.visit(.i64ReinterpretF64) }
    public mutating func visitF32ReinterpretI32() throws { return try self.visit(.f32ReinterpretI32) }
    public mutating func visitF64ReinterpretI64() throws { return try self.visit(.f64ReinterpretI64) }
    public mutating func visitMemoryInit(dataIndex: UInt32) throws { return try self.visit(.memoryInit(dataIndex: dataIndex)) }
    public mutating func visitDataDrop(dataIndex: UInt32) throws { return try self.visit(.dataDrop(dataIndex: dataIndex)) }
    public mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws { return try self.visit(.memoryCopy(dstMem: dstMem, srcMem: srcMem)) }
    public mutating func visitMemoryFill(memory: UInt32) throws { return try self.visit(.memoryFill(memory: memory)) }
    public mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws { return try self.visit(.tableInit(elemIndex: elemIndex, table: table)) }
    public mutating func visitElemDrop(elemIndex: UInt32) throws { return try self.visit(.elemDrop(elemIndex: elemIndex)) }
    public mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws { return try self.visit(.tableCopy(dstTable: dstTable, srcTable: srcTable)) }
    public mutating func visitTableFill(table: UInt32) throws { return try self.visit(.tableFill(table: table)) }
    public mutating func visitTableGet(table: UInt32) throws { return try self.visit(.tableGet(table: table)) }
    public mutating func visitTableSet(table: UInt32) throws { return try self.visit(.tableSet(table: table)) }
    public mutating func visitTableGrow(table: UInt32) throws { return try self.visit(.tableGrow(table: table)) }
    public mutating func visitTableSize(table: UInt32) throws { return try self.visit(.tableSize(table: table)) }
    public mutating func visitI32TruncSatF32S() throws { return try self.visit(.i32TruncSatF32S) }
    public mutating func visitI32TruncSatF32U() throws { return try self.visit(.i32TruncSatF32U) }
    public mutating func visitI32TruncSatF64S() throws { return try self.visit(.i32TruncSatF64S) }
    public mutating func visitI32TruncSatF64U() throws { return try self.visit(.i32TruncSatF64U) }
    public mutating func visitI64TruncSatF32S() throws { return try self.visit(.i64TruncSatF32S) }
    public mutating func visitI64TruncSatF32U() throws { return try self.visit(.i64TruncSatF32U) }
    public mutating func visitI64TruncSatF64S() throws { return try self.visit(.i64TruncSatF64S) }
    public mutating func visitI64TruncSatF64U() throws { return try self.visit(.i64TruncSatF64U) }
}

/// A visitor that traces the instructions visited.
public struct InstructionTracingVisitor<V: InstructionVisitor>: InstructionVisitor {
    /// A closure that is invoked with the visited instruction.
    public let trace: (Instruction) -> Void
    /// The visitor to forward the instructions to.
    public var visitor: V

    /// Creates a new tracing visitor.
    ///
    /// - Parameters:
    ///   - trace: A closure that is invoked with the visited instruction.
    ///   - visitor: The visitor to forward the instructions to.
    public init(trace: @escaping (Instruction) -> Void, visitor: V) {
        self.trace = trace
        self.visitor = visitor
    }
    public mutating func visitUnreachable() throws {
       trace(.unreachable)
       return try visitor.visitUnreachable()
    }
    public mutating func visitNop() throws {
       trace(.nop)
       return try visitor.visitNop()
    }
    public mutating func visitBlock(blockType: BlockType) throws {
       trace(.block(blockType: blockType))
       return try visitor.visitBlock(blockType: blockType)
    }
    public mutating func visitLoop(blockType: BlockType) throws {
       trace(.loop(blockType: blockType))
       return try visitor.visitLoop(blockType: blockType)
    }
    public mutating func visitIf(blockType: BlockType) throws {
       trace(.if(blockType: blockType))
       return try visitor.visitIf(blockType: blockType)
    }
    public mutating func visitElse() throws {
       trace(.else)
       return try visitor.visitElse()
    }
    public mutating func visitEnd() throws {
       trace(.end)
       return try visitor.visitEnd()
    }
    public mutating func visitBr(relativeDepth: UInt32) throws {
       trace(.br(relativeDepth: relativeDepth))
       return try visitor.visitBr(relativeDepth: relativeDepth)
    }
    public mutating func visitBrIf(relativeDepth: UInt32) throws {
       trace(.brIf(relativeDepth: relativeDepth))
       return try visitor.visitBrIf(relativeDepth: relativeDepth)
    }
    public mutating func visitBrTable(targets: BrTable) throws {
       trace(.brTable(targets: targets))
       return try visitor.visitBrTable(targets: targets)
    }
    public mutating func visitReturn() throws {
       trace(.return)
       return try visitor.visitReturn()
    }
    public mutating func visitCall(functionIndex: UInt32) throws {
       trace(.call(functionIndex: functionIndex))
       return try visitor.visitCall(functionIndex: functionIndex)
    }
    public mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws {
       trace(.callIndirect(typeIndex: typeIndex, tableIndex: tableIndex))
       return try visitor.visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
    }
    public mutating func visitDrop() throws {
       trace(.drop)
       return try visitor.visitDrop()
    }
    public mutating func visitSelect() throws {
       trace(.select)
       return try visitor.visitSelect()
    }
    public mutating func visitTypedSelect(type: ValueType) throws {
       trace(.typedSelect(type: type))
       return try visitor.visitTypedSelect(type: type)
    }
    public mutating func visitLocalGet(localIndex: UInt32) throws {
       trace(.localGet(localIndex: localIndex))
       return try visitor.visitLocalGet(localIndex: localIndex)
    }
    public mutating func visitLocalSet(localIndex: UInt32) throws {
       trace(.localSet(localIndex: localIndex))
       return try visitor.visitLocalSet(localIndex: localIndex)
    }
    public mutating func visitLocalTee(localIndex: UInt32) throws {
       trace(.localTee(localIndex: localIndex))
       return try visitor.visitLocalTee(localIndex: localIndex)
    }
    public mutating func visitGlobalGet(globalIndex: UInt32) throws {
       trace(.globalGet(globalIndex: globalIndex))
       return try visitor.visitGlobalGet(globalIndex: globalIndex)
    }
    public mutating func visitGlobalSet(globalIndex: UInt32) throws {
       trace(.globalSet(globalIndex: globalIndex))
       return try visitor.visitGlobalSet(globalIndex: globalIndex)
    }
    public mutating func visitLoad(_ load: Instruction.Load, memarg: MemArg) throws {
       trace(.load(load, memarg: memarg))
       return try visitor.visitLoad(load, memarg: memarg)
    }
    public mutating func visitStore(_ store: Instruction.Store, memarg: MemArg) throws {
       trace(.store(store, memarg: memarg))
       return try visitor.visitStore(store, memarg: memarg)
    }
    public mutating func visitMemorySize(memory: UInt32) throws {
       trace(.memorySize(memory: memory))
       return try visitor.visitMemorySize(memory: memory)
    }
    public mutating func visitMemoryGrow(memory: UInt32) throws {
       trace(.memoryGrow(memory: memory))
       return try visitor.visitMemoryGrow(memory: memory)
    }
    public mutating func visitI32Const(value: Int32) throws {
       trace(.i32Const(value: value))
       return try visitor.visitI32Const(value: value)
    }
    public mutating func visitI64Const(value: Int64) throws {
       trace(.i64Const(value: value))
       return try visitor.visitI64Const(value: value)
    }
    public mutating func visitF32Const(value: IEEE754.Float32) throws {
       trace(.f32Const(value: value))
       return try visitor.visitF32Const(value: value)
    }
    public mutating func visitF64Const(value: IEEE754.Float64) throws {
       trace(.f64Const(value: value))
       return try visitor.visitF64Const(value: value)
    }
    public mutating func visitRefNull(type: ReferenceType) throws {
       trace(.refNull(type: type))
       return try visitor.visitRefNull(type: type)
    }
    public mutating func visitRefIsNull() throws {
       trace(.refIsNull)
       return try visitor.visitRefIsNull()
    }
    public mutating func visitRefFunc(functionIndex: UInt32) throws {
       trace(.refFunc(functionIndex: functionIndex))
       return try visitor.visitRefFunc(functionIndex: functionIndex)
    }
    public mutating func visitI32Eqz() throws {
       trace(.i32Eqz)
       return try visitor.visitI32Eqz()
    }
    public mutating func visitCmp(_ cmp: Instruction.Cmp) throws {
       trace(.cmp(cmp))
       return try visitor.visitCmp(cmp)
    }
    public mutating func visitI64Eqz() throws {
       trace(.i64Eqz)
       return try visitor.visitI64Eqz()
    }
    public mutating func visitUnary(_ unary: Instruction.Unary) throws {
       trace(.unary(unary))
       return try visitor.visitUnary(unary)
    }
    public mutating func visitBinary(_ binary: Instruction.Binary) throws {
       trace(.binary(binary))
       return try visitor.visitBinary(binary)
    }
    public mutating func visitI32WrapI64() throws {
       trace(.i32WrapI64)
       return try visitor.visitI32WrapI64()
    }
    public mutating func visitI32TruncF32S() throws {
       trace(.i32TruncF32S)
       return try visitor.visitI32TruncF32S()
    }
    public mutating func visitI32TruncF32U() throws {
       trace(.i32TruncF32U)
       return try visitor.visitI32TruncF32U()
    }
    public mutating func visitI32TruncF64S() throws {
       trace(.i32TruncF64S)
       return try visitor.visitI32TruncF64S()
    }
    public mutating func visitI32TruncF64U() throws {
       trace(.i32TruncF64U)
       return try visitor.visitI32TruncF64U()
    }
    public mutating func visitI64ExtendI32S() throws {
       trace(.i64ExtendI32S)
       return try visitor.visitI64ExtendI32S()
    }
    public mutating func visitI64ExtendI32U() throws {
       trace(.i64ExtendI32U)
       return try visitor.visitI64ExtendI32U()
    }
    public mutating func visitI64TruncF32S() throws {
       trace(.i64TruncF32S)
       return try visitor.visitI64TruncF32S()
    }
    public mutating func visitI64TruncF32U() throws {
       trace(.i64TruncF32U)
       return try visitor.visitI64TruncF32U()
    }
    public mutating func visitI64TruncF64S() throws {
       trace(.i64TruncF64S)
       return try visitor.visitI64TruncF64S()
    }
    public mutating func visitI64TruncF64U() throws {
       trace(.i64TruncF64U)
       return try visitor.visitI64TruncF64U()
    }
    public mutating func visitF32ConvertI32S() throws {
       trace(.f32ConvertI32S)
       return try visitor.visitF32ConvertI32S()
    }
    public mutating func visitF32ConvertI32U() throws {
       trace(.f32ConvertI32U)
       return try visitor.visitF32ConvertI32U()
    }
    public mutating func visitF32ConvertI64S() throws {
       trace(.f32ConvertI64S)
       return try visitor.visitF32ConvertI64S()
    }
    public mutating func visitF32ConvertI64U() throws {
       trace(.f32ConvertI64U)
       return try visitor.visitF32ConvertI64U()
    }
    public mutating func visitF32DemoteF64() throws {
       trace(.f32DemoteF64)
       return try visitor.visitF32DemoteF64()
    }
    public mutating func visitF64ConvertI32S() throws {
       trace(.f64ConvertI32S)
       return try visitor.visitF64ConvertI32S()
    }
    public mutating func visitF64ConvertI32U() throws {
       trace(.f64ConvertI32U)
       return try visitor.visitF64ConvertI32U()
    }
    public mutating func visitF64ConvertI64S() throws {
       trace(.f64ConvertI64S)
       return try visitor.visitF64ConvertI64S()
    }
    public mutating func visitF64ConvertI64U() throws {
       trace(.f64ConvertI64U)
       return try visitor.visitF64ConvertI64U()
    }
    public mutating func visitF64PromoteF32() throws {
       trace(.f64PromoteF32)
       return try visitor.visitF64PromoteF32()
    }
    public mutating func visitI32ReinterpretF32() throws {
       trace(.i32ReinterpretF32)
       return try visitor.visitI32ReinterpretF32()
    }
    public mutating func visitI64ReinterpretF64() throws {
       trace(.i64ReinterpretF64)
       return try visitor.visitI64ReinterpretF64()
    }
    public mutating func visitF32ReinterpretI32() throws {
       trace(.f32ReinterpretI32)
       return try visitor.visitF32ReinterpretI32()
    }
    public mutating func visitF64ReinterpretI64() throws {
       trace(.f64ReinterpretI64)
       return try visitor.visitF64ReinterpretI64()
    }
    public mutating func visitMemoryInit(dataIndex: UInt32) throws {
       trace(.memoryInit(dataIndex: dataIndex))
       return try visitor.visitMemoryInit(dataIndex: dataIndex)
    }
    public mutating func visitDataDrop(dataIndex: UInt32) throws {
       trace(.dataDrop(dataIndex: dataIndex))
       return try visitor.visitDataDrop(dataIndex: dataIndex)
    }
    public mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws {
       trace(.memoryCopy(dstMem: dstMem, srcMem: srcMem))
       return try visitor.visitMemoryCopy(dstMem: dstMem, srcMem: srcMem)
    }
    public mutating func visitMemoryFill(memory: UInt32) throws {
       trace(.memoryFill(memory: memory))
       return try visitor.visitMemoryFill(memory: memory)
    }
    public mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws {
       trace(.tableInit(elemIndex: elemIndex, table: table))
       return try visitor.visitTableInit(elemIndex: elemIndex, table: table)
    }
    public mutating func visitElemDrop(elemIndex: UInt32) throws {
       trace(.elemDrop(elemIndex: elemIndex))
       return try visitor.visitElemDrop(elemIndex: elemIndex)
    }
    public mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws {
       trace(.tableCopy(dstTable: dstTable, srcTable: srcTable))
       return try visitor.visitTableCopy(dstTable: dstTable, srcTable: srcTable)
    }
    public mutating func visitTableFill(table: UInt32) throws {
       trace(.tableFill(table: table))
       return try visitor.visitTableFill(table: table)
    }
    public mutating func visitTableGet(table: UInt32) throws {
       trace(.tableGet(table: table))
       return try visitor.visitTableGet(table: table)
    }
    public mutating func visitTableSet(table: UInt32) throws {
       trace(.tableSet(table: table))
       return try visitor.visitTableSet(table: table)
    }
    public mutating func visitTableGrow(table: UInt32) throws {
       trace(.tableGrow(table: table))
       return try visitor.visitTableGrow(table: table)
    }
    public mutating func visitTableSize(table: UInt32) throws {
       trace(.tableSize(table: table))
       return try visitor.visitTableSize(table: table)
    }
    public mutating func visitI32TruncSatF32S() throws {
       trace(.i32TruncSatF32S)
       return try visitor.visitI32TruncSatF32S()
    }
    public mutating func visitI32TruncSatF32U() throws {
       trace(.i32TruncSatF32U)
       return try visitor.visitI32TruncSatF32U()
    }
    public mutating func visitI32TruncSatF64S() throws {
       trace(.i32TruncSatF64S)
       return try visitor.visitI32TruncSatF64S()
    }
    public mutating func visitI32TruncSatF64U() throws {
       trace(.i32TruncSatF64U)
       return try visitor.visitI32TruncSatF64U()
    }
    public mutating func visitI64TruncSatF32S() throws {
       trace(.i64TruncSatF32S)
       return try visitor.visitI64TruncSatF32S()
    }
    public mutating func visitI64TruncSatF32U() throws {
       trace(.i64TruncSatF32U)
       return try visitor.visitI64TruncSatF32U()
    }
    public mutating func visitI64TruncSatF64S() throws {
       trace(.i64TruncSatF64S)
       return try visitor.visitI64TruncSatF64S()
    }
    public mutating func visitI64TruncSatF64U() throws {
       trace(.i64TruncSatF64U)
       return try visitor.visitI64TruncSatF64U()
    }
}

/// A visitor for WebAssembly instructions.
///
/// The visitor pattern is used while parsing WebAssembly expressions to allow for easy extensibility.
/// See the expression parsing method ``Code/parseExpression(visitor:)``
public protocol InstructionVisitor {
    /// Visiting `unreachable` instruction.
    mutating func visitUnreachable() throws
    /// Visiting `nop` instruction.
    mutating func visitNop() throws
    /// Visiting `block` instruction.
    mutating func visitBlock(blockType: BlockType) throws
    /// Visiting `loop` instruction.
    mutating func visitLoop(blockType: BlockType) throws
    /// Visiting `if` instruction.
    mutating func visitIf(blockType: BlockType) throws
    /// Visiting `else` instruction.
    mutating func visitElse() throws
    /// Visiting `end` instruction.
    mutating func visitEnd() throws
    /// Visiting `br` instruction.
    mutating func visitBr(relativeDepth: UInt32) throws
    /// Visiting `br_if` instruction.
    mutating func visitBrIf(relativeDepth: UInt32) throws
    /// Visiting `br_table` instruction.
    mutating func visitBrTable(targets: BrTable) throws
    /// Visiting `return` instruction.
    mutating func visitReturn() throws
    /// Visiting `call` instruction.
    mutating func visitCall(functionIndex: UInt32) throws
    /// Visiting `call_indirect` instruction.
    mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws
    /// Visiting `drop` instruction.
    mutating func visitDrop() throws
    /// Visiting `select` instruction.
    mutating func visitSelect() throws
    /// Visiting `typedSelect` instruction.
    mutating func visitTypedSelect(type: ValueType) throws
    /// Visiting `local.get` instruction.
    mutating func visitLocalGet(localIndex: UInt32) throws
    /// Visiting `local.set` instruction.
    mutating func visitLocalSet(localIndex: UInt32) throws
    /// Visiting `local.tee` instruction.
    mutating func visitLocalTee(localIndex: UInt32) throws
    /// Visiting `global.get` instruction.
    mutating func visitGlobalGet(globalIndex: UInt32) throws
    /// Visiting `global.set` instruction.
    mutating func visitGlobalSet(globalIndex: UInt32) throws
    /// Visiting `load` category instruction.
    mutating func visitLoad(_: Instruction.Load, memarg: MemArg) throws
    /// Visiting `store` category instruction.
    mutating func visitStore(_: Instruction.Store, memarg: MemArg) throws
    /// Visiting `memory.size` instruction.
    mutating func visitMemorySize(memory: UInt32) throws
    /// Visiting `memory.grow` instruction.
    mutating func visitMemoryGrow(memory: UInt32) throws
    /// Visiting `i32.const` instruction.
    mutating func visitI32Const(value: Int32) throws
    /// Visiting `i64.const` instruction.
    mutating func visitI64Const(value: Int64) throws
    /// Visiting `f32.const` instruction.
    mutating func visitF32Const(value: IEEE754.Float32) throws
    /// Visiting `f64.const` instruction.
    mutating func visitF64Const(value: IEEE754.Float64) throws
    /// Visiting `ref.null` instruction.
    mutating func visitRefNull(type: ReferenceType) throws
    /// Visiting `ref.is_null` instruction.
    mutating func visitRefIsNull() throws
    /// Visiting `ref.func` instruction.
    mutating func visitRefFunc(functionIndex: UInt32) throws
    /// Visiting `i32.eqz` instruction.
    mutating func visitI32Eqz() throws
    /// Visiting `cmp` category instruction.
    mutating func visitCmp(_: Instruction.Cmp) throws
    /// Visiting `i64.eqz` instruction.
    mutating func visitI64Eqz() throws
    /// Visiting `unary` category instruction.
    mutating func visitUnary(_: Instruction.Unary) throws
    /// Visiting `binary` category instruction.
    mutating func visitBinary(_: Instruction.Binary) throws
    /// Visiting `i32.wrap_i64` instruction.
    mutating func visitI32WrapI64() throws
    /// Visiting `i32.trunc_f32_s` instruction.
    mutating func visitI32TruncF32S() throws
    /// Visiting `i32.trunc_f32_u` instruction.
    mutating func visitI32TruncF32U() throws
    /// Visiting `i32.trunc_f64_s` instruction.
    mutating func visitI32TruncF64S() throws
    /// Visiting `i32.trunc_f64_u` instruction.
    mutating func visitI32TruncF64U() throws
    /// Visiting `i64.extend_i32_s` instruction.
    mutating func visitI64ExtendI32S() throws
    /// Visiting `i64.extend_i32_u` instruction.
    mutating func visitI64ExtendI32U() throws
    /// Visiting `i64.trunc_f32_s` instruction.
    mutating func visitI64TruncF32S() throws
    /// Visiting `i64.trunc_f32_u` instruction.
    mutating func visitI64TruncF32U() throws
    /// Visiting `i64.trunc_f64_s` instruction.
    mutating func visitI64TruncF64S() throws
    /// Visiting `i64.trunc_f64_u` instruction.
    mutating func visitI64TruncF64U() throws
    /// Visiting `f32.convert_i32_s` instruction.
    mutating func visitF32ConvertI32S() throws
    /// Visiting `f32.convert_i32_u` instruction.
    mutating func visitF32ConvertI32U() throws
    /// Visiting `f32.convert_i64_s` instruction.
    mutating func visitF32ConvertI64S() throws
    /// Visiting `f32.convert_i64_u` instruction.
    mutating func visitF32ConvertI64U() throws
    /// Visiting `f32.demote_f64` instruction.
    mutating func visitF32DemoteF64() throws
    /// Visiting `f64.convert_i32_s` instruction.
    mutating func visitF64ConvertI32S() throws
    /// Visiting `f64.convert_i32_u` instruction.
    mutating func visitF64ConvertI32U() throws
    /// Visiting `f64.convert_i64_s` instruction.
    mutating func visitF64ConvertI64S() throws
    /// Visiting `f64.convert_i64_u` instruction.
    mutating func visitF64ConvertI64U() throws
    /// Visiting `f64.promote_f32` instruction.
    mutating func visitF64PromoteF32() throws
    /// Visiting `i32.reinterpret_f32` instruction.
    mutating func visitI32ReinterpretF32() throws
    /// Visiting `i64.reinterpret_f64` instruction.
    mutating func visitI64ReinterpretF64() throws
    /// Visiting `f32.reinterpret_i32` instruction.
    mutating func visitF32ReinterpretI32() throws
    /// Visiting `f64.reinterpret_i64` instruction.
    mutating func visitF64ReinterpretI64() throws
    /// Visiting `memory.init` instruction.
    mutating func visitMemoryInit(dataIndex: UInt32) throws
    /// Visiting `data.drop` instruction.
    mutating func visitDataDrop(dataIndex: UInt32) throws
    /// Visiting `memory.copy` instruction.
    mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws
    /// Visiting `memory.fill` instruction.
    mutating func visitMemoryFill(memory: UInt32) throws
    /// Visiting `table.init` instruction.
    mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws
    /// Visiting `elem.drop` instruction.
    mutating func visitElemDrop(elemIndex: UInt32) throws
    /// Visiting `table.copy` instruction.
    mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws
    /// Visiting `table.fill` instruction.
    mutating func visitTableFill(table: UInt32) throws
    /// Visiting `table.get` instruction.
    mutating func visitTableGet(table: UInt32) throws
    /// Visiting `table.set` instruction.
    mutating func visitTableSet(table: UInt32) throws
    /// Visiting `table.grow` instruction.
    mutating func visitTableGrow(table: UInt32) throws
    /// Visiting `table.size` instruction.
    mutating func visitTableSize(table: UInt32) throws
    /// Visiting `i32.trunc_sat_f32_s` instruction.
    mutating func visitI32TruncSatF32S() throws
    /// Visiting `i32.trunc_sat_f32_u` instruction.
    mutating func visitI32TruncSatF32U() throws
    /// Visiting `i32.trunc_sat_f64_s` instruction.
    mutating func visitI32TruncSatF64S() throws
    /// Visiting `i32.trunc_sat_f64_u` instruction.
    mutating func visitI32TruncSatF64U() throws
    /// Visiting `i64.trunc_sat_f32_s` instruction.
    mutating func visitI64TruncSatF32S() throws
    /// Visiting `i64.trunc_sat_f32_u` instruction.
    mutating func visitI64TruncSatF32U() throws
    /// Visiting `i64.trunc_sat_f64_s` instruction.
    mutating func visitI64TruncSatF64S() throws
    /// Visiting `i64.trunc_sat_f64_u` instruction.
    mutating func visitI64TruncSatF64U() throws
}

extension InstructionVisitor {
    /// Visits an instruction.
    public mutating func visit(_ instruction: Instruction) throws {
        switch instruction {
        case .unreachable: return try visitUnreachable()
        case .nop: return try visitNop()
        case let .block(blockType): return try visitBlock(blockType: blockType)
        case let .loop(blockType): return try visitLoop(blockType: blockType)
        case let .if(blockType): return try visitIf(blockType: blockType)
        case .else: return try visitElse()
        case .end: return try visitEnd()
        case let .br(relativeDepth): return try visitBr(relativeDepth: relativeDepth)
        case let .brIf(relativeDepth): return try visitBrIf(relativeDepth: relativeDepth)
        case let .brTable(targets): return try visitBrTable(targets: targets)
        case .return: return try visitReturn()
        case let .call(functionIndex): return try visitCall(functionIndex: functionIndex)
        case let .callIndirect(typeIndex, tableIndex): return try visitCallIndirect(typeIndex: typeIndex, tableIndex: tableIndex)
        case .drop: return try visitDrop()
        case .select: return try visitSelect()
        case let .typedSelect(type): return try visitTypedSelect(type: type)
        case let .localGet(localIndex): return try visitLocalGet(localIndex: localIndex)
        case let .localSet(localIndex): return try visitLocalSet(localIndex: localIndex)
        case let .localTee(localIndex): return try visitLocalTee(localIndex: localIndex)
        case let .globalGet(globalIndex): return try visitGlobalGet(globalIndex: globalIndex)
        case let .globalSet(globalIndex): return try visitGlobalSet(globalIndex: globalIndex)
        case let .load(load, memarg): return try visitLoad(load, memarg: memarg)
        case let .store(store, memarg): return try visitStore(store, memarg: memarg)
        case let .memorySize(memory): return try visitMemorySize(memory: memory)
        case let .memoryGrow(memory): return try visitMemoryGrow(memory: memory)
        case let .i32Const(value): return try visitI32Const(value: value)
        case let .i64Const(value): return try visitI64Const(value: value)
        case let .f32Const(value): return try visitF32Const(value: value)
        case let .f64Const(value): return try visitF64Const(value: value)
        case let .refNull(type): return try visitRefNull(type: type)
        case .refIsNull: return try visitRefIsNull()
        case let .refFunc(functionIndex): return try visitRefFunc(functionIndex: functionIndex)
        case .i32Eqz: return try visitI32Eqz()
        case let .cmp(cmp): return try visitCmp(cmp)
        case .i64Eqz: return try visitI64Eqz()
        case let .unary(unary): return try visitUnary(unary)
        case let .binary(binary): return try visitBinary(binary)
        case .i32WrapI64: return try visitI32WrapI64()
        case .i32TruncF32S: return try visitI32TruncF32S()
        case .i32TruncF32U: return try visitI32TruncF32U()
        case .i32TruncF64S: return try visitI32TruncF64S()
        case .i32TruncF64U: return try visitI32TruncF64U()
        case .i64ExtendI32S: return try visitI64ExtendI32S()
        case .i64ExtendI32U: return try visitI64ExtendI32U()
        case .i64TruncF32S: return try visitI64TruncF32S()
        case .i64TruncF32U: return try visitI64TruncF32U()
        case .i64TruncF64S: return try visitI64TruncF64S()
        case .i64TruncF64U: return try visitI64TruncF64U()
        case .f32ConvertI32S: return try visitF32ConvertI32S()
        case .f32ConvertI32U: return try visitF32ConvertI32U()
        case .f32ConvertI64S: return try visitF32ConvertI64S()
        case .f32ConvertI64U: return try visitF32ConvertI64U()
        case .f32DemoteF64: return try visitF32DemoteF64()
        case .f64ConvertI32S: return try visitF64ConvertI32S()
        case .f64ConvertI32U: return try visitF64ConvertI32U()
        case .f64ConvertI64S: return try visitF64ConvertI64S()
        case .f64ConvertI64U: return try visitF64ConvertI64U()
        case .f64PromoteF32: return try visitF64PromoteF32()
        case .i32ReinterpretF32: return try visitI32ReinterpretF32()
        case .i64ReinterpretF64: return try visitI64ReinterpretF64()
        case .f32ReinterpretI32: return try visitF32ReinterpretI32()
        case .f64ReinterpretI64: return try visitF64ReinterpretI64()
        case let .memoryInit(dataIndex): return try visitMemoryInit(dataIndex: dataIndex)
        case let .dataDrop(dataIndex): return try visitDataDrop(dataIndex: dataIndex)
        case let .memoryCopy(dstMem, srcMem): return try visitMemoryCopy(dstMem: dstMem, srcMem: srcMem)
        case let .memoryFill(memory): return try visitMemoryFill(memory: memory)
        case let .tableInit(elemIndex, table): return try visitTableInit(elemIndex: elemIndex, table: table)
        case let .elemDrop(elemIndex): return try visitElemDrop(elemIndex: elemIndex)
        case let .tableCopy(dstTable, srcTable): return try visitTableCopy(dstTable: dstTable, srcTable: srcTable)
        case let .tableFill(table): return try visitTableFill(table: table)
        case let .tableGet(table): return try visitTableGet(table: table)
        case let .tableSet(table): return try visitTableSet(table: table)
        case let .tableGrow(table): return try visitTableGrow(table: table)
        case let .tableSize(table): return try visitTableSize(table: table)
        case .i32TruncSatF32S: return try visitI32TruncSatF32S()
        case .i32TruncSatF32U: return try visitI32TruncSatF32U()
        case .i32TruncSatF64S: return try visitI32TruncSatF64S()
        case .i32TruncSatF64U: return try visitI32TruncSatF64U()
        case .i64TruncSatF32S: return try visitI64TruncSatF32S()
        case .i64TruncSatF32U: return try visitI64TruncSatF32U()
        case .i64TruncSatF64S: return try visitI64TruncSatF64S()
        case .i64TruncSatF64U: return try visitI64TruncSatF64U()
        }
    }
}

// MARK: - Placeholder implementations
extension InstructionVisitor {
    public mutating func visitUnreachable() throws {}
    public mutating func visitNop() throws {}
    public mutating func visitBlock(blockType: BlockType) throws {}
    public mutating func visitLoop(blockType: BlockType) throws {}
    public mutating func visitIf(blockType: BlockType) throws {}
    public mutating func visitElse() throws {}
    public mutating func visitEnd() throws {}
    public mutating func visitBr(relativeDepth: UInt32) throws {}
    public mutating func visitBrIf(relativeDepth: UInt32) throws {}
    public mutating func visitBrTable(targets: BrTable) throws {}
    public mutating func visitReturn() throws {}
    public mutating func visitCall(functionIndex: UInt32) throws {}
    public mutating func visitCallIndirect(typeIndex: UInt32, tableIndex: UInt32) throws {}
    public mutating func visitDrop() throws {}
    public mutating func visitSelect() throws {}
    public mutating func visitTypedSelect(type: ValueType) throws {}
    public mutating func visitLocalGet(localIndex: UInt32) throws {}
    public mutating func visitLocalSet(localIndex: UInt32) throws {}
    public mutating func visitLocalTee(localIndex: UInt32) throws {}
    public mutating func visitGlobalGet(globalIndex: UInt32) throws {}
    public mutating func visitGlobalSet(globalIndex: UInt32) throws {}
    public mutating func visitLoad(_ load: Instruction.Load, memarg: MemArg) throws {}
    public mutating func visitStore(_ store: Instruction.Store, memarg: MemArg) throws {}
    public mutating func visitMemorySize(memory: UInt32) throws {}
    public mutating func visitMemoryGrow(memory: UInt32) throws {}
    public mutating func visitI32Const(value: Int32) throws {}
    public mutating func visitI64Const(value: Int64) throws {}
    public mutating func visitF32Const(value: IEEE754.Float32) throws {}
    public mutating func visitF64Const(value: IEEE754.Float64) throws {}
    public mutating func visitRefNull(type: ReferenceType) throws {}
    public mutating func visitRefIsNull() throws {}
    public mutating func visitRefFunc(functionIndex: UInt32) throws {}
    public mutating func visitI32Eqz() throws {}
    public mutating func visitCmp(_ cmp: Instruction.Cmp) throws {}
    public mutating func visitI64Eqz() throws {}
    public mutating func visitUnary(_ unary: Instruction.Unary) throws {}
    public mutating func visitBinary(_ binary: Instruction.Binary) throws {}
    public mutating func visitI32WrapI64() throws {}
    public mutating func visitI32TruncF32S() throws {}
    public mutating func visitI32TruncF32U() throws {}
    public mutating func visitI32TruncF64S() throws {}
    public mutating func visitI32TruncF64U() throws {}
    public mutating func visitI64ExtendI32S() throws {}
    public mutating func visitI64ExtendI32U() throws {}
    public mutating func visitI64TruncF32S() throws {}
    public mutating func visitI64TruncF32U() throws {}
    public mutating func visitI64TruncF64S() throws {}
    public mutating func visitI64TruncF64U() throws {}
    public mutating func visitF32ConvertI32S() throws {}
    public mutating func visitF32ConvertI32U() throws {}
    public mutating func visitF32ConvertI64S() throws {}
    public mutating func visitF32ConvertI64U() throws {}
    public mutating func visitF32DemoteF64() throws {}
    public mutating func visitF64ConvertI32S() throws {}
    public mutating func visitF64ConvertI32U() throws {}
    public mutating func visitF64ConvertI64S() throws {}
    public mutating func visitF64ConvertI64U() throws {}
    public mutating func visitF64PromoteF32() throws {}
    public mutating func visitI32ReinterpretF32() throws {}
    public mutating func visitI64ReinterpretF64() throws {}
    public mutating func visitF32ReinterpretI32() throws {}
    public mutating func visitF64ReinterpretI64() throws {}
    public mutating func visitMemoryInit(dataIndex: UInt32) throws {}
    public mutating func visitDataDrop(dataIndex: UInt32) throws {}
    public mutating func visitMemoryCopy(dstMem: UInt32, srcMem: UInt32) throws {}
    public mutating func visitMemoryFill(memory: UInt32) throws {}
    public mutating func visitTableInit(elemIndex: UInt32, table: UInt32) throws {}
    public mutating func visitElemDrop(elemIndex: UInt32) throws {}
    public mutating func visitTableCopy(dstTable: UInt32, srcTable: UInt32) throws {}
    public mutating func visitTableFill(table: UInt32) throws {}
    public mutating func visitTableGet(table: UInt32) throws {}
    public mutating func visitTableSet(table: UInt32) throws {}
    public mutating func visitTableGrow(table: UInt32) throws {}
    public mutating func visitTableSize(table: UInt32) throws {}
    public mutating func visitI32TruncSatF32S() throws {}
    public mutating func visitI32TruncSatF32U() throws {}
    public mutating func visitI32TruncSatF64S() throws {}
    public mutating func visitI32TruncSatF64U() throws {}
    public mutating func visitI64TruncSatF32S() throws {}
    public mutating func visitI64TruncSatF32U() throws {}
    public mutating func visitI64TruncSatF64S() throws {}
    public mutating func visitI64TruncSatF64U() throws {}
}

